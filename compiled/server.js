'use strict';

var handler = require('./lib/request-handler.js');
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var sessions = require("client-sessions");

// console.log('handler', handler)

app.use(sessions({
  cookieName: 'mySession', // cookie name dictates the key name added to the request object
  secret: 'blargadeeblargblarg', // should be a large unguessable string
  resave: true,
  duration: 24 * 60 * 60 * 1000, // how long the session will stay valid in ms
  activeDuration: 1000 * 60 * 5, // if expiresIn < activeDuration, the session will be extended by activeDuration milliseconds
  saveInitialized: true
}));

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(express.static(__dirname + '/public'));
app.use('/scripts', express.static(__dirname + '/node_modules'));
app.use('/compiled', express.static(__dirname + '/compiled'));
app.post('/sendWatchRequest', handler.sendWatchRequest);
app.post('/signup', handler.signupUser);
app.post('/login', handler.signinUser);
app.post('/decline', handler.decline);
app.post('/accept', handler.accept);
app.post('/getFriends', handler.getFriends);
app.get('/login', function (req, res) {
  console.log('loeijwfloejfelifjdp');
});
app.post('/findMovieBuddies', handler.findMovieBuddies);

//friend requests
app.post('/listRequests', handler.listRequests);
app.post('/sendRequest', handler.sendRequest);
//Friend requests
app.post('/getThisFriendsMovies', handler.getThisFriendsMovies);
app.post('/logout', handler.logout);

//////////////////
//Handling movies
//////////////////
app.post('/ratemovie', handler.rateMovie);
app.get('/recentRelease', handler.getRecentRelease);
app.get('/getUserRatings', handler.getUserRatings);
app.get('/getFriendUserRatings', handler.getFriendUserRatings);
app.post('/getMultipleMovieRatings', handler.getMultipleMovieRatings);
app.post('/getFriendRatings', handler.handleGetFriendRatings);
app.get('/searchRatedMovie', handler.searchRatedMovie);
app.get('/getFriendList', handler.getFriendList);

var port = process.env.PORT || 3000;
app.listen(port, function () {
  console.log('Example app listening on port 3000!');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLElBQUksVUFBVSxRQUFRLDBCQUFSLENBQWQ7QUFDQSxJQUFJLFVBQVUsUUFBUSxTQUFSLENBQWQ7QUFDQSxJQUFJLE1BQU0sU0FBVjtBQUNBLElBQUksYUFBYSxRQUFRLGFBQVIsQ0FBakI7QUFDQSxJQUFJLFdBQVcsUUFBUSxpQkFBUixDQUFmOzs7O0FBTUEsSUFBSSxHQUFKLENBQVEsU0FBUztBQUNmLGNBQVksV0FERyxFO0FBRWYsVUFBUSxxQkFGTyxFO0FBR2YsVUFBUSxJQUhPO0FBSWYsWUFBVSxLQUFLLEVBQUwsR0FBVSxFQUFWLEdBQWUsSUFKVixFO0FBS2Ysa0JBQWdCLE9BQU8sRUFBUCxHQUFZLENBTGIsRTtBQU1mLG1CQUFpQjtBQU5GLENBQVQsQ0FBUjs7QUFXQSxJQUFJLEdBQUosQ0FBUSxXQUFXLFVBQVgsQ0FBc0IsRUFBQyxVQUFVLElBQVgsRUFBdEIsQ0FBUjtBQUNBLElBQUksR0FBSixDQUFRLFdBQVcsSUFBWCxFQUFSO0FBQ0EsSUFBSSxHQUFKLENBQVEsUUFBUSxNQUFSLENBQWUsWUFBWSxTQUEzQixDQUFSO0FBQ0EsSUFBSSxHQUFKLENBQVEsVUFBUixFQUFvQixRQUFRLE1BQVIsQ0FBZSxZQUFZLGVBQTNCLENBQXBCO0FBQ0EsSUFBSSxHQUFKLENBQVEsV0FBUixFQUFxQixRQUFRLE1BQVIsQ0FBZSxZQUFZLFdBQTNCLENBQXJCO0FBQ0EsSUFBSSxJQUFKLENBQVMsbUJBQVQsRUFBNkIsUUFBUSxnQkFBckM7QUFDQSxJQUFJLElBQUosQ0FBUyxTQUFULEVBQW9CLFFBQVEsVUFBNUI7QUFDQSxJQUFJLElBQUosQ0FBUyxRQUFULEVBQW1CLFFBQVEsVUFBM0I7QUFDQSxJQUFJLElBQUosQ0FBUyxVQUFULEVBQXFCLFFBQVEsT0FBN0I7QUFDQSxJQUFJLElBQUosQ0FBUyxTQUFULEVBQW9CLFFBQVEsTUFBNUI7QUFDQSxJQUFJLElBQUosQ0FBUyxhQUFULEVBQXVCLFFBQVEsVUFBL0I7QUFDQSxJQUFJLEdBQUosQ0FBUSxRQUFSLEVBQWlCLFVBQVMsR0FBVCxFQUFhLEdBQWIsRUFBaUI7QUFDbEMsVUFBUSxHQUFSLENBQVkscUJBQVo7QUFDQyxDQUZEO0FBR0EsSUFBSSxJQUFKLENBQVMsbUJBQVQsRUFBNkIsUUFBUSxnQkFBckM7OztBQU1BLElBQUksSUFBSixDQUFTLGVBQVQsRUFBMEIsUUFBUSxZQUFsQztBQUNBLElBQUksSUFBSixDQUFTLGNBQVQsRUFBeUIsUUFBUSxXQUFqQzs7QUFFQSxJQUFJLElBQUosQ0FBUyx1QkFBVCxFQUFpQyxRQUFRLG9CQUF6QztBQUNBLElBQUksSUFBSixDQUFTLFNBQVQsRUFBb0IsUUFBUSxNQUE1Qjs7Ozs7QUFNQSxJQUFJLElBQUosQ0FBUyxZQUFULEVBQXVCLFFBQVEsU0FBL0I7QUFDQSxJQUFJLEdBQUosQ0FBUSxnQkFBUixFQUEwQixRQUFRLGdCQUFsQztBQUNBLElBQUksR0FBSixDQUFRLGlCQUFSLEVBQTJCLFFBQVEsY0FBbkM7QUFDQSxJQUFJLEdBQUosQ0FBUSx1QkFBUixFQUFpQyxRQUFRLG9CQUF6QztBQUNBLElBQUksSUFBSixDQUFTLDBCQUFULEVBQXFDLFFBQVEsdUJBQTdDO0FBQ0EsSUFBSSxJQUFKLENBQVMsbUJBQVQsRUFBOEIsUUFBUSxzQkFBdEM7QUFDQSxJQUFJLEdBQUosQ0FBUSxtQkFBUixFQUE2QixRQUFRLGdCQUFyQztBQUNBLElBQUksR0FBSixDQUFRLGdCQUFSLEVBQTBCLFFBQVEsYUFBbEM7O0FBR0EsSUFBSSxPQUFPLFFBQVEsR0FBUixDQUFZLElBQVosSUFBb0IsSUFBL0I7QUFDQSxJQUFJLE1BQUosQ0FBVyxJQUFYLEVBQWlCLFlBQVk7QUFDM0IsVUFBUSxHQUFSLENBQVkscUNBQVo7QUFDRCxDQUZEIiwiZmlsZSI6InNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGhhbmRsZXIgPSByZXF1aXJlKCcuL2xpYi9yZXF1ZXN0LWhhbmRsZXIuanMnKTtcbnZhciBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIGFwcCA9IGV4cHJlc3MoKTtcbnZhciBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcbnZhciBzZXNzaW9ucyA9IHJlcXVpcmUoXCJjbGllbnQtc2Vzc2lvbnNcIik7XG5cblxuLy8gY29uc29sZS5sb2coJ2hhbmRsZXInLCBoYW5kbGVyKVxuXG5cbmFwcC51c2Uoc2Vzc2lvbnMoe1xuICBjb29raWVOYW1lOiAnbXlTZXNzaW9uJywgLy8gY29va2llIG5hbWUgZGljdGF0ZXMgdGhlIGtleSBuYW1lIGFkZGVkIHRvIHRoZSByZXF1ZXN0IG9iamVjdFxuICBzZWNyZXQ6ICdibGFyZ2FkZWVibGFyZ2JsYXJnJywgLy8gc2hvdWxkIGJlIGEgbGFyZ2UgdW5ndWVzc2FibGUgc3RyaW5nXG4gIHJlc2F2ZTogdHJ1ZSxcbiAgZHVyYXRpb246IDI0ICogNjAgKiA2MCAqIDEwMDAsIC8vIGhvdyBsb25nIHRoZSBzZXNzaW9uIHdpbGwgc3RheSB2YWxpZCBpbiBtc1xuICBhY3RpdmVEdXJhdGlvbjogMTAwMCAqIDYwICogNSwgLy8gaWYgZXhwaXJlc0luIDwgYWN0aXZlRHVyYXRpb24sIHRoZSBzZXNzaW9uIHdpbGwgYmUgZXh0ZW5kZWQgYnkgYWN0aXZlRHVyYXRpb24gbWlsbGlzZWNvbmRzXG4gIHNhdmVJbml0aWFsaXplZDogdHJ1ZVxufSkpO1xuXG5cblxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoe2V4dGVuZGVkOiB0cnVlfSkpO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKF9fZGlybmFtZSArICcvcHVibGljJykpO1xuYXBwLnVzZSgnL3NjcmlwdHMnLCBleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUgKyAnL25vZGVfbW9kdWxlcycpKTtcbmFwcC51c2UoJy9jb21waWxlZCcsIGV4cHJlc3Muc3RhdGljKF9fZGlybmFtZSArICcvY29tcGlsZWQnKSk7XG5hcHAucG9zdCgnL3NlbmRXYXRjaFJlcXVlc3QnLGhhbmRsZXIuc2VuZFdhdGNoUmVxdWVzdClcbmFwcC5wb3N0KCcvc2lnbnVwJywgaGFuZGxlci5zaWdudXBVc2VyKTtcbmFwcC5wb3N0KCcvbG9naW4nLCBoYW5kbGVyLnNpZ25pblVzZXIpO1xuYXBwLnBvc3QoJy9kZWNsaW5lJywgaGFuZGxlci5kZWNsaW5lKTtcbmFwcC5wb3N0KCcvYWNjZXB0JywgaGFuZGxlci5hY2NlcHQpO1xuYXBwLnBvc3QoJy9nZXRGcmllbmRzJyxoYW5kbGVyLmdldEZyaWVuZHMpXG5hcHAuZ2V0KCcvbG9naW4nLGZ1bmN0aW9uKHJlcSxyZXMpe1xuY29uc29sZS5sb2coJ2xvZWlqd2Zsb2VqZmVsaWZqZHAnKVxufSlcbmFwcC5wb3N0KCcvZmluZE1vdmllQnVkZGllcycsaGFuZGxlci5maW5kTW92aWVCdWRkaWVzKVxuXG5cblxuXG4vL2ZyaWVuZCByZXF1ZXN0c1xuYXBwLnBvc3QoJy9saXN0UmVxdWVzdHMnLCBoYW5kbGVyLmxpc3RSZXF1ZXN0cyk7XG5hcHAucG9zdCgnL3NlbmRSZXF1ZXN0JywgaGFuZGxlci5zZW5kUmVxdWVzdCk7XG4vL0ZyaWVuZCByZXF1ZXN0c1xuYXBwLnBvc3QoJy9nZXRUaGlzRnJpZW5kc01vdmllcycsaGFuZGxlci5nZXRUaGlzRnJpZW5kc01vdmllcylcbmFwcC5wb3N0KCcvbG9nb3V0JywgaGFuZGxlci5sb2dvdXQpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy9IYW5kbGluZyBtb3ZpZXNcbi8vLy8vLy8vLy8vLy8vLy8vL1xuYXBwLnBvc3QoJy9yYXRlbW92aWUnLCBoYW5kbGVyLnJhdGVNb3ZpZSk7XG5hcHAuZ2V0KCcvcmVjZW50UmVsZWFzZScsIGhhbmRsZXIuZ2V0UmVjZW50UmVsZWFzZSk7XG5hcHAuZ2V0KCcvZ2V0VXNlclJhdGluZ3MnLCBoYW5kbGVyLmdldFVzZXJSYXRpbmdzKTtcbmFwcC5nZXQoJy9nZXRGcmllbmRVc2VyUmF0aW5ncycsIGhhbmRsZXIuZ2V0RnJpZW5kVXNlclJhdGluZ3MpO1xuYXBwLnBvc3QoJy9nZXRNdWx0aXBsZU1vdmllUmF0aW5ncycsIGhhbmRsZXIuZ2V0TXVsdGlwbGVNb3ZpZVJhdGluZ3MpO1xuYXBwLnBvc3QoJy9nZXRGcmllbmRSYXRpbmdzJywgaGFuZGxlci5oYW5kbGVHZXRGcmllbmRSYXRpbmdzKTtcbmFwcC5nZXQoJy9zZWFyY2hSYXRlZE1vdmllJywgaGFuZGxlci5zZWFyY2hSYXRlZE1vdmllKTtcbmFwcC5nZXQoJy9nZXRGcmllbmRMaXN0JywgaGFuZGxlci5nZXRGcmllbmRMaXN0KVxuXG5cbnZhciBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwO1xuYXBwLmxpc3Rlbihwb3J0LCBmdW5jdGlvbiAoKSB7XG4gIGNvbnNvbGUubG9nKCdFeGFtcGxlIGFwcCBsaXN0ZW5pbmcgb24gcG9ydCAzMDAwIScpO1xufSk7Il19