'use strict';var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;};(function webpackUniversalModuleDefinition(root,factory){if((typeof exports==='undefined'?'undefined':_typeof2(exports))==='object'&&(typeof module==='undefined'?'undefined':_typeof2(module))==='object')module.exports=factory(require("react"));else if(typeof define==='function'&&define.amd)define(["react"],factory);else if((typeof exports==='undefined'?'undefined':_typeof2(exports))==='object')exports["ReactRouter"]=factory(require("react"));else root["ReactRouter"]=factory(root["React"]);})(undefined,function(__WEBPACK_EXTERNAL_MODULE_2__){return(/******/function(modules){// webpackBootstrap
/******/// The module cache
/******/var installedModules={};/******/// The require function
/******/function __webpack_require__(moduleId){/******/// Check if module is in cache
/******/if(installedModules[moduleId])/******/return installedModules[moduleId].exports;/******/// Create a new module (and put it into the cache)
/******/var module=installedModules[moduleId]={/******/exports:{},/******/id:moduleId,/******/loaded:false/******/};/******/// Execute the module function
/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******/// Flag the module as loaded
/******/module.loaded=true;/******/// Return the exports of the module
/******/return module.exports;/******/}/******/// expose the modules object (__webpack_modules__)
/******/__webpack_require__.m=modules;/******/// expose the module cache
/******/__webpack_require__.c=installedModules;/******/// __webpack_public_path__
/******/__webpack_require__.p="";/******/// Load entry module and return exports
/******/return __webpack_require__(0);/******/}(/************************************************************************//******/[/* 0 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.createMemoryHistory=exports.hashHistory=exports.browserHistory=exports.applyRouterMiddleware=exports.formatPattern=exports.useRouterHistory=exports.match=exports.routerShape=exports.locationShape=exports.PropTypes=exports.RoutingContext=exports.RouterContext=exports.createRoutes=exports.useRoutes=exports.RouteContext=exports.Lifecycle=exports.History=exports.Route=exports.Redirect=exports.IndexRoute=exports.IndexRedirect=exports.withRouter=exports.IndexLink=exports.Link=exports.Router=undefined;var _RouteUtils=__webpack_require__(5);Object.defineProperty(exports,'createRoutes',{enumerable:true,get:function get(){return _RouteUtils.createRoutes;}});var _PropTypes2=__webpack_require__(15);Object.defineProperty(exports,'locationShape',{enumerable:true,get:function get(){return _PropTypes2.locationShape;}});Object.defineProperty(exports,'routerShape',{enumerable:true,get:function get(){return _PropTypes2.routerShape;}});var _PatternUtils=__webpack_require__(8);Object.defineProperty(exports,'formatPattern',{enumerable:true,get:function get(){return _PatternUtils.formatPattern;}});var _Router2=__webpack_require__(39);var _Router3=_interopRequireDefault(_Router2);var _Link2=__webpack_require__(20);var _Link3=_interopRequireDefault(_Link2);var _IndexLink2=__webpack_require__(33);var _IndexLink3=_interopRequireDefault(_IndexLink2);var _withRouter2=__webpack_require__(52);var _withRouter3=_interopRequireDefault(_withRouter2);var _IndexRedirect2=__webpack_require__(34);var _IndexRedirect3=_interopRequireDefault(_IndexRedirect2);var _IndexRoute2=__webpack_require__(35);var _IndexRoute3=_interopRequireDefault(_IndexRoute2);var _Redirect2=__webpack_require__(21);var _Redirect3=_interopRequireDefault(_Redirect2);var _Route2=__webpack_require__(37);var _Route3=_interopRequireDefault(_Route2);var _History2=__webpack_require__(32);var _History3=_interopRequireDefault(_History2);var _Lifecycle2=__webpack_require__(36);var _Lifecycle3=_interopRequireDefault(_Lifecycle2);var _RouteContext2=__webpack_require__(38);var _RouteContext3=_interopRequireDefault(_RouteContext2);var _useRoutes2=__webpack_require__(51);var _useRoutes3=_interopRequireDefault(_useRoutes2);var _RouterContext2=__webpack_require__(10);var _RouterContext3=_interopRequireDefault(_RouterContext2);var _RoutingContext2=__webpack_require__(40);var _RoutingContext3=_interopRequireDefault(_RoutingContext2);var _PropTypes3=_interopRequireDefault(_PropTypes2);var _match2=__webpack_require__(49);var _match3=_interopRequireDefault(_match2);var _useRouterHistory2=__webpack_require__(26);var _useRouterHistory3=_interopRequireDefault(_useRouterHistory2);var _applyRouterMiddleware2=__webpack_require__(42);var _applyRouterMiddleware3=_interopRequireDefault(_applyRouterMiddleware2);var _browserHistory2=__webpack_require__(43);var _browserHistory3=_interopRequireDefault(_browserHistory2);var _hashHistory2=__webpack_require__(47);var _hashHistory3=_interopRequireDefault(_hashHistory2);var _createMemoryHistory2=__webpack_require__(23);var _createMemoryHistory3=_interopRequireDefault(_createMemoryHistory2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.Router=_Router3.default;/* components */exports.Link=_Link3.default;exports.IndexLink=_IndexLink3.default;exports.withRouter=_withRouter3.default;/* components (configuration) */exports.IndexRedirect=_IndexRedirect3.default;exports.IndexRoute=_IndexRoute3.default;exports.Redirect=_Redirect3.default;exports.Route=_Route3.default;/* mixins */exports.History=_History3.default;exports.Lifecycle=_Lifecycle3.default;exports.RouteContext=_RouteContext3.default;/* utils */exports.useRoutes=_useRoutes3.default;exports.RouterContext=_RouterContext3.default;exports.RoutingContext=_RoutingContext3.default;exports.PropTypes=_PropTypes3.default;exports.match=_match3.default;exports.useRouterHistory=_useRouterHistory3.default;exports.applyRouterMiddleware=_applyRouterMiddleware3.default;/* histories */exports.browserHistory=_browserHistory3.default;exports.hashHistory=_hashHistory3.default;exports.createMemoryHistory=_createMemoryHistory3.default;/***/},/* 1 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.default=routerWarning;exports._resetWarned=_resetWarned;var _warning=__webpack_require__(63);var _warning2=_interopRequireDefault(_warning);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var warned={};function routerWarning(falseToWarn,message){// Only issue deprecation warnings once.
if(message.indexOf('deprecated')!==-1){if(warned[message]){return;}warned[message]=true;}message='[react-router] '+message;for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}_warning2.default.apply(undefined,[falseToWarn,message].concat(args));}function _resetWarned(){warned={};}/***/},/* 2 *//***/function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_2__;/***/},/* 3 *//***/function(module,exports,__webpack_require__){/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */'use strict';/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */var invariant=function invariant(condition,format,a,b,c,d,e,f){if(true){if(format===undefined){throw new Error('invariant requires an error message argument');}}if(!condition){var error;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment '+'for the full error message and additional helpful warnings.');}else{var args=[a,b,c,d,e,f];var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;// we don't care about invariant's own frame
throw error;}};module.exports=invariant;/***/},/* 4 *//***/function(module,exports,__webpack_require__){/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */'use strict';/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */var warning=function warning(){};if(true){warning=function warning(condition,format,args){var len=arguments.length;args=new Array(len>2?len-2:0);for(var key=2;key<len;key++){args[key-2]=arguments[key];}if(format===undefined){throw new Error('`warning(condition, format, ...args)` requires a warning '+'message argument');}if(format.length<10||/^[s\W]*$/.test(format)){throw new Error('The warning format should be able to uniquely identify this '+'warning. Please, use a more descriptive format than: '+format);}if(!condition){var argIndex=0;var message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});if(typeof console!=='undefined'){console.error(message);}try{// This error was thrown as a convenience so that you can use this stack
// to find the callsite that caused this warning to fire.
throw new Error(message);}catch(x){}}};}module.exports=warning;/***/},/* 5 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};exports.isReactChildren=isReactChildren;exports.createRouteFromReactElement=createRouteFromReactElement;exports.createRoutesFromReactChildren=createRoutesFromReactChildren;exports.createRoutes=createRoutes;var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function isValidChild(object){return object==null||_react2.default.isValidElement(object);}function isReactChildren(object){return isValidChild(object)||Array.isArray(object)&&object.every(isValidChild);}function createRoute(defaultProps,props){return _extends({},defaultProps,props);}function createRouteFromReactElement(element){var type=element.type;var route=createRoute(type.defaultProps,element.props);if(route.children){var childRoutes=createRoutesFromReactChildren(route.children,route);if(childRoutes.length)route.childRoutes=childRoutes;delete route.children;}return route;}/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */function createRoutesFromReactChildren(children,parentRoute){var routes=[];_react2.default.Children.forEach(children,function(element){if(_react2.default.isValidElement(element)){// Component classes may have a static create* method.
if(element.type.createRouteFromReactElement){var route=element.type.createRouteFromReactElement(element,parentRoute);if(route)routes.push(route);}else{routes.push(createRouteFromReactElement(element));}}});return routes;}/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */function createRoutes(routes){if(isReactChildren(routes)){routes=createRoutesFromReactChildren(routes);}else if(routes&&!Array.isArray(routes)){routes=[routes];}return routes;}/***/},/* 6 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.routes=exports.route=exports.components=exports.component=exports.history=undefined;exports.falsy=falsy;var _react=__webpack_require__(2);var func=_react.PropTypes.func;var object=_react.PropTypes.object;var arrayOf=_react.PropTypes.arrayOf;var oneOfType=_react.PropTypes.oneOfType;var element=_react.PropTypes.element;var shape=_react.PropTypes.shape;var string=_react.PropTypes.string;function falsy(props,propName,componentName){if(props[propName])return new Error('<'+componentName+'> should not have a "'+propName+'" prop');}var history=exports.history=shape({listen:func.isRequired,push:func.isRequired,replace:func.isRequired,go:func.isRequired,goBack:func.isRequired,goForward:func.isRequired});var component=exports.component=oneOfType([func,string]);var components=exports.components=oneOfType([component,object]);var route=exports.route=oneOfType([object,element]);var routes=exports.routes=oneOfType([route,arrayOf(route)]);/***/},/* 7 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.extractPath=extractPath;exports.parsePath=parsePath;function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _warning=__webpack_require__(4);var _warning2=_interopRequireDefault(_warning);function extractPath(string){var match=string.match(/^https?:\/\/[^\/]*/);if(match==null)return string;return string.substring(match[0].length);}function parsePath(path){var pathname=extractPath(path);var search='';var hash='';true?_warning2['default'](path===pathname,'A path must be pathname + search + hash only, not a fully qualified URL like "%s"',path):undefined;var hashIndex=pathname.indexOf('#');if(hashIndex!==-1){hash=pathname.substring(hashIndex);pathname=pathname.substring(0,hashIndex);}var searchIndex=pathname.indexOf('?');if(searchIndex!==-1){search=pathname.substring(searchIndex);pathname=pathname.substring(0,searchIndex);}if(pathname==='')pathname='/';return{pathname:pathname,search:search,hash:hash};}/***/},/* 8 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.compilePattern=compilePattern;exports.matchPattern=matchPattern;exports.getParamNames=getParamNames;exports.getParams=getParams;exports.formatPattern=formatPattern;var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function escapeRegExp(string){return string.replace(/[.*+?^${}()|[\]\\]/g,'\\$&');}function _compilePattern(pattern){var regexpSource='';var paramNames=[];var tokens=[];var match=void 0,lastIndex=0,matcher=/:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;while(match=matcher.exec(pattern)){if(match.index!==lastIndex){tokens.push(pattern.slice(lastIndex,match.index));regexpSource+=escapeRegExp(pattern.slice(lastIndex,match.index));}if(match[1]){regexpSource+='([^/]+)';paramNames.push(match[1]);}else if(match[0]==='**'){regexpSource+='(.*)';paramNames.push('splat');}else if(match[0]==='*'){regexpSource+='(.*?)';paramNames.push('splat');}else if(match[0]==='('){regexpSource+='(?:';}else if(match[0]===')'){regexpSource+=')?';}tokens.push(match[0]);lastIndex=matcher.lastIndex;}if(lastIndex!==pattern.length){tokens.push(pattern.slice(lastIndex,pattern.length));regexpSource+=escapeRegExp(pattern.slice(lastIndex,pattern.length));}return{pattern:pattern,regexpSource:regexpSource,paramNames:paramNames,tokens:tokens};}var CompiledPatternsCache={};function compilePattern(pattern){if(!(pattern in CompiledPatternsCache))CompiledPatternsCache[pattern]=_compilePattern(pattern);return CompiledPatternsCache[pattern];}/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 *  The function calls callback(error, matched) when finished.
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */function matchPattern(pattern,pathname){// Ensure pattern starts with leading slash for consistency with pathname.
if(pattern.charAt(0)!=='/'){pattern='/'+pattern;}var _compilePattern2=compilePattern(pattern);var regexpSource=_compilePattern2.regexpSource;var paramNames=_compilePattern2.paramNames;var tokens=_compilePattern2.tokens;if(pattern.charAt(pattern.length-1)!=='/'){regexpSource+='/?';// Allow optional path separator at end.
}// Special-case patterns like '*' for catch-all routes.
if(tokens[tokens.length-1]==='*'){regexpSource+='$';}var match=pathname.match(new RegExp('^'+regexpSource,'i'));if(match==null){return null;}var matchedPath=match[0];var remainingPathname=pathname.substr(matchedPath.length);if(remainingPathname){// Require that the match ends at a path separator, if we didn't match
// the full path, so any remaining pathname is a new path segment.
if(matchedPath.charAt(matchedPath.length-1)!=='/'){return null;}// If there is a remaining pathname, treat the path separator as part of
// the remaining pathname for properly continuing the match.
remainingPathname='/'+remainingPathname;}return{remainingPathname:remainingPathname,paramNames:paramNames,paramValues:match.slice(1).map(function(v){return v&&decodeURIComponent(v);})};}function getParamNames(pattern){return compilePattern(pattern).paramNames;}function getParams(pattern,pathname){var match=matchPattern(pattern,pathname);if(!match){return null;}var paramNames=match.paramNames;var paramValues=match.paramValues;var params={};paramNames.forEach(function(paramName,index){params[paramName]=paramValues[index];});return params;}/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */function formatPattern(pattern,params){params=params||{};var _compilePattern3=compilePattern(pattern);var tokens=_compilePattern3.tokens;var parenCount=0,pathname='',splatIndex=0;var token=void 0,paramName=void 0,paramValue=void 0;for(var i=0,len=tokens.length;i<len;++i){token=tokens[i];if(token==='*'||token==='**'){paramValue=Array.isArray(params.splat)?params.splat[splatIndex++]:params.splat;!(paramValue!=null||parenCount>0)?true?(0,_invariant2.default)(false,'Missing splat #%s for path "%s"',splatIndex,pattern):(0,_invariant2.default)(false):void 0;if(paramValue!=null)pathname+=encodeURI(paramValue);}else if(token==='('){parenCount+=1;}else if(token===')'){parenCount-=1;}else if(token.charAt(0)===':'){paramName=token.substring(1);paramValue=params[paramName];!(paramValue!=null||parenCount>0)?true?(0,_invariant2.default)(false,'Missing "%s" parameter for path "%s"',paramName,pattern):(0,_invariant2.default)(false):void 0;if(paramValue!=null)pathname+=encodeURIComponent(paramValue);}else{pathname+=token;}}return pathname.replace(/\/+/g,'/');}/***/},/* 9 *//***/function(module,exports){/**
	 * Indicates that navigation was caused by a call to history.push.
	 */'use strict';exports.__esModule=true;var PUSH='PUSH';exports.PUSH=PUSH;/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */var REPLACE='REPLACE';exports.REPLACE=REPLACE;/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */var POP='POP';exports.POP=POP;exports['default']={PUSH:PUSH,REPLACE:REPLACE,POP:POP};/***/},/* 10 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _deprecateObjectProperties=__webpack_require__(11);var _deprecateObjectProperties2=_interopRequireDefault(_deprecateObjectProperties);var _getRouteParams=__webpack_require__(46);var _getRouteParams2=_interopRequireDefault(_getRouteParams);var _RouteUtils=__webpack_require__(5);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var _React$PropTypes=_react2.default.PropTypes;var array=_React$PropTypes.array;var func=_React$PropTypes.func;var object=_React$PropTypes.object;/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */var RouterContext=_react2.default.createClass({displayName:'RouterContext',propTypes:{history:object,router:object.isRequired,location:object.isRequired,routes:array.isRequired,params:object.isRequired,components:array.isRequired,createElement:func.isRequired},getDefaultProps:function getDefaultProps(){return{createElement:_react2.default.createElement};},childContextTypes:{history:object,location:object.isRequired,router:object.isRequired},getChildContext:function getChildContext(){var _props=this.props;var router=_props.router;var history=_props.history;var location=_props.location;if(!router){true?(0,_routerWarning2.default)(false,'`<RouterContext>` expects a `router` rather than a `history`'):void 0;router=_extends({},history,{setRouteLeaveHook:history.listenBeforeLeavingRoute});delete router.listenBeforeLeavingRoute;}if(true){location=(0,_deprecateObjectProperties2.default)(location,'`context.location` is deprecated, please use a route component\'s `props.location` instead. http://tiny.cc/router-accessinglocation');}return{history:history,location:location,router:router};},createElement:function createElement(component,props){return component==null?null:this.props.createElement(component,props);},render:function render(){var _this=this;var _props2=this.props;var history=_props2.history;var location=_props2.location;var routes=_props2.routes;var params=_props2.params;var components=_props2.components;var element=null;if(components){element=components.reduceRight(function(element,components,index){if(components==null)return element;// Don't create new children; use the grandchildren.
var route=routes[index];var routeParams=(0,_getRouteParams2.default)(route,params);var props={history:history,location:location,params:params,route:route,routeParams:routeParams,routes:routes};if((0,_RouteUtils.isReactChildren)(element)){props.children=element;}else if(element){for(var prop in element){if(Object.prototype.hasOwnProperty.call(element,prop))props[prop]=element[prop];}}if((typeof components==='undefined'?'undefined':_typeof(components))==='object'){var elements={};for(var key in components){if(Object.prototype.hasOwnProperty.call(components,key)){// Pass through the key as a prop to createElement to allow
// custom createElement functions to know which named component
// they're rendering, for e.g. matching up to fetched data.
elements[key]=_this.createElement(components[key],_extends({key:key},props));}}return elements;}return _this.createElement(components,props);},element);}!(element===null||element===false||_react2.default.isValidElement(element))?true?(0,_invariant2.default)(false,'The root route must render a single element'):(0,_invariant2.default)(false):void 0;return element;}});exports.default=RouterContext;module.exports=exports['default'];/***/},/* 11 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.canUseMembrane=undefined;var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var canUseMembrane=exports.canUseMembrane=false;// No-op by default.
var deprecateObjectProperties=function deprecateObjectProperties(object){return object;};if(true){try{if(Object.defineProperty({},'x',{get:function get(){return true;}}).x){exports.canUseMembrane=canUseMembrane=true;}/* eslint-disable no-empty */}catch(e){}/* eslint-enable no-empty */if(canUseMembrane){deprecateObjectProperties=function deprecateObjectProperties(object,message){// Wrap the deprecated object in a membrane to warn on property access.
var membrane={};var _loop=function _loop(prop){if(!Object.prototype.hasOwnProperty.call(object,prop)){return'continue';}if(typeof object[prop]==='function'){// Can't use fat arrow here because of use of arguments below.
membrane[prop]=function(){true?(0,_routerWarning2.default)(false,message):void 0;return object[prop].apply(object,arguments);};return'continue';}// These properties are non-enumerable to prevent React dev tools from
// seeing them and causing spurious warnings when accessing them. In
// principle this could be done with a proxy, but support for the
// ownKeys trap on proxies is not universal, even among browsers that
// otherwise support proxies.
Object.defineProperty(membrane,prop,{get:function get(){true?(0,_routerWarning2.default)(false,message):void 0;return object[prop];}});};for(var prop in object){var _ret=_loop(prop);if(_ret==='continue')continue;}return membrane;};}}exports.default=deprecateObjectProperties;/***/},/* 12 *//***/function(module,exports){'use strict';exports.__esModule=true;var canUseDOM=!!(typeof window!=='undefined'&&window.document&&window.document.createElement);exports.canUseDOM=canUseDOM;/***/},/* 13 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _warning=__webpack_require__(4);var _warning2=_interopRequireDefault(_warning);var _queryString=__webpack_require__(61);var _runTransitionHook=__webpack_require__(19);var _runTransitionHook2=_interopRequireDefault(_runTransitionHook);var _PathUtils=__webpack_require__(7);var _deprecate=__webpack_require__(18);var _deprecate2=_interopRequireDefault(_deprecate);var SEARCH_BASE_KEY='$searchBase';function defaultStringifyQuery(query){return _queryString.stringify(query).replace(/%20/g,'+');}var defaultParseQueryString=_queryString.parse;function isNestedObject(object){for(var p in object){if(Object.prototype.hasOwnProperty.call(object,p)&&_typeof2(object[p])==='object'&&!Array.isArray(object[p])&&object[p]!==null)return true;}return false;}/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */function useQueries(createHistory){return function(){var options=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];var history=createHistory(options);var stringifyQuery=options.stringifyQuery;var parseQueryString=options.parseQueryString;if(typeof stringifyQuery!=='function')stringifyQuery=defaultStringifyQuery;if(typeof parseQueryString!=='function')parseQueryString=defaultParseQueryString;function addQuery(location){if(location.query==null){var search=location.search;location.query=parseQueryString(search.substring(1));location[SEARCH_BASE_KEY]={search:search,searchBase:''};}// TODO: Instead of all the book-keeping here, this should just strip the
// stringified query from the search.
return location;}function appendQuery(location,query){var _extends2;var searchBaseSpec=location[SEARCH_BASE_KEY];var queryString=query?stringifyQuery(query):'';if(!searchBaseSpec&&!queryString){return location;}true?_warning2['default'](stringifyQuery!==defaultStringifyQuery||!isNestedObject(query),'useQueries does not stringify nested query objects by default; '+'use a custom stringifyQuery function'):undefined;if(typeof location==='string')location=_PathUtils.parsePath(location);var searchBase=undefined;if(searchBaseSpec&&location.search===searchBaseSpec.search){searchBase=searchBaseSpec.searchBase;}else{searchBase=location.search||'';}var search=searchBase;if(queryString){search+=(search?'&':'?')+queryString;}return _extends({},location,(_extends2={search:search},_extends2[SEARCH_BASE_KEY]={search:search,searchBase:searchBase},_extends2));}// Override all read methods with query-aware versions.
function listenBefore(hook){return history.listenBefore(function(location,callback){_runTransitionHook2['default'](hook,addQuery(location),callback);});}function listen(listener){return history.listen(function(location){listener(addQuery(location));});}// Override all write methods with query-aware versions.
function push(location){history.push(appendQuery(location,location.query));}function replace(location){history.replace(appendQuery(location,location.query));}function createPath(location,query){true?_warning2['default'](!query,'the query argument to createPath is deprecated; use a location descriptor instead'):undefined;return history.createPath(appendQuery(location,query||location.query));}function createHref(location,query){true?_warning2['default'](!query,'the query argument to createHref is deprecated; use a location descriptor instead'):undefined;return history.createHref(appendQuery(location,query||location.query));}function createLocation(location){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var fullLocation=history.createLocation.apply(history,[appendQuery(location,location.query)].concat(args));if(location.query){fullLocation.query=location.query;}return addQuery(fullLocation);}// deprecated
function pushState(state,path,query){if(typeof path==='string')path=_PathUtils.parsePath(path);push(_extends({state:state},path,{query:query}));}// deprecated
function replaceState(state,path,query){if(typeof path==='string')path=_PathUtils.parsePath(path);replace(_extends({state:state},path,{query:query}));}return _extends({},history,{listenBefore:listenBefore,listen:listen,push:push,replace:replace,createPath:createPath,createHref:createHref,createLocation:createLocation,pushState:_deprecate2['default'](pushState,'pushState is deprecated; use push instead'),replaceState:_deprecate2['default'](replaceState,'replaceState is deprecated; use replace instead')});};}exports['default']=useQueries;module.exports=exports['default'];/***/},/* 14 *//***/function(module,exports){"use strict";exports.__esModule=true;exports.loopAsync=loopAsync;exports.mapAsync=mapAsync;function loopAsync(turns,work,callback){var currentTurn=0,isDone=false;var sync=false,hasNext=false,doneArgs=void 0;function done(){isDone=true;if(sync){// Iterate instead of recursing if possible.
doneArgs=[].concat(Array.prototype.slice.call(arguments));return;}callback.apply(this,arguments);}function next(){if(isDone){return;}hasNext=true;if(sync){// Iterate instead of recursing if possible.
return;}sync=true;while(!isDone&&currentTurn<turns&&hasNext){hasNext=false;work.call(this,currentTurn++,next,done);}sync=false;if(isDone){// This means the loop finished synchronously.
callback.apply(this,doneArgs);return;}if(currentTurn>=turns&&hasNext){isDone=true;callback();}}next();}function mapAsync(array,work,callback){var length=array.length;var values=[];if(length===0)return callback(null,values);var isDone=false,doneCount=0;function done(index,error,value){if(isDone)return;if(error){isDone=true;callback(error);}else{values[index]=value;isDone=++doneCount===length;if(isDone)callback(null,values);}}array.forEach(function(item,index){work(item,index,function(error,value){done(index,error,value);});});}/***/},/* 15 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.router=exports.routes=exports.route=exports.components=exports.component=exports.location=exports.history=exports.falsy=exports.locationShape=exports.routerShape=undefined;var _react=__webpack_require__(2);var _deprecateObjectProperties=__webpack_require__(11);var _deprecateObjectProperties2=_interopRequireDefault(_deprecateObjectProperties);var _InternalPropTypes=__webpack_require__(6);var InternalPropTypes=_interopRequireWildcard(_InternalPropTypes);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var func=_react.PropTypes.func;var object=_react.PropTypes.object;var shape=_react.PropTypes.shape;var string=_react.PropTypes.string;var routerShape=exports.routerShape=shape({push:func.isRequired,replace:func.isRequired,go:func.isRequired,goBack:func.isRequired,goForward:func.isRequired,setRouteLeaveHook:func.isRequired,isActive:func.isRequired});var locationShape=exports.locationShape=shape({pathname:string.isRequired,search:string.isRequired,state:object,action:string.isRequired,key:string});// Deprecated stuff below:
var falsy=exports.falsy=InternalPropTypes.falsy;var history=exports.history=InternalPropTypes.history;var location=exports.location=locationShape;var component=exports.component=InternalPropTypes.component;var components=exports.components=InternalPropTypes.components;var route=exports.route=InternalPropTypes.route;var routes=exports.routes=InternalPropTypes.routes;var router=exports.router=routerShape;if(true){(function(){var deprecatePropType=function deprecatePropType(propType,message){return function(){true?(0,_routerWarning2.default)(false,message):void 0;return propType.apply(undefined,arguments);};};var deprecateInternalPropType=function deprecateInternalPropType(propType){return deprecatePropType(propType,'This prop type is not intended for external use, and was previously exported by mistake. These internal prop types are deprecated for external use, and will be removed in a later version.');};var deprecateRenamedPropType=function deprecateRenamedPropType(propType,name){return deprecatePropType(propType,'The `'+name+'` prop type is now exported as `'+name+'Shape` to avoid name conflicts. This export is deprecated and will be removed in a later version.');};exports.falsy=falsy=deprecateInternalPropType(falsy);exports.history=history=deprecateInternalPropType(history);exports.component=component=deprecateInternalPropType(component);exports.components=components=deprecateInternalPropType(components);exports.route=route=deprecateInternalPropType(route);exports.routes=routes=deprecateInternalPropType(routes);exports.location=location=deprecateRenamedPropType(location,'location');exports.router=router=deprecateRenamedPropType(router,'router');})();}var defaultExport={falsy:falsy,history:history,location:location,component:component,components:components,route:route,// For some reason, routes was never here.
router:router};if(true){defaultExport=(0,_deprecateObjectProperties2.default)(defaultExport,'The default export from `react-router/lib/PropTypes` is deprecated. Please use the named exports instead.');}exports.default=defaultExport;/***/},/* 16 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};exports.default=createTransitionManager;var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);var _Actions=__webpack_require__(9);var _computeChangedRoutes2=__webpack_require__(44);var _computeChangedRoutes3=_interopRequireDefault(_computeChangedRoutes2);var _TransitionUtils=__webpack_require__(41);var _isActive2=__webpack_require__(48);var _isActive3=_interopRequireDefault(_isActive2);var _getComponents=__webpack_require__(45);var _getComponents2=_interopRequireDefault(_getComponents);var _matchRoutes=__webpack_require__(50);var _matchRoutes2=_interopRequireDefault(_matchRoutes);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function hasAnyProperties(object){for(var p in object){if(Object.prototype.hasOwnProperty.call(object,p))return true;}return false;}function createTransitionManager(history,routes){var state={};// Signature should be (location, indexOnly), but needs to support (path,
// query, indexOnly)
function isActive(location){var indexOnlyOrDeprecatedQuery=arguments.length<=1||arguments[1]===undefined?false:arguments[1];var deprecatedIndexOnly=arguments.length<=2||arguments[2]===undefined?null:arguments[2];var indexOnly=void 0;if(indexOnlyOrDeprecatedQuery&&indexOnlyOrDeprecatedQuery!==true||deprecatedIndexOnly!==null){true?(0,_routerWarning2.default)(false,'`isActive(pathname, query, indexOnly) is deprecated; use `isActive(location, indexOnly)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated'):void 0;location={pathname:location,query:indexOnlyOrDeprecatedQuery};indexOnly=deprecatedIndexOnly||false;}else{location=history.createLocation(location);indexOnly=indexOnlyOrDeprecatedQuery;}return(0,_isActive3.default)(location,indexOnly,state.location,state.routes,state.params);}function createLocationFromRedirectInfo(location){return history.createLocation(location,_Actions.REPLACE);}var partialNextState=void 0;function match(location,callback){if(partialNextState&&partialNextState.location===location){// Continue from where we left off.
finishMatch(partialNextState,callback);}else{(0,_matchRoutes2.default)(routes,location,function(error,nextState){if(error){callback(error);}else if(nextState){finishMatch(_extends({},nextState,{location:location}),callback);}else{callback();}});}}function finishMatch(nextState,callback){var _computeChangedRoutes=(0,_computeChangedRoutes3.default)(state,nextState);var leaveRoutes=_computeChangedRoutes.leaveRoutes;var changeRoutes=_computeChangedRoutes.changeRoutes;var enterRoutes=_computeChangedRoutes.enterRoutes;(0,_TransitionUtils.runLeaveHooks)(leaveRoutes,state);// Tear down confirmation hooks for left routes
leaveRoutes.filter(function(route){return enterRoutes.indexOf(route)===-1;}).forEach(removeListenBeforeHooksForRoute);// change and enter hooks are run in series
(0,_TransitionUtils.runChangeHooks)(changeRoutes,state,nextState,function(error,redirectInfo){if(error||redirectInfo)return handleErrorOrRedirect(error,redirectInfo);(0,_TransitionUtils.runEnterHooks)(enterRoutes,nextState,finishEnterHooks);});function finishEnterHooks(error,redirectInfo){if(error||redirectInfo)return handleErrorOrRedirect(error,redirectInfo);// TODO: Fetch components after state is updated.
(0,_getComponents2.default)(nextState,function(error,components){if(error){callback(error);}else{// TODO: Make match a pure function and have some other API
// for "match and update state".
callback(null,null,state=_extends({},nextState,{components:components}));}});}function handleErrorOrRedirect(error,redirectInfo){if(error)callback(error);else callback(null,createLocationFromRedirectInfo(redirectInfo));}}var RouteGuid=1;function getRouteID(route){var create=arguments.length<=1||arguments[1]===undefined?true:arguments[1];return route.__id__||create&&(route.__id__=RouteGuid++);}var RouteHooks=Object.create(null);function getRouteHooksForRoutes(routes){return routes.reduce(function(hooks,route){hooks.push.apply(hooks,RouteHooks[getRouteID(route)]);return hooks;},[]);}function transitionHook(location,callback){(0,_matchRoutes2.default)(routes,location,function(error,nextState){if(nextState==null){// TODO: We didn't actually match anything, but hang
// onto error/nextState so we don't have to matchRoutes
// again in the listen callback.
callback();return;}// Cache some state here so we don't have to
// matchRoutes() again in the listen callback.
partialNextState=_extends({},nextState,{location:location});var hooks=getRouteHooksForRoutes((0,_computeChangedRoutes3.default)(state,partialNextState).leaveRoutes);var result=void 0;for(var i=0,len=hooks.length;result==null&&i<len;++i){// Passing the location arg here indicates to
// the user that this is a transition hook.
result=hooks[i](location);}callback(result);});}/* istanbul ignore next: untestable with Karma */function beforeUnloadHook(){// Synchronously check to see if any route hooks want
// to prevent the current window/tab from closing.
if(state.routes){var hooks=getRouteHooksForRoutes(state.routes);var message=void 0;for(var i=0,len=hooks.length;typeof message!=='string'&&i<len;++i){// Passing no args indicates to the user that this is a
// beforeunload hook. We don't know the next location.
message=hooks[i]();}return message;}}var unlistenBefore=void 0,unlistenBeforeUnload=void 0;function removeListenBeforeHooksForRoute(route){var routeID=getRouteID(route,false);if(!routeID){return;}delete RouteHooks[routeID];if(!hasAnyProperties(RouteHooks)){// teardown transition & beforeunload hooks
if(unlistenBefore){unlistenBefore();unlistenBefore=null;}if(unlistenBeforeUnload){unlistenBeforeUnload();unlistenBeforeUnload=null;}}}/**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and can return either a prompt message (string) to show the user,
	   * to make sure they want to leave the page; or `false`, to prevent the transition.
	   * Any other return value will have no effect.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */function listenBeforeLeavingRoute(route,hook){// TODO: Warn if they register for a route that isn't currently
// active. They're probably doing something wrong, like re-creating
// route objects on every location change.
var routeID=getRouteID(route);var hooks=RouteHooks[routeID];if(!hooks){var thereWereNoRouteHooks=!hasAnyProperties(RouteHooks);RouteHooks[routeID]=[hook];if(thereWereNoRouteHooks){// setup transition & beforeunload hooks
unlistenBefore=history.listenBefore(transitionHook);if(history.listenBeforeUnload)unlistenBeforeUnload=history.listenBeforeUnload(beforeUnloadHook);}}else{if(hooks.indexOf(hook)===-1){true?(0,_routerWarning2.default)(false,'adding multiple leave hooks for the same route is deprecated; manage multiple confirmations in your own code instead'):void 0;hooks.push(hook);}}return function(){var hooks=RouteHooks[routeID];if(hooks){var newHooks=hooks.filter(function(item){return item!==hook;});if(newHooks.length===0){removeListenBeforeHooksForRoute(route);}else{RouteHooks[routeID]=newHooks;}}};}/**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */function listen(listener){// TODO: Only use a single history listener. Otherwise we'll
// end up with multiple concurrent calls to match.
return history.listen(function(location){if(state.location===location){listener(null,state);}else{match(location,function(error,redirectLocation,nextState){if(error){listener(error);}else if(redirectLocation){history.transitionTo(redirectLocation);}else if(nextState){listener(null,nextState);}else{true?(0,_routerWarning2.default)(false,'Location "%s" did not match any routes',location.pathname+location.search+location.hash):void 0;}});}});}return{isActive:isActive,match:match,listenBeforeLeavingRoute:listenBeforeLeavingRoute,listen:listen};}//export default useRoutes
module.exports=exports['default'];/***/},/* 17 *//***/function(module,exports){'use strict';exports.__esModule=true;exports.addEventListener=addEventListener;exports.removeEventListener=removeEventListener;exports.getHashPath=getHashPath;exports.replaceHashPath=replaceHashPath;exports.getWindowPath=getWindowPath;exports.go=go;exports.getUserConfirmation=getUserConfirmation;exports.supportsHistory=supportsHistory;exports.supportsGoWithoutReloadUsingHash=supportsGoWithoutReloadUsingHash;function addEventListener(node,event,listener){if(node.addEventListener){node.addEventListener(event,listener,false);}else{node.attachEvent('on'+event,listener);}}function removeEventListener(node,event,listener){if(node.removeEventListener){node.removeEventListener(event,listener,false);}else{node.detachEvent('on'+event,listener);}}function getHashPath(){// We can't use window.location.hash here because it's not
// consistent across browsers - Firefox will pre-decode it!
return window.location.href.split('#')[1]||'';}function replaceHashPath(path){window.location.replace(window.location.pathname+window.location.search+'#'+path);}function getWindowPath(){return window.location.pathname+window.location.search+window.location.hash;}function go(n){if(n)window.history.go(n);}function getUserConfirmation(message,callback){callback(window.confirm(message));}/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	 */function supportsHistory(){var ua=navigator.userAgent;if((ua.indexOf('Android 2.')!==-1||ua.indexOf('Android 4.0')!==-1)&&ua.indexOf('Mobile Safari')!==-1&&ua.indexOf('Chrome')===-1&&ua.indexOf('Windows Phone')===-1){return false;}return window.history&&'pushState'in window.history;}/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */function supportsGoWithoutReloadUsingHash(){var ua=navigator.userAgent;return ua.indexOf('Firefox')===-1;}/***/},/* 18 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _warning=__webpack_require__(4);var _warning2=_interopRequireDefault(_warning);function deprecate(fn,message){return function(){true?_warning2['default'](false,'[history] '+message):undefined;return fn.apply(this,arguments);};}exports['default']=deprecate;module.exports=exports['default'];/***/},/* 19 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _warning=__webpack_require__(4);var _warning2=_interopRequireDefault(_warning);function runTransitionHook(hook,location,callback){var result=hook(location,callback);if(hook.length<2){// Assume the hook runs synchronously and automatically
// call the callback with the return value.
callback(result);}else{true?_warning2['default'](result===undefined,'You should not "return" in a transition hook with a callback argument; call the callback instead'):undefined;}}exports['default']=runTransitionHook;module.exports=exports['default'];/***/},/* 20 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _PropTypes=__webpack_require__(15);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}var _React$PropTypes=_react2.default.PropTypes;var bool=_React$PropTypes.bool;var object=_React$PropTypes.object;var string=_React$PropTypes.string;var func=_React$PropTypes.func;var oneOfType=_React$PropTypes.oneOfType;function isLeftClickEvent(event){return event.button===0;}function isModifiedEvent(event){return!!(event.metaKey||event.altKey||event.ctrlKey||event.shiftKey);}// TODO: De-duplicate against hasAnyProperties in createTransitionManager.
function isEmptyObject(object){for(var p in object){if(Object.prototype.hasOwnProperty.call(object,p))return false;}return true;}function createLocationDescriptor(to,_ref){var query=_ref.query;var hash=_ref.hash;var state=_ref.state;if(query||hash||state){return{pathname:to,query:query,hash:hash,state:state};}return to;}/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */var Link=_react2.default.createClass({displayName:'Link',contextTypes:{router:_PropTypes.routerShape},propTypes:{to:oneOfType([string,object]).isRequired,query:object,hash:string,state:object,activeStyle:object,activeClassName:string,onlyActiveOnIndex:bool.isRequired,onClick:func,target:string},getDefaultProps:function getDefaultProps(){return{onlyActiveOnIndex:false,style:{}};},handleClick:function handleClick(event){if(this.props.onClick)this.props.onClick(event);if(event.defaultPrevented)return;!this.context.router?true?(0,_invariant2.default)(false,'<Link>s rendered outside of a router context cannot navigate.'):(0,_invariant2.default)(false):void 0;if(isModifiedEvent(event)||!isLeftClickEvent(event))return;// If target prop is set (e.g. to "_blank"), let browser handle link.
/* istanbul ignore if: untestable with Karma */if(this.props.target)return;event.preventDefault();var _props=this.props;var to=_props.to;var query=_props.query;var hash=_props.hash;var state=_props.state;var location=createLocationDescriptor(to,{query:query,hash:hash,state:state});this.context.router.push(location);},render:function render(){var _props2=this.props;var to=_props2.to;var query=_props2.query;var hash=_props2.hash;var state=_props2.state;var activeClassName=_props2.activeClassName;var activeStyle=_props2.activeStyle;var onlyActiveOnIndex=_props2.onlyActiveOnIndex;var props=_objectWithoutProperties(_props2,['to','query','hash','state','activeClassName','activeStyle','onlyActiveOnIndex']);true?(0,_routerWarning2.default)(!(query||hash||state),'the `query`, `hash`, and `state` props on `<Link>` are deprecated, use `<Link to={{ pathname, query, hash, state }}/>. http://tiny.cc/router-isActivedeprecated'):void 0;// Ignore if rendered outside the context of router, simplifies unit testing.
var router=this.context.router;if(router){var location=createLocationDescriptor(to,{query:query,hash:hash,state:state});props.href=router.createHref(location);if(activeClassName||activeStyle!=null&&!isEmptyObject(activeStyle)){if(router.isActive(location,onlyActiveOnIndex)){if(activeClassName){if(props.className){props.className+=' '+activeClassName;}else{props.className=activeClassName;}}if(activeStyle)props.style=_extends({},props.style,activeStyle);}}}return _react2.default.createElement('a',_extends({},props,{onClick:this.handleClick}));}});exports.default=Link;module.exports=exports['default'];/***/},/* 21 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _RouteUtils=__webpack_require__(5);var _PatternUtils=__webpack_require__(8);var _InternalPropTypes=__webpack_require__(6);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var _React$PropTypes=_react2.default.PropTypes;var string=_React$PropTypes.string;var object=_React$PropTypes.object;/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */var Redirect=_react2.default.createClass({displayName:'Redirect',statics:{createRouteFromReactElement:function createRouteFromReactElement(element){var route=(0,_RouteUtils.createRouteFromReactElement)(element);if(route.from)route.path=route.from;route.onEnter=function(nextState,replace){var location=nextState.location;var params=nextState.params;var pathname=void 0;if(route.to.charAt(0)==='/'){pathname=(0,_PatternUtils.formatPattern)(route.to,params);}else if(!route.to){pathname=location.pathname;}else{var routeIndex=nextState.routes.indexOf(route);var parentPattern=Redirect.getRoutePattern(nextState.routes,routeIndex-1);var pattern=parentPattern.replace(/\/*$/,'/')+route.to;pathname=(0,_PatternUtils.formatPattern)(pattern,params);}replace({pathname:pathname,query:route.query||location.query,state:route.state||location.state});};return route;},getRoutePattern:function getRoutePattern(routes,routeIndex){var parentPattern='';for(var i=routeIndex;i>=0;i--){var route=routes[i];var pattern=route.path||'';parentPattern=pattern.replace(/\/*$/,'/')+parentPattern;if(pattern.indexOf('/')===0)break;}return'/'+parentPattern;}},propTypes:{path:string,from:string,// Alias for path
to:string.isRequired,query:object,state:object,onEnter:_InternalPropTypes.falsy,children:_InternalPropTypes.falsy},/* istanbul ignore next: sanity check */render:function render(){true?true?(0,_invariant2.default)(false,'<Redirect> elements are for router configuration only and should not be rendered'):(0,_invariant2.default)(false):void 0;}});exports.default=Redirect;module.exports=exports['default'];/***/},/* 22 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};exports.createRouterObject=createRouterObject;exports.createRoutingHistory=createRoutingHistory;var _deprecateObjectProperties=__webpack_require__(11);var _deprecateObjectProperties2=_interopRequireDefault(_deprecateObjectProperties);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function createRouterObject(history,transitionManager){return _extends({},history,{setRouteLeaveHook:transitionManager.listenBeforeLeavingRoute,isActive:transitionManager.isActive});}// deprecated
function createRoutingHistory(history,transitionManager){history=_extends({},history,transitionManager);if(true){history=(0,_deprecateObjectProperties2.default)(history,'`props.history` and `context.history` are deprecated. Please use `context.router`. http://tiny.cc/router-contextchanges');}return history;}/***/},/* 23 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.default=createMemoryHistory;var _useQueries=__webpack_require__(13);var _useQueries2=_interopRequireDefault(_useQueries);var _useBasename=__webpack_require__(31);var _useBasename2=_interopRequireDefault(_useBasename);var _createMemoryHistory=__webpack_require__(59);var _createMemoryHistory2=_interopRequireDefault(_createMemoryHistory);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function createMemoryHistory(options){// signatures and type checking differ between `useRoutes` and
// `createMemoryHistory`, have to create `memoryHistory` first because
// `useQueries` doesn't understand the signature
var memoryHistory=(0,_createMemoryHistory2.default)(options);var createHistory=function createHistory(){return memoryHistory;};var history=(0,_useQueries2.default)((0,_useBasename2.default)(createHistory))(options);history.__v2_compatible__=true;return history;}module.exports=exports['default'];/***/},/* 24 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.default=function(createHistory){var history=void 0;if(canUseDOM)history=(0,_useRouterHistory2.default)(createHistory)();return history;};var _useRouterHistory=__webpack_require__(26);var _useRouterHistory2=_interopRequireDefault(_useRouterHistory);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var canUseDOM=!!(typeof window!=='undefined'&&window.document&&window.document.createElement);module.exports=exports['default'];/***/},/* 25 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};exports.default=makeStateWithLocation;var _deprecateObjectProperties=__webpack_require__(11);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function makeStateWithLocation(state,location){if("development"!=='production'&&_deprecateObjectProperties.canUseMembrane){var stateWithLocation=_extends({},state);// I don't use deprecateObjectProperties here because I want to keep the
// same code path between development and production, in that we just
// assign extra properties to the copy of the state object in both cases.
var _loop=function _loop(prop){if(!Object.prototype.hasOwnProperty.call(location,prop)){return'continue';}Object.defineProperty(stateWithLocation,prop,{get:function get(){true?(0,_routerWarning2.default)(false,'Accessing location properties directly from the first argument to `getComponent`, `getComponents`, `getChildRoutes`, and `getIndexRoute` is deprecated. That argument is now the router state (`nextState` or `partialNextState`) rather than the location. To access the location, use `nextState.location` or `partialNextState.location`.'):void 0;return location[prop];}});};for(var prop in location){var _ret=_loop(prop);if(_ret==='continue')continue;}return stateWithLocation;}return _extends({},state,location);}module.exports=exports['default'];/***/},/* 26 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.default=useRouterHistory;var _useQueries=__webpack_require__(13);var _useQueries2=_interopRequireDefault(_useQueries);var _useBasename=__webpack_require__(31);var _useBasename2=_interopRequireDefault(_useBasename);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function useRouterHistory(createHistory){return function(options){var history=(0,_useQueries2.default)((0,_useBasename2.default)(createHistory))(options);history.__v2_compatible__=true;return history;};}module.exports=exports['default'];/***/},/* 27 *//***/function(module,exports,__webpack_require__){/*eslint-disable no-empty */'use strict';exports.__esModule=true;exports.saveState=saveState;exports.readState=readState;function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _warning=__webpack_require__(4);var _warning2=_interopRequireDefault(_warning);var KeyPrefix='@@History/';var QuotaExceededErrors=['QuotaExceededError','QUOTA_EXCEEDED_ERR'];var SecurityError='SecurityError';function createKey(key){return KeyPrefix+key;}function saveState(key,state){try{if(state==null){window.sessionStorage.removeItem(createKey(key));}else{window.sessionStorage.setItem(createKey(key),JSON.stringify(state));}}catch(error){if(error.name===SecurityError){// Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
// attempt to access window.sessionStorage.
true?_warning2['default'](false,'[history] Unable to save state; sessionStorage is not available due to security settings'):undefined;return;}if(QuotaExceededErrors.indexOf(error.name)>=0&&window.sessionStorage.length===0){// Safari "private mode" throws QuotaExceededError.
true?_warning2['default'](false,'[history] Unable to save state; sessionStorage is not available in Safari private mode'):undefined;return;}throw error;}}function readState(key){var json=undefined;try{json=window.sessionStorage.getItem(createKey(key));}catch(error){if(error.name===SecurityError){// Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
// attempt to access window.sessionStorage.
true?_warning2['default'](false,'[history] Unable to read state; sessionStorage is not available due to security settings'):undefined;return null;}}if(json){try{return JSON.parse(json);}catch(error){// Ignore invalid JSON.
}}return null;}/***/},/* 28 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _ExecutionEnvironment=__webpack_require__(12);var _DOMUtils=__webpack_require__(17);var _createHistory=__webpack_require__(30);var _createHistory2=_interopRequireDefault(_createHistory);function createDOMHistory(options){var history=_createHistory2['default'](_extends({getUserConfirmation:_DOMUtils.getUserConfirmation},options,{go:_DOMUtils.go}));function listen(listener){!_ExecutionEnvironment.canUseDOM?true?_invariant2['default'](false,'DOM history needs a DOM'):_invariant2['default'](false):undefined;return history.listen(listener);}return _extends({},history,{listen:listen});}exports['default']=createDOMHistory;module.exports=exports['default'];/***/},/* 29 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _warning=__webpack_require__(4);var _warning2=_interopRequireDefault(_warning);var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _Actions=__webpack_require__(9);var _PathUtils=__webpack_require__(7);var _ExecutionEnvironment=__webpack_require__(12);var _DOMUtils=__webpack_require__(17);var _DOMStateStorage=__webpack_require__(27);var _createDOMHistory=__webpack_require__(28);var _createDOMHistory2=_interopRequireDefault(_createDOMHistory);function isAbsolutePath(path){return typeof path==='string'&&path.charAt(0)==='/';}function ensureSlash(){var path=_DOMUtils.getHashPath();if(isAbsolutePath(path))return true;_DOMUtils.replaceHashPath('/'+path);return false;}function addQueryStringValueToPath(path,key,value){return path+(path.indexOf('?')===-1?'?':'&')+(key+'='+value);}function stripQueryStringValueFromPath(path,key){return path.replace(new RegExp('[?&]?'+key+'=[a-zA-Z0-9]+'),'');}function getQueryStringValueFromPath(path,key){var match=path.match(new RegExp('\\?.*?\\b'+key+'=(.+?)\\b'));return match&&match[1];}var DefaultQueryKey='_k';function createHashHistory(){var options=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];!_ExecutionEnvironment.canUseDOM?true?_invariant2['default'](false,'Hash history needs a DOM'):_invariant2['default'](false):undefined;var queryKey=options.queryKey;if(queryKey===undefined||!!queryKey)queryKey=typeof queryKey==='string'?queryKey:DefaultQueryKey;function getCurrentLocation(){var path=_DOMUtils.getHashPath();var key=undefined,state=undefined;if(queryKey){key=getQueryStringValueFromPath(path,queryKey);path=stripQueryStringValueFromPath(path,queryKey);if(key){state=_DOMStateStorage.readState(key);}else{state=null;key=history.createKey();_DOMUtils.replaceHashPath(addQueryStringValueToPath(path,queryKey,key));}}else{key=state=null;}var location=_PathUtils.parsePath(path);return history.createLocation(_extends({},location,{state:state}),undefined,key);}function startHashChangeListener(_ref){var transitionTo=_ref.transitionTo;function hashChangeListener(){if(!ensureSlash())return;// Always make sure hashes are preceeded with a /.
transitionTo(getCurrentLocation());}ensureSlash();_DOMUtils.addEventListener(window,'hashchange',hashChangeListener);return function(){_DOMUtils.removeEventListener(window,'hashchange',hashChangeListener);};}function finishTransition(location){var basename=location.basename;var pathname=location.pathname;var search=location.search;var state=location.state;var action=location.action;var key=location.key;if(action===_Actions.POP)return;// Nothing to do.
var path=(basename||'')+pathname+search;if(queryKey){path=addQueryStringValueToPath(path,queryKey,key);_DOMStateStorage.saveState(key,state);}else{// Drop key and state.
location.key=location.state=null;}var currentHash=_DOMUtils.getHashPath();if(action===_Actions.PUSH){if(currentHash!==path){window.location.hash=path;}else{true?_warning2['default'](false,'You cannot PUSH the same path using hash history'):undefined;}}else if(currentHash!==path){// REPLACE
_DOMUtils.replaceHashPath(path);}}var history=_createDOMHistory2['default'](_extends({},options,{getCurrentLocation:getCurrentLocation,finishTransition:finishTransition,saveState:_DOMStateStorage.saveState}));var listenerCount=0,stopHashChangeListener=undefined;function listenBefore(listener){if(++listenerCount===1)stopHashChangeListener=startHashChangeListener(history);var unlisten=history.listenBefore(listener);return function(){unlisten();if(--listenerCount===0)stopHashChangeListener();};}function listen(listener){if(++listenerCount===1)stopHashChangeListener=startHashChangeListener(history);var unlisten=history.listen(listener);return function(){unlisten();if(--listenerCount===0)stopHashChangeListener();};}function push(location){true?_warning2['default'](queryKey||location.state==null,'You cannot use state without a queryKey it will be dropped'):undefined;history.push(location);}function replace(location){true?_warning2['default'](queryKey||location.state==null,'You cannot use state without a queryKey it will be dropped'):undefined;history.replace(location);}var goIsSupportedWithoutReload=_DOMUtils.supportsGoWithoutReloadUsingHash();function go(n){true?_warning2['default'](goIsSupportedWithoutReload,'Hash history go(n) causes a full page reload in this browser'):undefined;history.go(n);}function createHref(path){return'#'+history.createHref(path);}// deprecated
function registerTransitionHook(hook){if(++listenerCount===1)stopHashChangeListener=startHashChangeListener(history);history.registerTransitionHook(hook);}// deprecated
function unregisterTransitionHook(hook){history.unregisterTransitionHook(hook);if(--listenerCount===0)stopHashChangeListener();}// deprecated
function pushState(state,path){true?_warning2['default'](queryKey||state==null,'You cannot use state without a queryKey it will be dropped'):undefined;history.pushState(state,path);}// deprecated
function replaceState(state,path){true?_warning2['default'](queryKey||state==null,'You cannot use state without a queryKey it will be dropped'):undefined;history.replaceState(state,path);}return _extends({},history,{listenBefore:listenBefore,listen:listen,push:push,replace:replace,go:go,createHref:createHref,registerTransitionHook:registerTransitionHook,// deprecated - warning is in createHistory
unregisterTransitionHook:unregisterTransitionHook,// deprecated - warning is in createHistory
pushState:pushState,// deprecated - warning is in createHistory
replaceState:replaceState// deprecated - warning is in createHistory
});}exports['default']=createHashHistory;module.exports=exports['default'];/***/},/* 30 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _warning=__webpack_require__(4);var _warning2=_interopRequireDefault(_warning);var _deepEqual=__webpack_require__(53);var _deepEqual2=_interopRequireDefault(_deepEqual);var _PathUtils=__webpack_require__(7);var _AsyncUtils=__webpack_require__(56);var _Actions=__webpack_require__(9);var _createLocation2=__webpack_require__(58);var _createLocation3=_interopRequireDefault(_createLocation2);var _runTransitionHook=__webpack_require__(19);var _runTransitionHook2=_interopRequireDefault(_runTransitionHook);var _deprecate=__webpack_require__(18);var _deprecate2=_interopRequireDefault(_deprecate);function createRandomKey(length){return Math.random().toString(36).substr(2,length);}function locationsAreEqual(a,b){return a.pathname===b.pathname&&a.search===b.search&&//a.action === b.action && // Different action !== location change.
a.key===b.key&&_deepEqual2['default'](a.state,b.state);}var DefaultKeyLength=6;function createHistory(){var options=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];var getCurrentLocation=options.getCurrentLocation;var finishTransition=options.finishTransition;var saveState=options.saveState;var go=options.go;var getUserConfirmation=options.getUserConfirmation;var keyLength=options.keyLength;if(typeof keyLength!=='number')keyLength=DefaultKeyLength;var transitionHooks=[];function listenBefore(hook){transitionHooks.push(hook);return function(){transitionHooks=transitionHooks.filter(function(item){return item!==hook;});};}var allKeys=[];var changeListeners=[];var location=undefined;function getCurrent(){if(pendingLocation&&pendingLocation.action===_Actions.POP){return allKeys.indexOf(pendingLocation.key);}else if(location){return allKeys.indexOf(location.key);}else{return-1;}}function updateLocation(newLocation){var current=getCurrent();location=newLocation;if(location.action===_Actions.PUSH){allKeys=[].concat(allKeys.slice(0,current+1),[location.key]);}else if(location.action===_Actions.REPLACE){allKeys[current]=location.key;}changeListeners.forEach(function(listener){listener(location);});}function listen(listener){changeListeners.push(listener);if(location){listener(location);}else{var _location=getCurrentLocation();allKeys=[_location.key];updateLocation(_location);}return function(){changeListeners=changeListeners.filter(function(item){return item!==listener;});};}function confirmTransitionTo(location,callback){_AsyncUtils.loopAsync(transitionHooks.length,function(index,next,done){_runTransitionHook2['default'](transitionHooks[index],location,function(result){if(result!=null){done(result);}else{next();}});},function(message){if(getUserConfirmation&&typeof message==='string'){getUserConfirmation(message,function(ok){callback(ok!==false);});}else{callback(message!==false);}});}var pendingLocation=undefined;function transitionTo(nextLocation){if(location&&locationsAreEqual(location,nextLocation))return;// Nothing to do.
pendingLocation=nextLocation;confirmTransitionTo(nextLocation,function(ok){if(pendingLocation!==nextLocation)return;// Transition was interrupted.
if(ok){// treat PUSH to current path like REPLACE to be consistent with browsers
if(nextLocation.action===_Actions.PUSH){var prevPath=createPath(location);var nextPath=createPath(nextLocation);if(nextPath===prevPath&&_deepEqual2['default'](location.state,nextLocation.state))nextLocation.action=_Actions.REPLACE;}if(finishTransition(nextLocation)!==false)updateLocation(nextLocation);}else if(location&&nextLocation.action===_Actions.POP){var prevIndex=allKeys.indexOf(location.key);var nextIndex=allKeys.indexOf(nextLocation.key);if(prevIndex!==-1&&nextIndex!==-1)go(prevIndex-nextIndex);// Restore the URL.
}});}function push(location){transitionTo(createLocation(location,_Actions.PUSH,createKey()));}function replace(location){transitionTo(createLocation(location,_Actions.REPLACE,createKey()));}function goBack(){go(-1);}function goForward(){go(1);}function createKey(){return createRandomKey(keyLength);}function createPath(location){if(location==null||typeof location==='string')return location;var pathname=location.pathname;var search=location.search;var hash=location.hash;var result=pathname;if(search)result+=search;if(hash)result+=hash;return result;}function createHref(location){return createPath(location);}function createLocation(location,action){var key=arguments.length<=2||arguments[2]===undefined?createKey():arguments[2];if((typeof action==='undefined'?'undefined':_typeof2(action))==='object'){true?_warning2['default'](false,'The state (2nd) argument to history.createLocation is deprecated; use a '+'location descriptor instead'):undefined;if(typeof location==='string')location=_PathUtils.parsePath(location);location=_extends({},location,{state:action});action=key;key=arguments[3]||createKey();}return _createLocation3['default'](location,action,key);}// deprecated
function setState(state){if(location){updateLocationState(location,state);updateLocation(location);}else{updateLocationState(getCurrentLocation(),state);}}function updateLocationState(location,state){location.state=_extends({},location.state,state);saveState(location.key,location.state);}// deprecated
function registerTransitionHook(hook){if(transitionHooks.indexOf(hook)===-1)transitionHooks.push(hook);}// deprecated
function unregisterTransitionHook(hook){transitionHooks=transitionHooks.filter(function(item){return item!==hook;});}// deprecated
function pushState(state,path){if(typeof path==='string')path=_PathUtils.parsePath(path);push(_extends({state:state},path));}// deprecated
function replaceState(state,path){if(typeof path==='string')path=_PathUtils.parsePath(path);replace(_extends({state:state},path));}return{listenBefore:listenBefore,listen:listen,transitionTo:transitionTo,push:push,replace:replace,go:go,goBack:goBack,goForward:goForward,createKey:createKey,createPath:createPath,createHref:createHref,createLocation:createLocation,setState:_deprecate2['default'](setState,'setState is deprecated; use location.key to save state instead'),registerTransitionHook:_deprecate2['default'](registerTransitionHook,'registerTransitionHook is deprecated; use listenBefore instead'),unregisterTransitionHook:_deprecate2['default'](unregisterTransitionHook,'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),pushState:_deprecate2['default'](pushState,'pushState is deprecated; use push instead'),replaceState:_deprecate2['default'](replaceState,'replaceState is deprecated; use replace instead')};}exports['default']=createHistory;module.exports=exports['default'];/***/},/* 31 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _warning=__webpack_require__(4);var _warning2=_interopRequireDefault(_warning);var _ExecutionEnvironment=__webpack_require__(12);var _PathUtils=__webpack_require__(7);var _runTransitionHook=__webpack_require__(19);var _runTransitionHook2=_interopRequireDefault(_runTransitionHook);var _deprecate=__webpack_require__(18);var _deprecate2=_interopRequireDefault(_deprecate);function useBasename(createHistory){return function(){var options=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];var history=createHistory(options);var basename=options.basename;var checkedBaseHref=false;function checkBaseHref(){if(checkedBaseHref){return;}// Automatically use the value of <base href> in HTML
// documents as basename if it's not explicitly given.
if(basename==null&&_ExecutionEnvironment.canUseDOM){var base=document.getElementsByTagName('base')[0];var baseHref=base&&base.getAttribute('href');if(baseHref!=null){basename=baseHref;true?_warning2['default'](false,'Automatically setting basename using <base href> is deprecated and will '+'be removed in the next major release. The semantics of <base href> are '+'subtly different from basename. Please pass the basename explicitly in '+'the options to createHistory'):undefined;}}checkedBaseHref=true;}function addBasename(location){checkBaseHref();if(basename&&location.basename==null){if(location.pathname.indexOf(basename)===0){location.pathname=location.pathname.substring(basename.length);location.basename=basename;if(location.pathname==='')location.pathname='/';}else{location.basename='';}}return location;}function prependBasename(location){checkBaseHref();if(!basename)return location;if(typeof location==='string')location=_PathUtils.parsePath(location);var pname=location.pathname;var normalizedBasename=basename.slice(-1)==='/'?basename:basename+'/';var normalizedPathname=pname.charAt(0)==='/'?pname.slice(1):pname;var pathname=normalizedBasename+normalizedPathname;return _extends({},location,{pathname:pathname});}// Override all read methods with basename-aware versions.
function listenBefore(hook){return history.listenBefore(function(location,callback){_runTransitionHook2['default'](hook,addBasename(location),callback);});}function listen(listener){return history.listen(function(location){listener(addBasename(location));});}// Override all write methods with basename-aware versions.
function push(location){history.push(prependBasename(location));}function replace(location){history.replace(prependBasename(location));}function createPath(location){return history.createPath(prependBasename(location));}function createHref(location){return history.createHref(prependBasename(location));}function createLocation(location){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}return addBasename(history.createLocation.apply(history,[prependBasename(location)].concat(args)));}// deprecated
function pushState(state,path){if(typeof path==='string')path=_PathUtils.parsePath(path);push(_extends({state:state},path));}// deprecated
function replaceState(state,path){if(typeof path==='string')path=_PathUtils.parsePath(path);replace(_extends({state:state},path));}return _extends({},history,{listenBefore:listenBefore,listen:listen,push:push,replace:replace,createPath:createPath,createHref:createHref,createLocation:createLocation,pushState:_deprecate2['default'](pushState,'pushState is deprecated; use push instead'),replaceState:_deprecate2['default'](replaceState,'replaceState is deprecated; use replace instead')});};}exports['default']=useBasename;module.exports=exports['default'];/***/},/* 32 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);var _InternalPropTypes=__webpack_require__(6);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
	 * A mixin that adds the "history" instance variable to components.
	 */var History={contextTypes:{history:_InternalPropTypes.history},componentWillMount:function componentWillMount(){true?(0,_routerWarning2.default)(false,'the `History` mixin is deprecated, please access `context.router` with your own `contextTypes`. http://tiny.cc/router-historymixin'):void 0;this.history=this.context.history;}};exports.default=History;module.exports=exports['default'];/***/},/* 33 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _Link=__webpack_require__(20);var _Link2=_interopRequireDefault(_Link);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */var IndexLink=_react2.default.createClass({displayName:'IndexLink',render:function render(){return _react2.default.createElement(_Link2.default,_extends({},this.props,{onlyActiveOnIndex:true}));}});exports.default=IndexLink;module.exports=exports['default'];/***/},/* 34 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _Redirect=__webpack_require__(21);var _Redirect2=_interopRequireDefault(_Redirect);var _InternalPropTypes=__webpack_require__(6);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var _React$PropTypes=_react2.default.PropTypes;var string=_React$PropTypes.string;var object=_React$PropTypes.object;/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */var IndexRedirect=_react2.default.createClass({displayName:'IndexRedirect',statics:{createRouteFromReactElement:function createRouteFromReactElement(element,parentRoute){/* istanbul ignore else: sanity check */if(parentRoute){parentRoute.indexRoute=_Redirect2.default.createRouteFromReactElement(element);}else{true?(0,_routerWarning2.default)(false,'An <IndexRedirect> does not make sense at the root of your route config'):void 0;}}},propTypes:{to:string.isRequired,query:object,state:object,onEnter:_InternalPropTypes.falsy,children:_InternalPropTypes.falsy},/* istanbul ignore next: sanity check */render:function render(){true?true?(0,_invariant2.default)(false,'<IndexRedirect> elements are for router configuration only and should not be rendered'):(0,_invariant2.default)(false):void 0;}});exports.default=IndexRedirect;module.exports=exports['default'];/***/},/* 35 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _RouteUtils=__webpack_require__(5);var _InternalPropTypes=__webpack_require__(6);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var func=_react2.default.PropTypes.func;/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */var IndexRoute=_react2.default.createClass({displayName:'IndexRoute',statics:{createRouteFromReactElement:function createRouteFromReactElement(element,parentRoute){/* istanbul ignore else: sanity check */if(parentRoute){parentRoute.indexRoute=(0,_RouteUtils.createRouteFromReactElement)(element);}else{true?(0,_routerWarning2.default)(false,'An <IndexRoute> does not make sense at the root of your route config'):void 0;}}},propTypes:{path:_InternalPropTypes.falsy,component:_InternalPropTypes.component,components:_InternalPropTypes.components,getComponent:func,getComponents:func},/* istanbul ignore next: sanity check */render:function render(){true?true?(0,_invariant2.default)(false,'<IndexRoute> elements are for router configuration only and should not be rendered'):(0,_invariant2.default)(false):void 0;}});exports.default=IndexRoute;module.exports=exports['default'];/***/},/* 36 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var object=_react2.default.PropTypes.object;/**
	 * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
	 * component that may be used to cancel a transition or prompt the user
	 * for confirmation.
	 *
	 * On standard transitions, routerWillLeave receives a single argument: the
	 * location we're transitioning to. To cancel the transition, return false.
	 * To prompt the user for confirmation, return a prompt message (string).
	 *
	 * During the beforeunload event (assuming you're using the useBeforeUnload
	 * history enhancer), routerWillLeave does not receive a location object
	 * because it isn't possible for us to know the location we're transitioning
	 * to. In this case routerWillLeave must return a prompt message to prevent
	 * the user from closing the window/tab.
	 */var Lifecycle={contextTypes:{history:object.isRequired,// Nested children receive the route as context, either
// set by the route component using the RouteContext mixin
// or by some other ancestor.
route:object},propTypes:{// Route components receive the route object as a prop.
route:object},componentDidMount:function componentDidMount(){true?(0,_routerWarning2.default)(false,'the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin'):void 0;!this.routerWillLeave?true?(0,_invariant2.default)(false,'The Lifecycle mixin requires you to define a routerWillLeave method'):(0,_invariant2.default)(false):void 0;var route=this.props.route||this.context.route;!route?true?(0,_invariant2.default)(false,'The Lifecycle mixin must be used on either a) a <Route component> or '+'b) a descendant of a <Route component> that uses the RouteContext mixin'):(0,_invariant2.default)(false):void 0;this._unlistenBeforeLeavingRoute=this.context.history.listenBeforeLeavingRoute(route,this.routerWillLeave);},componentWillUnmount:function componentWillUnmount(){if(this._unlistenBeforeLeavingRoute)this._unlistenBeforeLeavingRoute();}};exports.default=Lifecycle;module.exports=exports['default'];/***/},/* 37 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _RouteUtils=__webpack_require__(5);var _InternalPropTypes=__webpack_require__(6);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var _React$PropTypes=_react2.default.PropTypes;var string=_React$PropTypes.string;var func=_React$PropTypes.func;/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */var Route=_react2.default.createClass({displayName:'Route',statics:{createRouteFromReactElement:_RouteUtils.createRouteFromReactElement},propTypes:{path:string,component:_InternalPropTypes.component,components:_InternalPropTypes.components,getComponent:func,getComponents:func},/* istanbul ignore next: sanity check */render:function render(){true?true?(0,_invariant2.default)(false,'<Route> elements are for router configuration only and should not be rendered'):(0,_invariant2.default)(false):void 0;}});exports.default=Route;module.exports=exports['default'];/***/},/* 38 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var object=_react2.default.PropTypes.object;/**
	 * The RouteContext mixin provides a convenient way for route
	 * components to set the route in context. This is needed for
	 * routes that render elements that want to use the Lifecycle
	 * mixin to prevent transitions.
	 */var RouteContext={propTypes:{route:object.isRequired},childContextTypes:{route:object.isRequired},getChildContext:function getChildContext(){return{route:this.props.route};},componentWillMount:function componentWillMount(){true?(0,_routerWarning2.default)(false,'The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin'):void 0;}};exports.default=RouteContext;module.exports=exports['default'];/***/},/* 39 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createHashHistory=__webpack_require__(29);var _createHashHistory2=_interopRequireDefault(_createHashHistory);var _useQueries=__webpack_require__(13);var _useQueries2=_interopRequireDefault(_useQueries);var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _createTransitionManager=__webpack_require__(16);var _createTransitionManager2=_interopRequireDefault(_createTransitionManager);var _InternalPropTypes=__webpack_require__(6);var _RouterContext=__webpack_require__(10);var _RouterContext2=_interopRequireDefault(_RouterContext);var _RouteUtils=__webpack_require__(5);var _RouterUtils=__webpack_require__(22);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}function isDeprecatedHistory(history){return!history||!history.__v2_compatible__;}/* istanbul ignore next: sanity check */function isUnsupportedHistory(history){// v3 histories expose getCurrentLocation, but aren't currently supported.
return history&&history.getCurrentLocation;}var _React$PropTypes=_react2.default.PropTypes;var func=_React$PropTypes.func;var object=_React$PropTypes.object;/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */var Router=_react2.default.createClass({displayName:'Router',propTypes:{history:object,children:_InternalPropTypes.routes,routes:_InternalPropTypes.routes,// alias for children
render:func,createElement:func,onError:func,onUpdate:func,// Deprecated:
parseQueryString:func,stringifyQuery:func,// PRIVATE: For client-side rehydration of server match.
matchContext:object},getDefaultProps:function getDefaultProps(){return{render:function render(props){return _react2.default.createElement(_RouterContext2.default,props);}};},getInitialState:function getInitialState(){return{location:null,routes:null,params:null,components:null};},handleError:function handleError(error){if(this.props.onError){this.props.onError.call(this,error);}else{// Throw errors by default so we don't silently swallow them!
throw error;// This error probably occurred in getChildRoutes or getComponents.
}},componentWillMount:function componentWillMount(){var _this=this;var _props=this.props;var parseQueryString=_props.parseQueryString;var stringifyQuery=_props.stringifyQuery;true?(0,_routerWarning2.default)(!(parseQueryString||stringifyQuery),'`parseQueryString` and `stringifyQuery` are deprecated. Please create a custom history. http://tiny.cc/router-customquerystring'):void 0;var _createRouterObjects=this.createRouterObjects();var history=_createRouterObjects.history;var transitionManager=_createRouterObjects.transitionManager;var router=_createRouterObjects.router;this._unlisten=transitionManager.listen(function(error,state){if(error){_this.handleError(error);}else{_this.setState(state,_this.props.onUpdate);}});this.history=history;this.router=router;},createRouterObjects:function createRouterObjects(){var matchContext=this.props.matchContext;if(matchContext){return matchContext;}var history=this.props.history;var _props2=this.props;var routes=_props2.routes;var children=_props2.children;!!isUnsupportedHistory(history)?true?(0,_invariant2.default)(false,'You have provided a history object created with history v3.x. '+'This version of React Router is not compatible with v3 history '+'objects. Please use history v2.x instead.'):(0,_invariant2.default)(false):void 0;if(isDeprecatedHistory(history)){history=this.wrapDeprecatedHistory(history);}var transitionManager=(0,_createTransitionManager2.default)(history,(0,_RouteUtils.createRoutes)(routes||children));var router=(0,_RouterUtils.createRouterObject)(history,transitionManager);var routingHistory=(0,_RouterUtils.createRoutingHistory)(history,transitionManager);return{history:routingHistory,transitionManager:transitionManager,router:router};},wrapDeprecatedHistory:function wrapDeprecatedHistory(history){var _props3=this.props;var parseQueryString=_props3.parseQueryString;var stringifyQuery=_props3.stringifyQuery;var createHistory=void 0;if(history){true?(0,_routerWarning2.default)(false,'It appears you have provided a deprecated history object to `<Router/>`, please use a history provided by '+'React Router with `import { browserHistory } from \'react-router\'` or `import { hashHistory } from \'react-router\'`. '+'If you are using a custom history please create it with `useRouterHistory`, see http://tiny.cc/router-usinghistory for details.'):void 0;createHistory=function createHistory(){return history;};}else{true?(0,_routerWarning2.default)(false,'`Router` no longer defaults the history prop to hash history. Please use the `hashHistory` singleton instead. http://tiny.cc/router-defaulthistory'):void 0;createHistory=_createHashHistory2.default;}return(0,_useQueries2.default)(createHistory)({parseQueryString:parseQueryString,stringifyQuery:stringifyQuery});},/* istanbul ignore next: sanity check */componentWillReceiveProps:function componentWillReceiveProps(nextProps){true?(0,_routerWarning2.default)(nextProps.history===this.props.history,'You cannot change <Router history>; it will be ignored'):void 0;true?(0,_routerWarning2.default)((nextProps.routes||nextProps.children)===(this.props.routes||this.props.children),'You cannot change <Router routes>; it will be ignored'):void 0;},componentWillUnmount:function componentWillUnmount(){if(this._unlisten)this._unlisten();},render:function render(){var _state=this.state;var location=_state.location;var routes=_state.routes;var params=_state.params;var components=_state.components;var _props4=this.props;var createElement=_props4.createElement;var render=_props4.render;var props=_objectWithoutProperties(_props4,['createElement','render']);if(location==null)return null;// Async match
// Only forward non-Router-specific props to routing context, as those are
// the only ones that might be custom routing context props.
Object.keys(Router.propTypes).forEach(function(propType){return delete props[propType];});return render(_extends({},props,{history:this.history,router:this.router,location:location,routes:routes,params:params,components:components,createElement:createElement}));}});exports.default=Router;module.exports=exports['default'];/***/},/* 40 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _RouterContext=__webpack_require__(10);var _RouterContext2=_interopRequireDefault(_RouterContext);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var RoutingContext=_react2.default.createClass({displayName:'RoutingContext',componentWillMount:function componentWillMount(){true?(0,_routerWarning2.default)(false,'`RoutingContext` has been renamed to `RouterContext`. Please use `import { RouterContext } from \'react-router\'`. http://tiny.cc/router-routercontext'):void 0;},render:function render(){return _react2.default.createElement(_RouterContext2.default,this.props);}});exports.default=RoutingContext;module.exports=exports['default'];/***/},/* 41 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;exports.runEnterHooks=runEnterHooks;exports.runChangeHooks=runChangeHooks;exports.runLeaveHooks=runLeaveHooks;var _AsyncUtils=__webpack_require__(14);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function createTransitionHook(hook,route,asyncArity){return function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}hook.apply(route,args);if(hook.length<asyncArity){var callback=args[args.length-1];// Assume hook executes synchronously and
// automatically call the callback.
callback();}};}function getEnterHooks(routes){return routes.reduce(function(hooks,route){if(route.onEnter)hooks.push(createTransitionHook(route.onEnter,route,3));return hooks;},[]);}function getChangeHooks(routes){return routes.reduce(function(hooks,route){if(route.onChange)hooks.push(createTransitionHook(route.onChange,route,4));return hooks;},[]);}function runTransitionHooks(length,iter,callback){if(!length){callback();return;}var redirectInfo=void 0;function replace(location,deprecatedPathname,deprecatedQuery){if(deprecatedPathname){true?(0,_routerWarning2.default)(false,'`replaceState(state, pathname, query) is deprecated; use `replace(location)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated'):void 0;redirectInfo={pathname:deprecatedPathname,query:deprecatedQuery,state:location};return;}redirectInfo=location;}(0,_AsyncUtils.loopAsync)(length,function(index,next,done){iter(index,replace,function(error){if(error||redirectInfo){done(error,redirectInfo);// No need to continue.
}else{next();}});},callback);}/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */function runEnterHooks(routes,nextState,callback){var hooks=getEnterHooks(routes);return runTransitionHooks(hooks.length,function(index,replace,next){hooks[index](nextState,replace,next);},callback);}/**
	 * Runs all onChange hooks in the given array of routes in order
	 * with onChange(prevState, nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */function runChangeHooks(routes,state,nextState,callback){var hooks=getChangeHooks(routes);return runTransitionHooks(hooks.length,function(index,replace,next){hooks[index](state,nextState,replace,next);},callback);}/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */function runLeaveHooks(routes,prevState){for(var i=0,len=routes.length;i<len;++i){if(routes[i].onLeave)routes[i].onLeave.call(routes[i],prevState);}}/***/},/* 42 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _RouterContext=__webpack_require__(10);var _RouterContext2=_interopRequireDefault(_RouterContext);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=function(){for(var _len=arguments.length,middlewares=Array(_len),_key=0;_key<_len;_key++){middlewares[_key]=arguments[_key];}var withContext=middlewares.map(function(m){return m.renderRouterContext;}).filter(function(f){return f;});var withComponent=middlewares.map(function(m){return m.renderRouteComponent;}).filter(function(f){return f;});var makeCreateElement=function makeCreateElement(){var baseCreateElement=arguments.length<=0||arguments[0]===undefined?_react.createElement:arguments[0];return function(Component,props){return withComponent.reduceRight(function(previous,renderRouteComponent){return renderRouteComponent(previous,props);},baseCreateElement(Component,props));};};return function(renderProps){return withContext.reduceRight(function(previous,renderRouterContext){return renderRouterContext(previous,renderProps);},_react2.default.createElement(_RouterContext2.default,_extends({},renderProps,{createElement:makeCreateElement(renderProps.createElement)})));};};module.exports=exports['default'];/***/},/* 43 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _createBrowserHistory=__webpack_require__(57);var _createBrowserHistory2=_interopRequireDefault(_createBrowserHistory);var _createRouterHistory=__webpack_require__(24);var _createRouterHistory2=_interopRequireDefault(_createRouterHistory);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=(0,_createRouterHistory2.default)(_createBrowserHistory2.default);module.exports=exports['default'];/***/},/* 44 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _PatternUtils=__webpack_require__(8);function routeParamsChanged(route,prevState,nextState){if(!route.path)return false;var paramNames=(0,_PatternUtils.getParamNames)(route.path);return paramNames.some(function(paramName){return prevState.params[paramName]!==nextState.params[paramName];});}/**
	 * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 *
	 * changeRoutes are any routes that didn't leave or enter during
	 * the transition.
	 */function computeChangedRoutes(prevState,nextState){var prevRoutes=prevState&&prevState.routes;var nextRoutes=nextState.routes;var leaveRoutes=void 0,changeRoutes=void 0,enterRoutes=void 0;if(prevRoutes){(function(){var parentIsLeaving=false;leaveRoutes=prevRoutes.filter(function(route){if(parentIsLeaving){return true;}else{var isLeaving=nextRoutes.indexOf(route)===-1||routeParamsChanged(route,prevState,nextState);if(isLeaving)parentIsLeaving=true;return isLeaving;}});// onLeave hooks start at the leaf route.
leaveRoutes.reverse();enterRoutes=[];changeRoutes=[];nextRoutes.forEach(function(route){var isNew=prevRoutes.indexOf(route)===-1;var paramsChanged=leaveRoutes.indexOf(route)!==-1;if(isNew||paramsChanged)enterRoutes.push(route);else changeRoutes.push(route);});})();}else{leaveRoutes=[];changeRoutes=[];enterRoutes=nextRoutes;}return{leaveRoutes:leaveRoutes,changeRoutes:changeRoutes,enterRoutes:enterRoutes};}exports.default=computeChangedRoutes;module.exports=exports['default'];/***/},/* 45 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _AsyncUtils=__webpack_require__(14);var _makeStateWithLocation=__webpack_require__(25);var _makeStateWithLocation2=_interopRequireDefault(_makeStateWithLocation);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function getComponentsForRoute(nextState,route,callback){if(route.component||route.components){callback(null,route.component||route.components);return;}var getComponent=route.getComponent||route.getComponents;if(!getComponent){callback();return;}var location=nextState.location;var nextStateWithLocation=(0,_makeStateWithLocation2.default)(nextState,location);getComponent.call(route,nextStateWithLocation,callback);}/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */function getComponents(nextState,callback){(0,_AsyncUtils.mapAsync)(nextState.routes,function(route,index,callback){getComponentsForRoute(nextState,route,callback);},callback);}exports.default=getComponents;module.exports=exports['default'];/***/},/* 46 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _PatternUtils=__webpack_require__(8);/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */function getRouteParams(route,params){var routeParams={};if(!route.path)return routeParams;(0,_PatternUtils.getParamNames)(route.path).forEach(function(p){if(Object.prototype.hasOwnProperty.call(params,p)){routeParams[p]=params[p];}});return routeParams;}exports.default=getRouteParams;module.exports=exports['default'];/***/},/* 47 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _createHashHistory=__webpack_require__(29);var _createHashHistory2=_interopRequireDefault(_createHashHistory);var _createRouterHistory=__webpack_require__(24);var _createRouterHistory2=_interopRequireDefault(_createRouterHistory);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=(0,_createRouterHistory2.default)(_createHashHistory2.default);module.exports=exports['default'];/***/},/* 48 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};exports.default=isActive;var _PatternUtils=__webpack_require__(8);function deepEqual(a,b){if(a==b)return true;if(a==null||b==null)return false;if(Array.isArray(a)){return Array.isArray(b)&&a.length===b.length&&a.every(function(item,index){return deepEqual(item,b[index]);});}if((typeof a==='undefined'?'undefined':_typeof(a))==='object'){for(var p in a){if(!Object.prototype.hasOwnProperty.call(a,p)){continue;}if(a[p]===undefined){if(b[p]!==undefined){return false;}}else if(!Object.prototype.hasOwnProperty.call(b,p)){return false;}else if(!deepEqual(a[p],b[p])){return false;}}return true;}return String(a)===String(b);}/**
	 * Returns true if the current pathname matches the supplied one, net of
	 * leading and trailing slash normalization. This is sufficient for an
	 * indexOnly route match.
	 */function pathIsActive(pathname,currentPathname){// Normalize leading slash for consistency. Leading slash on pathname has
// already been normalized in isActive. See caveat there.
if(currentPathname.charAt(0)!=='/'){currentPathname='/'+currentPathname;}// Normalize the end of both path names too. Maybe `/foo/` shouldn't show
// `/foo` as active, but in this case, we would already have failed the
// match.
if(pathname.charAt(pathname.length-1)!=='/'){pathname+='/';}if(currentPathname.charAt(currentPathname.length-1)!=='/'){currentPathname+='/';}return currentPathname===pathname;}/**
	 * Returns true if the given pathname matches the active routes and params.
	 */function routeIsActive(pathname,routes,params){var remainingPathname=pathname,paramNames=[],paramValues=[];// for...of would work here but it's probably slower post-transpilation.
for(var i=0,len=routes.length;i<len;++i){var route=routes[i];var pattern=route.path||'';if(pattern.charAt(0)==='/'){remainingPathname=pathname;paramNames=[];paramValues=[];}if(remainingPathname!==null&&pattern){var matched=(0,_PatternUtils.matchPattern)(pattern,remainingPathname);if(matched){remainingPathname=matched.remainingPathname;paramNames=[].concat(paramNames,matched.paramNames);paramValues=[].concat(paramValues,matched.paramValues);}else{remainingPathname=null;}if(remainingPathname===''){// We have an exact match on the route. Just check that all the params
// match.
// FIXME: This doesn't work on repeated params.
return paramNames.every(function(paramName,index){return String(paramValues[index])===String(params[paramName]);});}}}return false;}/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */function queryIsActive(query,activeQuery){if(activeQuery==null)return query==null;if(query==null)return true;return deepEqual(query,activeQuery);}/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */function isActive(_ref,indexOnly,currentLocation,routes,params){var pathname=_ref.pathname;var query=_ref.query;if(currentLocation==null)return false;// TODO: This is a bit ugly. It keeps around support for treating pathnames
// without preceding slashes as absolute paths, but possibly also works
// around the same quirks with basenames as in matchRoutes.
if(pathname.charAt(0)!=='/'){pathname='/'+pathname;}if(!pathIsActive(pathname,currentLocation.pathname)){// The path check is necessary and sufficient for indexOnly, but otherwise
// we still need to check the routes.
if(indexOnly||!routeIsActive(pathname,routes,params)){return false;}}return queryIsActive(query,currentLocation.query);}module.exports=exports['default'];/***/},/* 49 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _createMemoryHistory=__webpack_require__(23);var _createMemoryHistory2=_interopRequireDefault(_createMemoryHistory);var _createTransitionManager=__webpack_require__(16);var _createTransitionManager2=_interopRequireDefault(_createTransitionManager);var _RouteUtils=__webpack_require__(5);var _RouterUtils=__webpack_require__(22);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}/**
	 * A high-level API to be used for server-side rendering.
	 *
	 * This function matches a location to a set of routes and calls
	 * callback(error, redirectLocation, renderProps) when finished.
	 *
	 * Note: You probably don't want to use this in a browser unless you're using
	 * server-side rendering with async routes.
	 */function match(_ref,callback){var history=_ref.history;var routes=_ref.routes;var location=_ref.location;var options=_objectWithoutProperties(_ref,['history','routes','location']);!(history||location)?true?(0,_invariant2.default)(false,'match needs a history or a location'):(0,_invariant2.default)(false):void 0;history=history?history:(0,_createMemoryHistory2.default)(options);var transitionManager=(0,_createTransitionManager2.default)(history,(0,_RouteUtils.createRoutes)(routes));var unlisten=void 0;if(location){// Allow match({ location: '/the/path', ... })
location=history.createLocation(location);}else{// Pick up the location from the history via synchronous history.listen
// call if needed.
unlisten=history.listen(function(historyLocation){location=historyLocation;});}var router=(0,_RouterUtils.createRouterObject)(history,transitionManager);history=(0,_RouterUtils.createRoutingHistory)(history,transitionManager);transitionManager.match(location,function(error,redirectLocation,nextState){callback(error,redirectLocation,nextState&&_extends({},nextState,{history:history,router:router,matchContext:{history:history,transitionManager:transitionManager,router:router}}));// Defer removing the listener to here to prevent DOM histories from having
// to unwind DOM event listeners unnecessarily, in case callback renders a
// <Router> and attaches another history listener.
if(unlisten){unlisten();}});}exports.default=match;module.exports=exports['default'];/***/},/* 50 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};exports.default=matchRoutes;var _AsyncUtils=__webpack_require__(14);var _makeStateWithLocation=__webpack_require__(25);var _makeStateWithLocation2=_interopRequireDefault(_makeStateWithLocation);var _PatternUtils=__webpack_require__(8);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);var _RouteUtils=__webpack_require__(5);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function getChildRoutes(route,location,paramNames,paramValues,callback){if(route.childRoutes){return[null,route.childRoutes];}if(!route.getChildRoutes){return[];}var sync=true,result=void 0;var partialNextState={location:location,params:createParams(paramNames,paramValues)};var partialNextStateWithLocation=(0,_makeStateWithLocation2.default)(partialNextState,location);route.getChildRoutes(partialNextStateWithLocation,function(error,childRoutes){childRoutes=!error&&(0,_RouteUtils.createRoutes)(childRoutes);if(sync){result=[error,childRoutes];return;}callback(error,childRoutes);});sync=false;return result;// Might be undefined.
}function getIndexRoute(route,location,paramNames,paramValues,callback){if(route.indexRoute){callback(null,route.indexRoute);}else if(route.getIndexRoute){var partialNextState={location:location,params:createParams(paramNames,paramValues)};var partialNextStateWithLocation=(0,_makeStateWithLocation2.default)(partialNextState,location);route.getIndexRoute(partialNextStateWithLocation,function(error,indexRoute){callback(error,!error&&(0,_RouteUtils.createRoutes)(indexRoute)[0]);});}else if(route.childRoutes){(function(){var pathless=route.childRoutes.filter(function(childRoute){return!childRoute.path;});(0,_AsyncUtils.loopAsync)(pathless.length,function(index,next,done){getIndexRoute(pathless[index],location,paramNames,paramValues,function(error,indexRoute){if(error||indexRoute){var routes=[pathless[index]].concat(Array.isArray(indexRoute)?indexRoute:[indexRoute]);done(error,routes);}else{next();}});},function(err,routes){callback(null,routes);});})();}else{callback();}}function assignParams(params,paramNames,paramValues){return paramNames.reduce(function(params,paramName,index){var paramValue=paramValues&&paramValues[index];if(Array.isArray(params[paramName])){params[paramName].push(paramValue);}else if(paramName in params){params[paramName]=[params[paramName],paramValue];}else{params[paramName]=paramValue;}return params;},params);}function createParams(paramNames,paramValues){return assignParams({},paramNames,paramValues);}function matchRouteDeep(route,location,remainingPathname,paramNames,paramValues,callback){var pattern=route.path||'';if(pattern.charAt(0)==='/'){remainingPathname=location.pathname;paramNames=[];paramValues=[];}// Only try to match the path if the route actually has a pattern, and if
// we're not just searching for potential nested absolute paths.
if(remainingPathname!==null&&pattern){try{var matched=(0,_PatternUtils.matchPattern)(pattern,remainingPathname);if(matched){remainingPathname=matched.remainingPathname;paramNames=[].concat(paramNames,matched.paramNames);paramValues=[].concat(paramValues,matched.paramValues);}else{remainingPathname=null;}}catch(error){callback(error);}// By assumption, pattern is non-empty here, which is the prerequisite for
// actually terminating a match.
if(remainingPathname===''){var _ret2=function(){var match={routes:[route],params:createParams(paramNames,paramValues)};getIndexRoute(route,location,paramNames,paramValues,function(error,indexRoute){if(error){callback(error);}else{if(Array.isArray(indexRoute)){var _match$routes;true?(0,_routerWarning2.default)(indexRoute.every(function(route){return!route.path;}),'Index routes should not have paths'):void 0;(_match$routes=match.routes).push.apply(_match$routes,indexRoute);}else if(indexRoute){true?(0,_routerWarning2.default)(!indexRoute.path,'Index routes should not have paths'):void 0;match.routes.push(indexRoute);}callback(null,match);}});return{v:void 0};}();if((typeof _ret2==='undefined'?'undefined':_typeof(_ret2))==="object")return _ret2.v;}}if(remainingPathname!=null||route.childRoutes){// Either a) this route matched at least some of the path or b)
// we don't have to load this route's children asynchronously. In
// either case continue checking for matches in the subtree.
var onChildRoutes=function onChildRoutes(error,childRoutes){if(error){callback(error);}else if(childRoutes){// Check the child routes to see if any of them match.
matchRoutes(childRoutes,location,function(error,match){if(error){callback(error);}else if(match){// A child route matched! Augment the match and pass it up the stack.
match.routes.unshift(route);callback(null,match);}else{callback();}},remainingPathname,paramNames,paramValues);}else{callback();}};var result=getChildRoutes(route,location,paramNames,paramValues,onChildRoutes);if(result){onChildRoutes.apply(undefined,result);}}else{callback();}}/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */function matchRoutes(routes,location,callback,remainingPathname){var paramNames=arguments.length<=4||arguments[4]===undefined?[]:arguments[4];var paramValues=arguments.length<=5||arguments[5]===undefined?[]:arguments[5];if(remainingPathname===undefined){// TODO: This is a little bit ugly, but it works around a quirk in history
// that strips the leading slash from pathnames when using basenames with
// trailing slashes.
if(location.pathname.charAt(0)!=='/'){location=_extends({},location,{pathname:'/'+location.pathname});}remainingPathname=location.pathname;}(0,_AsyncUtils.loopAsync)(routes.length,function(index,next,done){matchRouteDeep(routes[index],location,remainingPathname,paramNames,paramValues,function(error,match){if(error||match){done(error,match);}else{next();}});},callback);}module.exports=exports['default'];/***/},/* 51 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _useQueries=__webpack_require__(13);var _useQueries2=_interopRequireDefault(_useQueries);var _createTransitionManager=__webpack_require__(16);var _createTransitionManager2=_interopRequireDefault(_createTransitionManager);var _routerWarning=__webpack_require__(1);var _routerWarning2=_interopRequireDefault(_routerWarning);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know about routing.
	 *
	 * Enhances history objects with the following methods:
	 *
	 * - listen((error, nextState) => {})
	 * - listenBeforeLeavingRoute(route, (nextLocation) => {})
	 * - match(location, (error, redirectLocation, nextState) => {})
	 * - isActive(pathname, query, indexOnly=false)
	 */function useRoutes(createHistory){true?(0,_routerWarning2.default)(false,'`useRoutes` is deprecated. Please use `createTransitionManager` instead.'):void 0;return function(){var _ref=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];var routes=_ref.routes;var options=_objectWithoutProperties(_ref,['routes']);var history=(0,_useQueries2.default)(createHistory)(options);var transitionManager=(0,_createTransitionManager2.default)(history,routes);return _extends({},history,transitionManager);};}exports.default=useRoutes;module.exports=exports['default'];/***/},/* 52 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};exports.default=withRouter;var _react=__webpack_require__(2);var _react2=_interopRequireDefault(_react);var _hoistNonReactStatics=__webpack_require__(60);var _hoistNonReactStatics2=_interopRequireDefault(_hoistNonReactStatics);var _PropTypes=__webpack_require__(15);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function getDisplayName(WrappedComponent){return WrappedComponent.displayName||WrappedComponent.name||'Component';}function withRouter(WrappedComponent){var WithRouter=_react2.default.createClass({displayName:'WithRouter',contextTypes:{router:_PropTypes.routerShape},render:function render(){return _react2.default.createElement(WrappedComponent,_extends({},this.props,{router:this.context.router}));}});WithRouter.displayName='withRouter('+getDisplayName(WrappedComponent)+')';WithRouter.WrappedComponent=WrappedComponent;return(0,_hoistNonReactStatics2.default)(WithRouter,WrappedComponent);}module.exports=exports['default'];/***/},/* 53 *//***/function(module,exports,__webpack_require__){var pSlice=Array.prototype.slice;var objectKeys=__webpack_require__(55);var isArguments=__webpack_require__(54);var deepEqual=module.exports=function(actual,expected,opts){if(!opts)opts={};// 7.1. All identical values are equivalent, as determined by ===.
if(actual===expected){return true;}else if(actual instanceof Date&&expected instanceof Date){return actual.getTime()===expected.getTime();// 7.3. Other pairs that do not both pass typeof value == 'object',
// equivalence is determined by ==.
}else if(!actual||!expected||(typeof actual==='undefined'?'undefined':_typeof2(actual))!='object'&&(typeof expected==='undefined'?'undefined':_typeof2(expected))!='object'){return opts.strict?actual===expected:actual==expected;// 7.4. For all other Object pairs, including Array objects, equivalence is
// determined by having the same number of owned properties (as verified
// with Object.prototype.hasOwnProperty.call), the same set of keys
// (although not necessarily the same order), equivalent values for every
// corresponding key, and an identical 'prototype' property. Note: this
// accounts for both named and indexed properties on Arrays.
}else{return objEquiv(actual,expected,opts);}};function isUndefinedOrNull(value){return value===null||value===undefined;}function isBuffer(x){if(!x||(typeof x==='undefined'?'undefined':_typeof2(x))!=='object'||typeof x.length!=='number')return false;if(typeof x.copy!=='function'||typeof x.slice!=='function'){return false;}if(x.length>0&&typeof x[0]!=='number')return false;return true;}function objEquiv(a,b,opts){var i,key;if(isUndefinedOrNull(a)||isUndefinedOrNull(b))return false;// an identical 'prototype' property.
if(a.prototype!==b.prototype)return false;//~~~I've managed to break Object.keys through screwy arguments passing.
//   Converting to array solves the problem.
if(isArguments(a)){if(!isArguments(b)){return false;}a=pSlice.call(a);b=pSlice.call(b);return deepEqual(a,b,opts);}if(isBuffer(a)){if(!isBuffer(b)){return false;}if(a.length!==b.length)return false;for(i=0;i<a.length;i++){if(a[i]!==b[i])return false;}return true;}try{var ka=objectKeys(a),kb=objectKeys(b);}catch(e){//happens when one is a string literal and the other isn't
return false;}// having the same number of owned properties (keys incorporates
// hasOwnProperty)
if(ka.length!=kb.length)return false;//the same set of keys (although not necessarily the same order),
ka.sort();kb.sort();//~~~cheap key test
for(i=ka.length-1;i>=0;i--){if(ka[i]!=kb[i])return false;}//equivalent values for every corresponding key, and
//~~~possibly expensive deep test
for(i=ka.length-1;i>=0;i--){key=ka[i];if(!deepEqual(a[key],b[key],opts))return false;}return(typeof a==='undefined'?'undefined':_typeof2(a))===(typeof b==='undefined'?'undefined':_typeof2(b));}/***/},/* 54 *//***/function(module,exports){var supportsArgumentsClass=function(){return Object.prototype.toString.call(arguments);}()=='[object Arguments]';exports=module.exports=supportsArgumentsClass?supported:unsupported;exports.supported=supported;function supported(object){return Object.prototype.toString.call(object)=='[object Arguments]';};exports.unsupported=unsupported;function unsupported(object){return object&&(typeof object==='undefined'?'undefined':_typeof2(object))=='object'&&typeof object.length=='number'&&Object.prototype.hasOwnProperty.call(object,'callee')&&!Object.prototype.propertyIsEnumerable.call(object,'callee')||false;};/***/},/* 55 *//***/function(module,exports){exports=module.exports=typeof Object.keys==='function'?Object.keys:shim;exports.shim=shim;function shim(obj){var keys=[];for(var key in obj){keys.push(key);}return keys;}/***/},/* 56 *//***/function(module,exports){"use strict";exports.__esModule=true;var _slice=Array.prototype.slice;exports.loopAsync=loopAsync;function loopAsync(turns,work,callback){var currentTurn=0,isDone=false;var sync=false,hasNext=false,doneArgs=undefined;function done(){isDone=true;if(sync){// Iterate instead of recursing if possible.
doneArgs=[].concat(_slice.call(arguments));return;}callback.apply(this,arguments);}function next(){if(isDone){return;}hasNext=true;if(sync){// Iterate instead of recursing if possible.
return;}sync=true;while(!isDone&&currentTurn<turns&&hasNext){hasNext=false;work.call(this,currentTurn++,next,done);}sync=false;if(isDone){// This means the loop finished synchronously.
callback.apply(this,doneArgs);return;}if(currentTurn>=turns&&hasNext){isDone=true;callback();}}next();}/***/},/* 57 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _Actions=__webpack_require__(9);var _PathUtils=__webpack_require__(7);var _ExecutionEnvironment=__webpack_require__(12);var _DOMUtils=__webpack_require__(17);var _DOMStateStorage=__webpack_require__(27);var _createDOMHistory=__webpack_require__(28);var _createDOMHistory2=_interopRequireDefault(_createDOMHistory);/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve URLs.
	 */function createBrowserHistory(){var options=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];!_ExecutionEnvironment.canUseDOM?true?_invariant2['default'](false,'Browser history needs a DOM'):_invariant2['default'](false):undefined;var forceRefresh=options.forceRefresh;var isSupported=_DOMUtils.supportsHistory();var useRefresh=!isSupported||forceRefresh;function getCurrentLocation(historyState){try{historyState=historyState||window.history.state||{};}catch(e){historyState={};}var path=_DOMUtils.getWindowPath();var _historyState=historyState;var key=_historyState.key;var state=undefined;if(key){state=_DOMStateStorage.readState(key);}else{state=null;key=history.createKey();if(isSupported)window.history.replaceState(_extends({},historyState,{key:key}),null);}var location=_PathUtils.parsePath(path);return history.createLocation(_extends({},location,{state:state}),undefined,key);}function startPopStateListener(_ref){var transitionTo=_ref.transitionTo;function popStateListener(event){if(event.state===undefined)return;// Ignore extraneous popstate events in WebKit.
transitionTo(getCurrentLocation(event.state));}_DOMUtils.addEventListener(window,'popstate',popStateListener);return function(){_DOMUtils.removeEventListener(window,'popstate',popStateListener);};}function finishTransition(location){var basename=location.basename;var pathname=location.pathname;var search=location.search;var hash=location.hash;var state=location.state;var action=location.action;var key=location.key;if(action===_Actions.POP)return;// Nothing to do.
_DOMStateStorage.saveState(key,state);var path=(basename||'')+pathname+search+hash;var historyState={key:key};if(action===_Actions.PUSH){if(useRefresh){window.location.href=path;return false;// Prevent location update.
}else{window.history.pushState(historyState,null,path);}}else{// REPLACE
if(useRefresh){window.location.replace(path);return false;// Prevent location update.
}else{window.history.replaceState(historyState,null,path);}}}var history=_createDOMHistory2['default'](_extends({},options,{getCurrentLocation:getCurrentLocation,finishTransition:finishTransition,saveState:_DOMStateStorage.saveState}));var listenerCount=0,stopPopStateListener=undefined;function listenBefore(listener){if(++listenerCount===1)stopPopStateListener=startPopStateListener(history);var unlisten=history.listenBefore(listener);return function(){unlisten();if(--listenerCount===0)stopPopStateListener();};}function listen(listener){if(++listenerCount===1)stopPopStateListener=startPopStateListener(history);var unlisten=history.listen(listener);return function(){unlisten();if(--listenerCount===0)stopPopStateListener();};}// deprecated
function registerTransitionHook(hook){if(++listenerCount===1)stopPopStateListener=startPopStateListener(history);history.registerTransitionHook(hook);}// deprecated
function unregisterTransitionHook(hook){history.unregisterTransitionHook(hook);if(--listenerCount===0)stopPopStateListener();}return _extends({},history,{listenBefore:listenBefore,listen:listen,registerTransitionHook:registerTransitionHook,unregisterTransitionHook:unregisterTransitionHook});}exports['default']=createBrowserHistory;module.exports=exports['default'];/***/},/* 58 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _warning=__webpack_require__(4);var _warning2=_interopRequireDefault(_warning);var _Actions=__webpack_require__(9);var _PathUtils=__webpack_require__(7);function createLocation(){var location=arguments.length<=0||arguments[0]===undefined?'/':arguments[0];var action=arguments.length<=1||arguments[1]===undefined?_Actions.POP:arguments[1];var key=arguments.length<=2||arguments[2]===undefined?null:arguments[2];var _fourthArg=arguments.length<=3||arguments[3]===undefined?null:arguments[3];if(typeof location==='string')location=_PathUtils.parsePath(location);if((typeof action==='undefined'?'undefined':_typeof2(action))==='object'){true?_warning2['default'](false,'The state (2nd) argument to createLocation is deprecated; use a '+'location descriptor instead'):undefined;location=_extends({},location,{state:action});action=key||_Actions.POP;key=_fourthArg;}var pathname=location.pathname||'/';var search=location.search||'';var hash=location.hash||'';var state=location.state||null;return{pathname:pathname,search:search,hash:hash,state:state,action:action,key:key};}exports['default']=createLocation;module.exports=exports['default'];/***/},/* 59 *//***/function(module,exports,__webpack_require__){'use strict';exports.__esModule=true;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{'default':obj};}var _warning=__webpack_require__(4);var _warning2=_interopRequireDefault(_warning);var _invariant=__webpack_require__(3);var _invariant2=_interopRequireDefault(_invariant);var _PathUtils=__webpack_require__(7);var _Actions=__webpack_require__(9);var _createHistory=__webpack_require__(30);var _createHistory2=_interopRequireDefault(_createHistory);function createStateStorage(entries){return entries.filter(function(entry){return entry.state;}).reduce(function(memo,entry){memo[entry.key]=entry.state;return memo;},{});}function createMemoryHistory(){var options=arguments.length<=0||arguments[0]===undefined?{}:arguments[0];if(Array.isArray(options)){options={entries:options};}else if(typeof options==='string'){options={entries:[options]};}var history=_createHistory2['default'](_extends({},options,{getCurrentLocation:getCurrentLocation,finishTransition:finishTransition,saveState:saveState,go:go}));var _options=options;var entries=_options.entries;var current=_options.current;if(typeof entries==='string'){entries=[entries];}else if(!Array.isArray(entries)){entries=['/'];}entries=entries.map(function(entry){var key=history.createKey();if(typeof entry==='string')return{pathname:entry,key:key};if((typeof entry==='undefined'?'undefined':_typeof2(entry))==='object'&&entry)return _extends({},entry,{key:key});true?true?_invariant2['default'](false,'Unable to create history entry from %s',entry):_invariant2['default'](false):undefined;});if(current==null){current=entries.length-1;}else{!(current>=0&&current<entries.length)?true?_invariant2['default'](false,'Current index must be >= 0 and < %s, was %s',entries.length,current):_invariant2['default'](false):undefined;}var storage=createStateStorage(entries);function saveState(key,state){storage[key]=state;}function readState(key){return storage[key];}function getCurrentLocation(){var entry=entries[current];var basename=entry.basename;var pathname=entry.pathname;var search=entry.search;var path=(basename||'')+pathname+(search||'');var key=undefined,state=undefined;if(entry.key){key=entry.key;state=readState(key);}else{key=history.createKey();state=null;entry.key=key;}var location=_PathUtils.parsePath(path);return history.createLocation(_extends({},location,{state:state}),undefined,key);}function canGo(n){var index=current+n;return index>=0&&index<entries.length;}function go(n){if(n){if(!canGo(n)){true?_warning2['default'](false,'Cannot go(%s) there is not enough history',n):undefined;return;}current+=n;var currentLocation=getCurrentLocation();// change action to POP
history.transitionTo(_extends({},currentLocation,{action:_Actions.POP}));}}function finishTransition(location){switch(location.action){case _Actions.PUSH:current+=1;// if we are not on the top of stack
// remove rest and push new
if(current<entries.length)entries.splice(current);entries.push(location);saveState(location.key,location.state);break;case _Actions.REPLACE:entries[current]=location;saveState(location.key,location.state);break;}}return history;}exports['default']=createMemoryHistory;module.exports=exports['default'];/***/},/* 60 *//***/function(module,exports){/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */'use strict';var REACT_STATICS={childContextTypes:true,contextTypes:true,defaultProps:true,displayName:true,getDefaultProps:true,mixins:true,propTypes:true,type:true};var KNOWN_STATICS={name:true,length:true,prototype:true,caller:true,arguments:true,arity:true};var isGetOwnPropertySymbolsAvailable=typeof Object.getOwnPropertySymbols==='function';module.exports=function hoistNonReactStatics(targetComponent,sourceComponent,customStatics){if(typeof sourceComponent!=='string'){// don't hoist over string (html) components
var keys=Object.getOwnPropertyNames(sourceComponent);/* istanbul ignore else */if(isGetOwnPropertySymbolsAvailable){keys=keys.concat(Object.getOwnPropertySymbols(sourceComponent));}for(var i=0;i<keys.length;++i){if(!REACT_STATICS[keys[i]]&&!KNOWN_STATICS[keys[i]]&&(!customStatics||!customStatics[keys[i]])){try{targetComponent[keys[i]]=sourceComponent[keys[i]];}catch(error){}}}}return targetComponent;};/***/},/* 61 *//***/function(module,exports,__webpack_require__){'use strict';var strictUriEncode=__webpack_require__(62);exports.extract=function(str){return str.split('?')[1]||'';};exports.parse=function(str){if(typeof str!=='string'){return{};}str=str.trim().replace(/^(\?|#|&)/,'');if(!str){return{};}return str.split('&').reduce(function(ret,param){var parts=param.replace(/\+/g,' ').split('=');// Firefox (pre 40) decodes `%3D` to `=`
// https://github.com/sindresorhus/query-string/pull/37
var key=parts.shift();var val=parts.length>0?parts.join('='):undefined;key=decodeURIComponent(key);// missing `=` should be `null`:
// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
val=val===undefined?null:decodeURIComponent(val);if(!ret.hasOwnProperty(key)){ret[key]=val;}else if(Array.isArray(ret[key])){ret[key].push(val);}else{ret[key]=[ret[key],val];}return ret;},{});};exports.stringify=function(obj){return obj?Object.keys(obj).sort().map(function(key){var val=obj[key];if(val===undefined){return'';}if(val===null){return key;}if(Array.isArray(val)){return val.slice().sort().map(function(val2){return strictUriEncode(key)+'='+strictUriEncode(val2);}).join('&');}return strictUriEncode(key)+'='+strictUriEncode(val);}).filter(function(x){return x.length>0;}).join('&'):'';};/***/},/* 62 *//***/function(module,exports){'use strict';module.exports=function(str){return encodeURIComponent(str).replace(/[!'()*]/g,function(c){return'%'+c.charCodeAt(0).toString(16).toUpperCase();});};/***/},/* 63 *//***/function(module,exports,__webpack_require__){/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */'use strict';/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */var warning=function warning(){};if(true){warning=function warning(condition,format,args){var len=arguments.length;args=new Array(len>2?len-2:0);for(var key=2;key<len;key++){args[key-2]=arguments[key];}if(format===undefined){throw new Error('`warning(condition, format, ...args)` requires a warning '+'message argument');}if(format.length<10||/^[s\W]*$/.test(format)){throw new Error('The warning format should be able to uniquely identify this '+'warning. Please, use a more descriptive format than: '+format);}if(!condition){var argIndex=0;var message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});if(typeof console!=='undefined'){console.error(message);}try{// This error was thrown as a convenience so that you can use this stack
// to find the callsite that caused this warning to fire.
throw new Error(message);}catch(x){}}};}module.exports=warning;/***/}/******/]));});;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3B1YmxpYy9yZWFjdC1yb3V0ZXIvdW1kL1JlYWN0Um91dGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIrTkFBQSxDQUFDLFFBQVMsaUNBQVQsQ0FBMEMsSUFBMUMsQ0FBZ0QsT0FBaEQsQ0FBeUQsQ0FDekQsR0FBRyxPQUFPLFFBQVAsb0NBQU8sT0FBUCxLQUFtQixRQUFuQixFQUErQixPQUFPLE9BQVAsb0NBQU8sTUFBUCxLQUFrQixRQUFwRCxDQUNDLE9BQU8sT0FBUCxDQUFpQixRQUFRLFFBQVEsT0FBUixDQUFSLENBQWpCLENBREQsSUFFSyxJQUFHLE1BQU8sT0FBUCxHQUFrQixVQUFsQixFQUFnQyxPQUFPLEdBQTFDLENBQ0osT0FBTyxDQUFDLE9BQUQsQ0FBUCxDQUFrQixPQUFsQixFQURJLElBRUEsSUFBRyxPQUFPLFFBQVAsb0NBQU8sT0FBUCxLQUFtQixRQUF0QixDQUNKLFFBQVEsYUFBUixFQUF5QixRQUFRLFFBQVEsT0FBUixDQUFSLENBQXpCLENBREksSUFHSixNQUFLLGFBQUwsRUFBc0IsUUFBUSxLQUFLLE9BQUwsQ0FBUixDQUF0QixDQUNELENBVEQsWUFTUyxTQUFTLDZCQUFULENBQXdDLENBQ2pELE1BQU8sU0FBVSxTQUFTLE9BQVQsQ0FBa0IsQ0FBRTtBQUNyQyxRQUFVO0FBQ1YsUUFBVSxHQUFJLGtCQUFtQixFQUF2QixDQUVWLFFBQVU7QUFDVixRQUFVLFFBQVMsb0JBQVQsQ0FBNkIsUUFBN0IsQ0FBdUMsQ0FFakQsUUFBVztBQUNYLFFBQVcsR0FBRyxpQkFBaUIsUUFBakIsQ0FBSCxDQUNYLFFBQVksTUFBTyxrQkFBaUIsUUFBakIsRUFBMkIsT0FBbEMsQ0FFWixRQUFXO0FBQ1gsUUFBVyxHQUFJLFFBQVMsaUJBQWlCLFFBQWpCLEVBQTZCLENBQ3JELFFBQVksUUFBUyxFQURnQyxDQUVyRCxRQUFZLEdBQUksUUFGcUMsQ0FHckQsUUFBWSxPQUFRLEtBQ3BCLFFBSnFELENBQTFDLENBTVgsUUFBVztB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Q0EsR0FBSSxTQUFVLFlBQ1osT0FBTyxPQUFQLENBQWUsS0FBZixDQUFzQixVQUFXLENBQy9CLE1BQU8sTUFBSyxVQUFMLENBQVAsQ0FDRCxDQUZELENBREYsQ0FJQSxHQUFJLE1BQU8sUUFBUCxHQUFtQixXQUF2QixDQUFvQyxDQUNsQyxRQUFRLEtBQVIsQ0FBYyxPQUFkLEVBQ0QsQ0FDRCxHQUFJLENBQ0Y7QUFDQTtBQUNBLEtBQU0sSUFBSSxNQUFKLENBQVUsT0FBVixDQUFOLENBQ0QsQ0FBQyxNQUFNLENBQU4sQ0FBUyxDQUFFLENBQ2QsQ0FDRixDQW5DRCxDQW9DRCxDQUVELE9BQU8sT0FBUCxDQUFpQixPQUFqQixDQUdELEtBQU8sQ0FDUCxRQXA5S1UsQ0ExQ00sQ0FBaEIsRUErL0tDLENBemdMRCxFQTBnTEEiLCJmaWxlIjoiUmVhY3RSb3V0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJyZWFjdFwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJSZWFjdFJvdXRlclwiXSA9IGZhY3RvcnkocmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJSZWFjdFJvdXRlclwiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMl9fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcblxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cblxuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRleHBvcnRzLmNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBleHBvcnRzLmhhc2hIaXN0b3J5ID0gZXhwb3J0cy5icm93c2VySGlzdG9yeSA9IGV4cG9ydHMuYXBwbHlSb3V0ZXJNaWRkbGV3YXJlID0gZXhwb3J0cy5mb3JtYXRQYXR0ZXJuID0gZXhwb3J0cy51c2VSb3V0ZXJIaXN0b3J5ID0gZXhwb3J0cy5tYXRjaCA9IGV4cG9ydHMucm91dGVyU2hhcGUgPSBleHBvcnRzLmxvY2F0aW9uU2hhcGUgPSBleHBvcnRzLlByb3BUeXBlcyA9IGV4cG9ydHMuUm91dGluZ0NvbnRleHQgPSBleHBvcnRzLlJvdXRlckNvbnRleHQgPSBleHBvcnRzLmNyZWF0ZVJvdXRlcyA9IGV4cG9ydHMudXNlUm91dGVzID0gZXhwb3J0cy5Sb3V0ZUNvbnRleHQgPSBleHBvcnRzLkxpZmVjeWNsZSA9IGV4cG9ydHMuSGlzdG9yeSA9IGV4cG9ydHMuUm91dGUgPSBleHBvcnRzLlJlZGlyZWN0ID0gZXhwb3J0cy5JbmRleFJvdXRlID0gZXhwb3J0cy5JbmRleFJlZGlyZWN0ID0gZXhwb3J0cy53aXRoUm91dGVyID0gZXhwb3J0cy5JbmRleExpbmsgPSBleHBvcnRzLkxpbmsgPSBleHBvcnRzLlJvdXRlciA9IHVuZGVmaW5lZDtcblxuXHR2YXIgX1JvdXRlVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY3JlYXRlUm91dGVzJywge1xuXHQgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICByZXR1cm4gX1JvdXRlVXRpbHMuY3JlYXRlUm91dGVzO1xuXHQgIH1cblx0fSk7XG5cblx0dmFyIF9Qcm9wVHlwZXMyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdsb2NhdGlvblNoYXBlJywge1xuXHQgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICByZXR1cm4gX1Byb3BUeXBlczIubG9jYXRpb25TaGFwZTtcblx0ICB9XG5cdH0pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3JvdXRlclNoYXBlJywge1xuXHQgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICByZXR1cm4gX1Byb3BUeXBlczIucm91dGVyU2hhcGU7XG5cdCAgfVxuXHR9KTtcblxuXHR2YXIgX1BhdHRlcm5VdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdmb3JtYXRQYXR0ZXJuJywge1xuXHQgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICByZXR1cm4gX1BhdHRlcm5VdGlscy5mb3JtYXRQYXR0ZXJuO1xuXHQgIH1cblx0fSk7XG5cblx0dmFyIF9Sb3V0ZXIyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cblx0dmFyIF9Sb3V0ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVyMik7XG5cblx0dmFyIF9MaW5rMiA9IF9fd2VicGFja19yZXF1aXJlX18oMjApO1xuXG5cdHZhciBfTGluazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaW5rMik7XG5cblx0dmFyIF9JbmRleExpbmsyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cblx0dmFyIF9JbmRleExpbmszID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5kZXhMaW5rMik7XG5cblx0dmFyIF93aXRoUm91dGVyMiA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpO1xuXG5cdHZhciBfd2l0aFJvdXRlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aXRoUm91dGVyMik7XG5cblx0dmFyIF9JbmRleFJlZGlyZWN0MiA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xuXG5cdHZhciBfSW5kZXhSZWRpcmVjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JbmRleFJlZGlyZWN0Mik7XG5cblx0dmFyIF9JbmRleFJvdXRlMiA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXG5cdHZhciBfSW5kZXhSb3V0ZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JbmRleFJvdXRlMik7XG5cblx0dmFyIF9SZWRpcmVjdDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblxuXHR2YXIgX1JlZGlyZWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlZGlyZWN0Mik7XG5cblx0dmFyIF9Sb3V0ZTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcblxuXHR2YXIgX1JvdXRlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRlMik7XG5cblx0dmFyIF9IaXN0b3J5MiA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpO1xuXG5cdHZhciBfSGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IaXN0b3J5Mik7XG5cblx0dmFyIF9MaWZlY3ljbGUyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7XG5cblx0dmFyIF9MaWZlY3ljbGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlmZWN5Y2xlMik7XG5cblx0dmFyIF9Sb3V0ZUNvbnRleHQyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCk7XG5cblx0dmFyIF9Sb3V0ZUNvbnRleHQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVDb250ZXh0Mik7XG5cblx0dmFyIF91c2VSb3V0ZXMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG5cblx0dmFyIF91c2VSb3V0ZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlUm91dGVzMik7XG5cblx0dmFyIF9Sb3V0ZXJDb250ZXh0MiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG5cdHZhciBfUm91dGVyQ29udGV4dDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZXJDb250ZXh0Mik7XG5cblx0dmFyIF9Sb3V0aW5nQ29udGV4dDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblxuXHR2YXIgX1JvdXRpbmdDb250ZXh0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRpbmdDb250ZXh0Mik7XG5cblx0dmFyIF9Qcm9wVHlwZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJvcFR5cGVzMik7XG5cblx0dmFyIF9tYXRjaDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcblxuXHR2YXIgX21hdGNoMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hdGNoMik7XG5cblx0dmFyIF91c2VSb3V0ZXJIaXN0b3J5MiA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXG5cdHZhciBfdXNlUm91dGVySGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VSb3V0ZXJIaXN0b3J5Mik7XG5cblx0dmFyIF9hcHBseVJvdXRlck1pZGRsZXdhcmUyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Mik7XG5cblx0dmFyIF9hcHBseVJvdXRlck1pZGRsZXdhcmUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXBwbHlSb3V0ZXJNaWRkbGV3YXJlMik7XG5cblx0dmFyIF9icm93c2VySGlzdG9yeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblxuXHR2YXIgX2Jyb3dzZXJIaXN0b3J5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Jyb3dzZXJIaXN0b3J5Mik7XG5cblx0dmFyIF9oYXNoSGlzdG9yeTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblxuXHR2YXIgX2hhc2hIaXN0b3J5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhc2hIaXN0b3J5Mik7XG5cblx0dmFyIF9jcmVhdGVNZW1vcnlIaXN0b3J5MiA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG5cdHZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5Mik7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRleHBvcnRzLlJvdXRlciA9IF9Sb3V0ZXIzLmRlZmF1bHQ7IC8qIGNvbXBvbmVudHMgKi9cblxuXHRleHBvcnRzLkxpbmsgPSBfTGluazMuZGVmYXVsdDtcblx0ZXhwb3J0cy5JbmRleExpbmsgPSBfSW5kZXhMaW5rMy5kZWZhdWx0O1xuXHRleHBvcnRzLndpdGhSb3V0ZXIgPSBfd2l0aFJvdXRlcjMuZGVmYXVsdDtcblxuXHQvKiBjb21wb25lbnRzIChjb25maWd1cmF0aW9uKSAqL1xuXG5cdGV4cG9ydHMuSW5kZXhSZWRpcmVjdCA9IF9JbmRleFJlZGlyZWN0My5kZWZhdWx0O1xuXHRleHBvcnRzLkluZGV4Um91dGUgPSBfSW5kZXhSb3V0ZTMuZGVmYXVsdDtcblx0ZXhwb3J0cy5SZWRpcmVjdCA9IF9SZWRpcmVjdDMuZGVmYXVsdDtcblx0ZXhwb3J0cy5Sb3V0ZSA9IF9Sb3V0ZTMuZGVmYXVsdDtcblxuXHQvKiBtaXhpbnMgKi9cblxuXHRleHBvcnRzLkhpc3RvcnkgPSBfSGlzdG9yeTMuZGVmYXVsdDtcblx0ZXhwb3J0cy5MaWZlY3ljbGUgPSBfTGlmZWN5Y2xlMy5kZWZhdWx0O1xuXHRleHBvcnRzLlJvdXRlQ29udGV4dCA9IF9Sb3V0ZUNvbnRleHQzLmRlZmF1bHQ7XG5cblx0LyogdXRpbHMgKi9cblxuXHRleHBvcnRzLnVzZVJvdXRlcyA9IF91c2VSb3V0ZXMzLmRlZmF1bHQ7XG5cdGV4cG9ydHMuUm91dGVyQ29udGV4dCA9IF9Sb3V0ZXJDb250ZXh0My5kZWZhdWx0O1xuXHRleHBvcnRzLlJvdXRpbmdDb250ZXh0ID0gX1JvdXRpbmdDb250ZXh0My5kZWZhdWx0O1xuXHRleHBvcnRzLlByb3BUeXBlcyA9IF9Qcm9wVHlwZXMzLmRlZmF1bHQ7XG5cdGV4cG9ydHMubWF0Y2ggPSBfbWF0Y2gzLmRlZmF1bHQ7XG5cdGV4cG9ydHMudXNlUm91dGVySGlzdG9yeSA9IF91c2VSb3V0ZXJIaXN0b3J5My5kZWZhdWx0O1xuXHRleHBvcnRzLmFwcGx5Um91dGVyTWlkZGxld2FyZSA9IF9hcHBseVJvdXRlck1pZGRsZXdhcmUzLmRlZmF1bHQ7XG5cblx0LyogaGlzdG9yaWVzICovXG5cblx0ZXhwb3J0cy5icm93c2VySGlzdG9yeSA9IF9icm93c2VySGlzdG9yeTMuZGVmYXVsdDtcblx0ZXhwb3J0cy5oYXNoSGlzdG9yeSA9IF9oYXNoSGlzdG9yeTMuZGVmYXVsdDtcblx0ZXhwb3J0cy5jcmVhdGVNZW1vcnlIaXN0b3J5ID0gX2NyZWF0ZU1lbW9yeUhpc3RvcnkzLmRlZmF1bHQ7XG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gcm91dGVyV2FybmluZztcblx0ZXhwb3J0cy5fcmVzZXRXYXJuZWQgPSBfcmVzZXRXYXJuZWQ7XG5cblx0dmFyIF93YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Myk7XG5cblx0dmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0dmFyIHdhcm5lZCA9IHt9O1xuXG5cdGZ1bmN0aW9uIHJvdXRlcldhcm5pbmcoZmFsc2VUb1dhcm4sIG1lc3NhZ2UpIHtcblx0ICAvLyBPbmx5IGlzc3VlIGRlcHJlY2F0aW9uIHdhcm5pbmdzIG9uY2UuXG5cdCAgaWYgKG1lc3NhZ2UuaW5kZXhPZignZGVwcmVjYXRlZCcpICE9PSAtMSkge1xuXHQgICAgaWYgKHdhcm5lZFttZXNzYWdlXSkge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cblx0ICAgIHdhcm5lZFttZXNzYWdlXSA9IHRydWU7XG5cdCAgfVxuXG5cdCAgbWVzc2FnZSA9ICdbcmVhY3Qtcm91dGVyXSAnICsgbWVzc2FnZTtcblxuXHQgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgfVxuXG5cdCAgX3dhcm5pbmcyLmRlZmF1bHQuYXBwbHkodW5kZWZpbmVkLCBbZmFsc2VUb1dhcm4sIG1lc3NhZ2VdLmNvbmNhdChhcmdzKSk7XG5cdH1cblxuXHRmdW5jdGlvbiBfcmVzZXRXYXJuZWQoKSB7XG5cdCAgd2FybmVkID0ge307XG5cdH1cblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8yX187XG5cbi8qKiovIH0sXG4vKiAzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICovXG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdC8qKlxuXHQgKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG5cdCAqXG5cdCAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG5cdCAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuXHQgKiBleHBlY3RpbmcuXG5cdCAqXG5cdCAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG5cdCAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cblx0ICovXG5cblx0dmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG5cdCAgaWYgKHRydWUpIHtcblx0ICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgaWYgKCFjb25kaXRpb24pIHtcblx0ICAgIHZhciBlcnJvcjtcblx0ICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICBlcnJvciA9IG5ldyBFcnJvcihcblx0ICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG5cdCAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuXHQgICAgICApO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG5cdCAgICAgIHZhciBhcmdJbmRleCA9IDA7XG5cdCAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuXHQgICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG5cdCAgICAgICk7XG5cdCAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG5cdCAgICB9XG5cblx0ICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcblx0ICAgIHRocm93IGVycm9yO1xuXHQgIH1cblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcblxuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyoqXG5cdCAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG5cdCAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdCAqXG5cdCAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuXHQgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcblx0ICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG5cdCAqL1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvKipcblx0ICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuXHQgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG5cdCAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG5cdCAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuXHQgKi9cblxuXHR2YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cblx0aWYgKHRydWUpIHtcblx0ICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcblx0ICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXHQgICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuXHQgICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuXHQgICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG5cdCAgICB9XG5cdCAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgdGhyb3cgbmV3IEVycm9yKFxuXHQgICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcblx0ICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcblx0ICAgICAgKTtcblx0ICAgIH1cblxuXHQgICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoXG5cdCAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuXHQgICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcblx0ICAgICAgKTtcblx0ICAgIH1cblxuXHQgICAgaWYgKCFjb25kaXRpb24pIHtcblx0ICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcblx0ICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG5cdCAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuXHQgICAgICB9XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG5cdCAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuXHQgICAgICB9IGNhdGNoKHgpIHt9XG5cdCAgICB9XG5cdCAgfTtcblx0fVxuXG5cdG1vZHVsZS5leHBvcnRzID0gd2FybmluZztcblxuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuXHRleHBvcnRzLmlzUmVhY3RDaGlsZHJlbiA9IGlzUmVhY3RDaGlsZHJlbjtcblx0ZXhwb3J0cy5jcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQgPSBjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQ7XG5cdGV4cG9ydHMuY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4gPSBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbjtcblx0ZXhwb3J0cy5jcmVhdGVSb3V0ZXMgPSBjcmVhdGVSb3V0ZXM7XG5cblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBpc1ZhbGlkQ2hpbGQob2JqZWN0KSB7XG5cdCAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChvYmplY3QpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNSZWFjdENoaWxkcmVuKG9iamVjdCkge1xuXHQgIHJldHVybiBpc1ZhbGlkQ2hpbGQob2JqZWN0KSB8fCBBcnJheS5pc0FycmF5KG9iamVjdCkgJiYgb2JqZWN0LmV2ZXJ5KGlzVmFsaWRDaGlsZCk7XG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVSb3V0ZShkZWZhdWx0UHJvcHMsIHByb3BzKSB7XG5cdCAgcmV0dXJuIF9leHRlbmRzKHt9LCBkZWZhdWx0UHJvcHMsIHByb3BzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50KSB7XG5cdCAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG5cdCAgdmFyIHJvdXRlID0gY3JlYXRlUm91dGUodHlwZS5kZWZhdWx0UHJvcHMsIGVsZW1lbnQucHJvcHMpO1xuXG5cdCAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG5cdCAgICB2YXIgY2hpbGRSb3V0ZXMgPSBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbihyb3V0ZS5jaGlsZHJlbiwgcm91dGUpO1xuXG5cdCAgICBpZiAoY2hpbGRSb3V0ZXMubGVuZ3RoKSByb3V0ZS5jaGlsZFJvdXRlcyA9IGNoaWxkUm91dGVzO1xuXG5cdCAgICBkZWxldGUgcm91dGUuY2hpbGRyZW47XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHJvdXRlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSByb3V0ZXMgb2JqZWN0IGZyb20gdGhlIGdpdmVuIFJlYWN0Q2hpbGRyZW4uIEpTWFxuXHQgKiBwcm92aWRlcyBhIGNvbnZlbmllbnQgd2F5IHRvIHZpc3VhbGl6ZSBob3cgcm91dGVzIGluIHRoZSBoaWVyYXJjaHkgYXJlXG5cdCAqIG5lc3RlZC5cblx0ICpcblx0ICogICBpbXBvcnQgeyBSb3V0ZSwgY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4gfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5cdCAqXG5cdCAqICAgY29uc3Qgcm91dGVzID0gY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4oXG5cdCAqICAgICA8Um91dGUgY29tcG9uZW50PXtBcHB9PlxuXHQgKiAgICAgICA8Um91dGUgcGF0aD1cImhvbWVcIiBjb21wb25lbnQ9e0Rhc2hib2FyZH0vPlxuXHQgKiAgICAgICA8Um91dGUgcGF0aD1cIm5ld3NcIiBjb21wb25lbnQ9e05ld3NGZWVkfS8+XG5cdCAqICAgICA8L1JvdXRlPlxuXHQgKiAgIClcblx0ICpcblx0ICogTm90ZTogVGhpcyBtZXRob2QgaXMgYXV0b21hdGljYWxseSB1c2VkIHdoZW4geW91IHByb3ZpZGUgPFJvdXRlPiBjaGlsZHJlblxuXHQgKiB0byBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRSb3V0ZSkge1xuXHQgIHZhciByb3V0ZXMgPSBbXTtcblxuXHQgIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHQgICAgaWYgKF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuXHQgICAgICAvLyBDb21wb25lbnQgY2xhc3NlcyBtYXkgaGF2ZSBhIHN0YXRpYyBjcmVhdGUqIG1ldGhvZC5cblx0ICAgICAgaWYgKGVsZW1lbnQudHlwZS5jcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQpIHtcblx0ICAgICAgICB2YXIgcm91dGUgPSBlbGVtZW50LnR5cGUuY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQsIHBhcmVudFJvdXRlKTtcblxuXHQgICAgICAgIGlmIChyb3V0ZSkgcm91dGVzLnB1c2gocm91dGUpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJvdXRlcy5wdXNoKGNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50KSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9KTtcblxuXHQgIHJldHVybiByb3V0ZXM7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiByb3V0ZXMgZnJvbSB0aGUgZ2l2ZW4gb2JqZWN0IHdoaWNoXG5cdCAqIG1heSBiZSBhIEpTWCByb3V0ZSwgYSBwbGFpbiBvYmplY3Qgcm91dGUsIG9yIGFuIGFycmF5IG9mIGVpdGhlci5cblx0ICovXG5cdGZ1bmN0aW9uIGNyZWF0ZVJvdXRlcyhyb3V0ZXMpIHtcblx0ICBpZiAoaXNSZWFjdENoaWxkcmVuKHJvdXRlcykpIHtcblx0ICAgIHJvdXRlcyA9IGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuKHJvdXRlcyk7XG5cdCAgfSBlbHNlIGlmIChyb3V0ZXMgJiYgIUFycmF5LmlzQXJyYXkocm91dGVzKSkge1xuXHQgICAgcm91dGVzID0gW3JvdXRlc107XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHJvdXRlcztcblx0fVxuXG4vKioqLyB9LFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdGV4cG9ydHMucm91dGVzID0gZXhwb3J0cy5yb3V0ZSA9IGV4cG9ydHMuY29tcG9uZW50cyA9IGV4cG9ydHMuY29tcG9uZW50ID0gZXhwb3J0cy5oaXN0b3J5ID0gdW5kZWZpbmVkO1xuXHRleHBvcnRzLmZhbHN5ID0gZmFsc3k7XG5cblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblx0dmFyIGZ1bmMgPSBfcmVhY3QuUHJvcFR5cGVzLmZ1bmM7XG5cdHZhciBvYmplY3QgPSBfcmVhY3QuUHJvcFR5cGVzLm9iamVjdDtcblx0dmFyIGFycmF5T2YgPSBfcmVhY3QuUHJvcFR5cGVzLmFycmF5T2Y7XG5cdHZhciBvbmVPZlR5cGUgPSBfcmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZTtcblx0dmFyIGVsZW1lbnQgPSBfcmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQ7XG5cdHZhciBzaGFwZSA9IF9yZWFjdC5Qcm9wVHlwZXMuc2hhcGU7XG5cdHZhciBzdHJpbmcgPSBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZztcblx0ZnVuY3Rpb24gZmFsc3kocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG5cdCAgaWYgKHByb3BzW3Byb3BOYW1lXSkgcmV0dXJuIG5ldyBFcnJvcignPCcgKyBjb21wb25lbnROYW1lICsgJz4gc2hvdWxkIG5vdCBoYXZlIGEgXCInICsgcHJvcE5hbWUgKyAnXCIgcHJvcCcpO1xuXHR9XG5cblx0dmFyIGhpc3RvcnkgPSBleHBvcnRzLmhpc3RvcnkgPSBzaGFwZSh7XG5cdCAgbGlzdGVuOiBmdW5jLmlzUmVxdWlyZWQsXG5cdCAgcHVzaDogZnVuYy5pc1JlcXVpcmVkLFxuXHQgIHJlcGxhY2U6IGZ1bmMuaXNSZXF1aXJlZCxcblx0ICBnbzogZnVuYy5pc1JlcXVpcmVkLFxuXHQgIGdvQmFjazogZnVuYy5pc1JlcXVpcmVkLFxuXHQgIGdvRm9yd2FyZDogZnVuYy5pc1JlcXVpcmVkXG5cdH0pO1xuXG5cdHZhciBjb21wb25lbnQgPSBleHBvcnRzLmNvbXBvbmVudCA9IG9uZU9mVHlwZShbZnVuYywgc3RyaW5nXSk7XG5cdHZhciBjb21wb25lbnRzID0gZXhwb3J0cy5jb21wb25lbnRzID0gb25lT2ZUeXBlKFtjb21wb25lbnQsIG9iamVjdF0pO1xuXHR2YXIgcm91dGUgPSBleHBvcnRzLnJvdXRlID0gb25lT2ZUeXBlKFtvYmplY3QsIGVsZW1lbnRdKTtcblx0dmFyIHJvdXRlcyA9IGV4cG9ydHMucm91dGVzID0gb25lT2ZUeXBlKFtyb3V0ZSwgYXJyYXlPZihyb3V0ZSldKTtcblxuLyoqKi8gfSxcbi8qIDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRleHBvcnRzLmV4dHJhY3RQYXRoID0gZXh0cmFjdFBhdGg7XG5cdGV4cG9ydHMucGFyc2VQYXRoID0gcGFyc2VQYXRoO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuXHR2YXIgX3dhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdHZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuXHRmdW5jdGlvbiBleHRyYWN0UGF0aChzdHJpbmcpIHtcblx0ICB2YXIgbWF0Y2ggPSBzdHJpbmcubWF0Y2goL15odHRwcz86XFwvXFwvW15cXC9dKi8pO1xuXG5cdCAgaWYgKG1hdGNoID09IG51bGwpIHJldHVybiBzdHJpbmc7XG5cblx0ICByZXR1cm4gc3RyaW5nLnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcblx0ICB2YXIgcGF0aG5hbWUgPSBleHRyYWN0UGF0aChwYXRoKTtcblx0ICB2YXIgc2VhcmNoID0gJyc7XG5cdCAgdmFyIGhhc2ggPSAnJztcblxuXHQgICB0cnVlID8gX3dhcm5pbmcyWydkZWZhdWx0J10ocGF0aCA9PT0gcGF0aG5hbWUsICdBIHBhdGggbXVzdCBiZSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggb25seSwgbm90IGEgZnVsbHkgcXVhbGlmaWVkIFVSTCBsaWtlIFwiJXNcIicsIHBhdGgpIDogdW5kZWZpbmVkO1xuXG5cdCAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblx0ICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuXHQgICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cmluZyhoYXNoSW5kZXgpO1xuXHQgICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHJpbmcoMCwgaGFzaEluZGV4KTtcblx0ICB9XG5cblx0ICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cdCAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuXHQgICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyaW5nKHNlYXJjaEluZGV4KTtcblx0ICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyaW5nKDAsIHNlYXJjaEluZGV4KTtcblx0ICB9XG5cblx0ICBpZiAocGF0aG5hbWUgPT09ICcnKSBwYXRobmFtZSA9ICcvJztcblxuXHQgIHJldHVybiB7XG5cdCAgICBwYXRobmFtZTogcGF0aG5hbWUsXG5cdCAgICBzZWFyY2g6IHNlYXJjaCxcblx0ICAgIGhhc2g6IGhhc2hcblx0ICB9O1xuXHR9XG5cbi8qKiovIH0sXG4vKiA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0ZXhwb3J0cy5jb21waWxlUGF0dGVybiA9IGNvbXBpbGVQYXR0ZXJuO1xuXHRleHBvcnRzLm1hdGNoUGF0dGVybiA9IG1hdGNoUGF0dGVybjtcblx0ZXhwb3J0cy5nZXRQYXJhbU5hbWVzID0gZ2V0UGFyYW1OYW1lcztcblx0ZXhwb3J0cy5nZXRQYXJhbXMgPSBnZXRQYXJhbXM7XG5cdGV4cG9ydHMuZm9ybWF0UGF0dGVybiA9IGZvcm1hdFBhdHRlcm47XG5cblx0dmFyIF9pbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cdHZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG5cdCAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xuXHR9XG5cblx0ZnVuY3Rpb24gX2NvbXBpbGVQYXR0ZXJuKHBhdHRlcm4pIHtcblx0ICB2YXIgcmVnZXhwU291cmNlID0gJyc7XG5cdCAgdmFyIHBhcmFtTmFtZXMgPSBbXTtcblx0ICB2YXIgdG9rZW5zID0gW107XG5cblx0ICB2YXIgbWF0Y2ggPSB2b2lkIDAsXG5cdCAgICAgIGxhc3RJbmRleCA9IDAsXG5cdCAgICAgIG1hdGNoZXIgPSAvOihbYS16QS1aXyRdW2EtekEtWjAtOV8kXSopfFxcKlxcKnxcXCp8XFwofFxcKS9nO1xuXHQgIHdoaWxlIChtYXRjaCA9IG1hdGNoZXIuZXhlYyhwYXR0ZXJuKSkge1xuXHQgICAgaWYgKG1hdGNoLmluZGV4ICE9PSBsYXN0SW5kZXgpIHtcblx0ICAgICAgdG9rZW5zLnB1c2gocGF0dGVybi5zbGljZShsYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG5cdCAgICAgIHJlZ2V4cFNvdXJjZSArPSBlc2NhcGVSZWdFeHAocGF0dGVybi5zbGljZShsYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG5cdCAgICB9XG5cblx0ICAgIGlmIChtYXRjaFsxXSkge1xuXHQgICAgICByZWdleHBTb3VyY2UgKz0gJyhbXi9dKyknO1xuXHQgICAgICBwYXJhbU5hbWVzLnB1c2gobWF0Y2hbMV0pO1xuXHQgICAgfSBlbHNlIGlmIChtYXRjaFswXSA9PT0gJyoqJykge1xuXHQgICAgICByZWdleHBTb3VyY2UgKz0gJyguKiknO1xuXHQgICAgICBwYXJhbU5hbWVzLnB1c2goJ3NwbGF0Jyk7XG5cdCAgICB9IGVsc2UgaWYgKG1hdGNoWzBdID09PSAnKicpIHtcblx0ICAgICAgcmVnZXhwU291cmNlICs9ICcoLio/KSc7XG5cdCAgICAgIHBhcmFtTmFtZXMucHVzaCgnc3BsYXQnKTtcblx0ICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0gPT09ICcoJykge1xuXHQgICAgICByZWdleHBTb3VyY2UgKz0gJyg/Oic7XG5cdCAgICB9IGVsc2UgaWYgKG1hdGNoWzBdID09PSAnKScpIHtcblx0ICAgICAgcmVnZXhwU291cmNlICs9ICcpPyc7XG5cdCAgICB9XG5cblx0ICAgIHRva2Vucy5wdXNoKG1hdGNoWzBdKTtcblxuXHQgICAgbGFzdEluZGV4ID0gbWF0Y2hlci5sYXN0SW5kZXg7XG5cdCAgfVxuXG5cdCAgaWYgKGxhc3RJbmRleCAhPT0gcGF0dGVybi5sZW5ndGgpIHtcblx0ICAgIHRva2Vucy5wdXNoKHBhdHRlcm4uc2xpY2UobGFzdEluZGV4LCBwYXR0ZXJuLmxlbmd0aCkpO1xuXHQgICAgcmVnZXhwU291cmNlICs9IGVzY2FwZVJlZ0V4cChwYXR0ZXJuLnNsaWNlKGxhc3RJbmRleCwgcGF0dGVybi5sZW5ndGgpKTtcblx0ICB9XG5cblx0ICByZXR1cm4ge1xuXHQgICAgcGF0dGVybjogcGF0dGVybixcblx0ICAgIHJlZ2V4cFNvdXJjZTogcmVnZXhwU291cmNlLFxuXHQgICAgcGFyYW1OYW1lczogcGFyYW1OYW1lcyxcblx0ICAgIHRva2VuczogdG9rZW5zXG5cdCAgfTtcblx0fVxuXG5cdHZhciBDb21waWxlZFBhdHRlcm5zQ2FjaGUgPSB7fTtcblxuXHRmdW5jdGlvbiBjb21waWxlUGF0dGVybihwYXR0ZXJuKSB7XG5cdCAgaWYgKCEocGF0dGVybiBpbiBDb21waWxlZFBhdHRlcm5zQ2FjaGUpKSBDb21waWxlZFBhdHRlcm5zQ2FjaGVbcGF0dGVybl0gPSBfY29tcGlsZVBhdHRlcm4ocGF0dGVybik7XG5cblx0ICByZXR1cm4gQ29tcGlsZWRQYXR0ZXJuc0NhY2hlW3BhdHRlcm5dO1xuXHR9XG5cblx0LyoqXG5cdCAqIEF0dGVtcHRzIHRvIG1hdGNoIGEgcGF0dGVybiBvbiB0aGUgZ2l2ZW4gcGF0aG5hbWUuIFBhdHRlcm5zIG1heSB1c2Vcblx0ICogdGhlIGZvbGxvd2luZyBzcGVjaWFsIGNoYXJhY3RlcnM6XG5cdCAqXG5cdCAqIC0gOnBhcmFtTmFtZSAgICAgTWF0Y2hlcyBhIFVSTCBzZWdtZW50IHVwIHRvIHRoZSBuZXh0IC8sID8sIG9yICMuIFRoZVxuXHQgKiAgICAgICAgICAgICAgICAgIGNhcHR1cmVkIHN0cmluZyBpcyBjb25zaWRlcmVkIGEgXCJwYXJhbVwiXG5cdCAqIC0gKCkgICAgICAgICAgICAgV3JhcHMgYSBzZWdtZW50IG9mIHRoZSBVUkwgdGhhdCBpcyBvcHRpb25hbFxuXHQgKiAtICogICAgICAgICAgICAgIENvbnN1bWVzIChub24tZ3JlZWR5KSBhbGwgY2hhcmFjdGVycyB1cCB0byB0aGUgbmV4dFxuXHQgKiAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBpbiB0aGUgcGF0dGVybiwgb3IgdG8gdGhlIGVuZCBvZiB0aGUgVVJMIGlmXG5cdCAqICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm9uZVxuXHQgKiAtICoqICAgICAgICAgICAgIENvbnN1bWVzIChncmVlZHkpIGFsbCBjaGFyYWN0ZXJzIHVwIHRvIHRoZSBuZXh0IGNoYXJhY3RlclxuXHQgKiAgICAgICAgICAgICAgICAgIGluIHRoZSBwYXR0ZXJuLCBvciB0byB0aGUgZW5kIG9mIHRoZSBVUkwgaWYgdGhlcmUgaXMgbm9uZVxuXHQgKlxuXHQgKiAgVGhlIGZ1bmN0aW9uIGNhbGxzIGNhbGxiYWNrKGVycm9yLCBtYXRjaGVkKSB3aGVuIGZpbmlzaGVkLlxuXHQgKiBUaGUgcmV0dXJuIHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcblx0ICpcblx0ICogLSByZW1haW5pbmdQYXRobmFtZVxuXHQgKiAtIHBhcmFtTmFtZXNcblx0ICogLSBwYXJhbVZhbHVlc1xuXHQgKi9cblx0ZnVuY3Rpb24gbWF0Y2hQYXR0ZXJuKHBhdHRlcm4sIHBhdGhuYW1lKSB7XG5cdCAgLy8gRW5zdXJlIHBhdHRlcm4gc3RhcnRzIHdpdGggbGVhZGluZyBzbGFzaCBmb3IgY29uc2lzdGVuY3kgd2l0aCBwYXRobmFtZS5cblx0ICBpZiAocGF0dGVybi5jaGFyQXQoMCkgIT09ICcvJykge1xuXHQgICAgcGF0dGVybiA9ICcvJyArIHBhdHRlcm47XG5cdCAgfVxuXG5cdCAgdmFyIF9jb21waWxlUGF0dGVybjIgPSBjb21waWxlUGF0dGVybihwYXR0ZXJuKTtcblxuXHQgIHZhciByZWdleHBTb3VyY2UgPSBfY29tcGlsZVBhdHRlcm4yLnJlZ2V4cFNvdXJjZTtcblx0ICB2YXIgcGFyYW1OYW1lcyA9IF9jb21waWxlUGF0dGVybjIucGFyYW1OYW1lcztcblx0ICB2YXIgdG9rZW5zID0gX2NvbXBpbGVQYXR0ZXJuMi50b2tlbnM7XG5cblxuXHQgIGlmIChwYXR0ZXJuLmNoYXJBdChwYXR0ZXJuLmxlbmd0aCAtIDEpICE9PSAnLycpIHtcblx0ICAgIHJlZ2V4cFNvdXJjZSArPSAnLz8nOyAvLyBBbGxvdyBvcHRpb25hbCBwYXRoIHNlcGFyYXRvciBhdCBlbmQuXG5cdCAgfVxuXG5cdCAgLy8gU3BlY2lhbC1jYXNlIHBhdHRlcm5zIGxpa2UgJyonIGZvciBjYXRjaC1hbGwgcm91dGVzLlxuXHQgIGlmICh0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdID09PSAnKicpIHtcblx0ICAgIHJlZ2V4cFNvdXJjZSArPSAnJCc7XG5cdCAgfVxuXG5cdCAgdmFyIG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobmV3IFJlZ0V4cCgnXicgKyByZWdleHBTb3VyY2UsICdpJykpO1xuXHQgIGlmIChtYXRjaCA9PSBudWxsKSB7XG5cdCAgICByZXR1cm4gbnVsbDtcblx0ICB9XG5cblx0ICB2YXIgbWF0Y2hlZFBhdGggPSBtYXRjaFswXTtcblx0ICB2YXIgcmVtYWluaW5nUGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIobWF0Y2hlZFBhdGgubGVuZ3RoKTtcblxuXHQgIGlmIChyZW1haW5pbmdQYXRobmFtZSkge1xuXHQgICAgLy8gUmVxdWlyZSB0aGF0IHRoZSBtYXRjaCBlbmRzIGF0IGEgcGF0aCBzZXBhcmF0b3IsIGlmIHdlIGRpZG4ndCBtYXRjaFxuXHQgICAgLy8gdGhlIGZ1bGwgcGF0aCwgc28gYW55IHJlbWFpbmluZyBwYXRobmFtZSBpcyBhIG5ldyBwYXRoIHNlZ21lbnQuXG5cdCAgICBpZiAobWF0Y2hlZFBhdGguY2hhckF0KG1hdGNoZWRQYXRoLmxlbmd0aCAtIDEpICE9PSAnLycpIHtcblx0ICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICB9XG5cblx0ICAgIC8vIElmIHRoZXJlIGlzIGEgcmVtYWluaW5nIHBhdGhuYW1lLCB0cmVhdCB0aGUgcGF0aCBzZXBhcmF0b3IgYXMgcGFydCBvZlxuXHQgICAgLy8gdGhlIHJlbWFpbmluZyBwYXRobmFtZSBmb3IgcHJvcGVybHkgY29udGludWluZyB0aGUgbWF0Y2guXG5cdCAgICByZW1haW5pbmdQYXRobmFtZSA9ICcvJyArIHJlbWFpbmluZ1BhdGhuYW1lO1xuXHQgIH1cblxuXHQgIHJldHVybiB7XG5cdCAgICByZW1haW5pbmdQYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWUsXG5cdCAgICBwYXJhbU5hbWVzOiBwYXJhbU5hbWVzLFxuXHQgICAgcGFyYW1WYWx1ZXM6IG1hdGNoLnNsaWNlKDEpLm1hcChmdW5jdGlvbiAodikge1xuXHQgICAgICByZXR1cm4gdiAmJiBkZWNvZGVVUklDb21wb25lbnQodik7XG5cdCAgICB9KVxuXHQgIH07XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQYXJhbU5hbWVzKHBhdHRlcm4pIHtcblx0ICByZXR1cm4gY29tcGlsZVBhdHRlcm4ocGF0dGVybikucGFyYW1OYW1lcztcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFBhcmFtcyhwYXR0ZXJuLCBwYXRobmFtZSkge1xuXHQgIHZhciBtYXRjaCA9IG1hdGNoUGF0dGVybihwYXR0ZXJuLCBwYXRobmFtZSk7XG5cdCAgaWYgKCFtYXRjaCkge1xuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfVxuXG5cdCAgdmFyIHBhcmFtTmFtZXMgPSBtYXRjaC5wYXJhbU5hbWVzO1xuXHQgIHZhciBwYXJhbVZhbHVlcyA9IG1hdGNoLnBhcmFtVmFsdWVzO1xuXG5cdCAgdmFyIHBhcmFtcyA9IHt9O1xuXG5cdCAgcGFyYW1OYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbU5hbWUsIGluZGV4KSB7XG5cdCAgICBwYXJhbXNbcGFyYW1OYW1lXSA9IHBhcmFtVmFsdWVzW2luZGV4XTtcblx0ICB9KTtcblxuXHQgIHJldHVybiBwYXJhbXM7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHZlcnNpb24gb2YgdGhlIGdpdmVuIHBhdHRlcm4gd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLiBUaHJvd3Ncblx0ICogaWYgdGhlcmUgaXMgYSBkeW5hbWljIHNlZ21lbnQgb2YgdGhlIHBhdHRlcm4gZm9yIHdoaWNoIHRoZXJlIGlzIG5vIHBhcmFtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZm9ybWF0UGF0dGVybihwYXR0ZXJuLCBwYXJhbXMpIHtcblx0ICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG5cblx0ICB2YXIgX2NvbXBpbGVQYXR0ZXJuMyA9IGNvbXBpbGVQYXR0ZXJuKHBhdHRlcm4pO1xuXG5cdCAgdmFyIHRva2VucyA9IF9jb21waWxlUGF0dGVybjMudG9rZW5zO1xuXG5cdCAgdmFyIHBhcmVuQ291bnQgPSAwLFxuXHQgICAgICBwYXRobmFtZSA9ICcnLFxuXHQgICAgICBzcGxhdEluZGV4ID0gMDtcblxuXHQgIHZhciB0b2tlbiA9IHZvaWQgMCxcblx0ICAgICAgcGFyYW1OYW1lID0gdm9pZCAwLFxuXHQgICAgICBwYXJhbVZhbHVlID0gdm9pZCAwO1xuXHQgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2tlbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0ICAgIHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdCAgICBpZiAodG9rZW4gPT09ICcqJyB8fCB0b2tlbiA9PT0gJyoqJykge1xuXHQgICAgICBwYXJhbVZhbHVlID0gQXJyYXkuaXNBcnJheShwYXJhbXMuc3BsYXQpID8gcGFyYW1zLnNwbGF0W3NwbGF0SW5kZXgrK10gOiBwYXJhbXMuc3BsYXQ7XG5cblx0ICAgICAgIShwYXJhbVZhbHVlICE9IG51bGwgfHwgcGFyZW5Db3VudCA+IDApID8gIHRydWUgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UsICdNaXNzaW5nIHNwbGF0ICMlcyBmb3IgcGF0aCBcIiVzXCInLCBzcGxhdEluZGV4LCBwYXR0ZXJuKSA6ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSkgOiB2b2lkIDA7XG5cblx0ICAgICAgaWYgKHBhcmFtVmFsdWUgIT0gbnVsbCkgcGF0aG5hbWUgKz0gZW5jb2RlVVJJKHBhcmFtVmFsdWUpO1xuXHQgICAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJygnKSB7XG5cdCAgICAgIHBhcmVuQ291bnQgKz0gMTtcblx0ICAgIH0gZWxzZSBpZiAodG9rZW4gPT09ICcpJykge1xuXHQgICAgICBwYXJlbkNvdW50IC09IDE7XG5cdCAgICB9IGVsc2UgaWYgKHRva2VuLmNoYXJBdCgwKSA9PT0gJzonKSB7XG5cdCAgICAgIHBhcmFtTmFtZSA9IHRva2VuLnN1YnN0cmluZygxKTtcblx0ICAgICAgcGFyYW1WYWx1ZSA9IHBhcmFtc1twYXJhbU5hbWVdO1xuXG5cdCAgICAgICEocGFyYW1WYWx1ZSAhPSBudWxsIHx8IHBhcmVuQ291bnQgPiAwKSA/ICB0cnVlID8gKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlLCAnTWlzc2luZyBcIiVzXCIgcGFyYW1ldGVyIGZvciBwYXRoIFwiJXNcIicsIHBhcmFtTmFtZSwgcGF0dGVybikgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuXG5cdCAgICAgIGlmIChwYXJhbVZhbHVlICE9IG51bGwpIHBhdGhuYW1lICs9IGVuY29kZVVSSUNvbXBvbmVudChwYXJhbVZhbHVlKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHBhdGhuYW1lICs9IHRva2VuO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBwYXRobmFtZS5yZXBsYWNlKC9cXC8rL2csICcvJyk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qKlxuXHQgKiBJbmRpY2F0ZXMgdGhhdCBuYXZpZ2F0aW9uIHdhcyBjYXVzZWQgYnkgYSBjYWxsIHRvIGhpc3RvcnkucHVzaC5cblx0ICovXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHR2YXIgUFVTSCA9ICdQVVNIJztcblxuXHRleHBvcnRzLlBVU0ggPSBQVVNIO1xuXHQvKipcblx0ICogSW5kaWNhdGVzIHRoYXQgbmF2aWdhdGlvbiB3YXMgY2F1c2VkIGJ5IGEgY2FsbCB0byBoaXN0b3J5LnJlcGxhY2UuXG5cdCAqL1xuXHR2YXIgUkVQTEFDRSA9ICdSRVBMQUNFJztcblxuXHRleHBvcnRzLlJFUExBQ0UgPSBSRVBMQUNFO1xuXHQvKipcblx0ICogSW5kaWNhdGVzIHRoYXQgbmF2aWdhdGlvbiB3YXMgY2F1c2VkIGJ5IHNvbWUgb3RoZXIgYWN0aW9uIHN1Y2hcblx0ICogYXMgdXNpbmcgYSBicm93c2VyJ3MgYmFjay9mb3J3YXJkIGJ1dHRvbnMgYW5kL29yIG1hbnVhbGx5IG1hbmlwdWxhdGluZ1xuXHQgKiB0aGUgVVJMIGluIGEgYnJvd3NlcidzIGxvY2F0aW9uIGJhci4gVGhpcyBpcyB0aGUgZGVmYXVsdC5cblx0ICpcblx0ICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3dFdmVudEhhbmRsZXJzL29ucG9wc3RhdGVcblx0ICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cdCAqL1xuXHR2YXIgUE9QID0gJ1BPUCc7XG5cblx0ZXhwb3J0cy5QT1AgPSBQT1A7XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcblx0ICBQVVNIOiBQVVNILFxuXHQgIFJFUExBQ0U6IFJFUExBQ0UsXG5cdCAgUE9QOiBQT1Bcblx0fTtcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdHZhciBfaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuXHR2YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5cdHZhciBfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG5cdHZhciBfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzKTtcblxuXHR2YXIgX2dldFJvdXRlUGFyYW1zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nik7XG5cblx0dmFyIF9nZXRSb3V0ZVBhcmFtczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRSb3V0ZVBhcmFtcyk7XG5cblx0dmFyIF9Sb3V0ZVV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXHR2YXIgX3JvdXRlcldhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5cdHZhciBfcm91dGVyV2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yb3V0ZXJXYXJuaW5nKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdHZhciBfUmVhY3QkUHJvcFR5cGVzID0gX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcztcblx0dmFyIGFycmF5ID0gX1JlYWN0JFByb3BUeXBlcy5hcnJheTtcblx0dmFyIGZ1bmMgPSBfUmVhY3QkUHJvcFR5cGVzLmZ1bmM7XG5cdHZhciBvYmplY3QgPSBfUmVhY3QkUHJvcFR5cGVzLm9iamVjdDtcblxuXHQvKipcblx0ICogQSA8Um91dGVyQ29udGV4dD4gcmVuZGVycyB0aGUgY29tcG9uZW50IHRyZWUgZm9yIGEgZ2l2ZW4gcm91dGVyIHN0YXRlXG5cdCAqIGFuZCBzZXRzIHRoZSBoaXN0b3J5IG9iamVjdCBhbmQgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gY29udGV4dC5cblx0ICovXG5cblx0dmFyIFJvdXRlckNvbnRleHQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuXHQgIGRpc3BsYXlOYW1lOiAnUm91dGVyQ29udGV4dCcsXG5cblxuXHQgIHByb3BUeXBlczoge1xuXHQgICAgaGlzdG9yeTogb2JqZWN0LFxuXHQgICAgcm91dGVyOiBvYmplY3QuaXNSZXF1aXJlZCxcblx0ICAgIGxvY2F0aW9uOiBvYmplY3QuaXNSZXF1aXJlZCxcblx0ICAgIHJvdXRlczogYXJyYXkuaXNSZXF1aXJlZCxcblx0ICAgIHBhcmFtczogb2JqZWN0LmlzUmVxdWlyZWQsXG5cdCAgICBjb21wb25lbnRzOiBhcnJheS5pc1JlcXVpcmVkLFxuXHQgICAgY3JlYXRlRWxlbWVudDogZnVuYy5pc1JlcXVpcmVkXG5cdCAgfSxcblxuXHQgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgY3JlYXRlRWxlbWVudDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnRcblx0ICAgIH07XG5cdCAgfSxcblxuXG5cdCAgY2hpbGRDb250ZXh0VHlwZXM6IHtcblx0ICAgIGhpc3Rvcnk6IG9iamVjdCxcblx0ICAgIGxvY2F0aW9uOiBvYmplY3QuaXNSZXF1aXJlZCxcblx0ICAgIHJvdXRlcjogb2JqZWN0LmlzUmVxdWlyZWRcblx0ICB9LFxuXG5cdCAgZ2V0Q2hpbGRDb250ZXh0OiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG5cdCAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcblx0ICAgIHZhciByb3V0ZXIgPSBfcHJvcHMucm91dGVyO1xuXHQgICAgdmFyIGhpc3RvcnkgPSBfcHJvcHMuaGlzdG9yeTtcblx0ICAgIHZhciBsb2NhdGlvbiA9IF9wcm9wcy5sb2NhdGlvbjtcblxuXHQgICAgaWYgKCFyb3V0ZXIpIHtcblx0ICAgICAgIHRydWUgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnYDxSb3V0ZXJDb250ZXh0PmAgZXhwZWN0cyBhIGByb3V0ZXJgIHJhdGhlciB0aGFuIGEgYGhpc3RvcnlgJykgOiB2b2lkIDA7XG5cblx0ICAgICAgcm91dGVyID0gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcblx0ICAgICAgICBzZXRSb3V0ZUxlYXZlSG9vazogaGlzdG9yeS5saXN0ZW5CZWZvcmVMZWF2aW5nUm91dGVcblx0ICAgICAgfSk7XG5cdCAgICAgIGRlbGV0ZSByb3V0ZXIubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlO1xuXHQgICAgfVxuXG5cdCAgICBpZiAodHJ1ZSkge1xuXHQgICAgICBsb2NhdGlvbiA9ICgwLCBfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllczIuZGVmYXVsdCkobG9jYXRpb24sICdgY29udGV4dC5sb2NhdGlvbmAgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBhIHJvdXRlIGNvbXBvbmVudFxcJ3MgYHByb3BzLmxvY2F0aW9uYCBpbnN0ZWFkLiBodHRwOi8vdGlueS5jYy9yb3V0ZXItYWNjZXNzaW5nbG9jYXRpb24nKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHsgaGlzdG9yeTogaGlzdG9yeSwgbG9jYXRpb246IGxvY2F0aW9uLCByb3V0ZXI6IHJvdXRlciB9O1xuXHQgIH0sXG5cdCAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSB7XG5cdCAgICByZXR1cm4gY29tcG9uZW50ID09IG51bGwgPyBudWxsIDogdGhpcy5wcm9wcy5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuXHQgIH0sXG5cdCAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHM7XG5cdCAgICB2YXIgaGlzdG9yeSA9IF9wcm9wczIuaGlzdG9yeTtcblx0ICAgIHZhciBsb2NhdGlvbiA9IF9wcm9wczIubG9jYXRpb247XG5cdCAgICB2YXIgcm91dGVzID0gX3Byb3BzMi5yb3V0ZXM7XG5cdCAgICB2YXIgcGFyYW1zID0gX3Byb3BzMi5wYXJhbXM7XG5cdCAgICB2YXIgY29tcG9uZW50cyA9IF9wcm9wczIuY29tcG9uZW50cztcblxuXHQgICAgdmFyIGVsZW1lbnQgPSBudWxsO1xuXG5cdCAgICBpZiAoY29tcG9uZW50cykge1xuXHQgICAgICBlbGVtZW50ID0gY29tcG9uZW50cy5yZWR1Y2VSaWdodChmdW5jdGlvbiAoZWxlbWVudCwgY29tcG9uZW50cywgaW5kZXgpIHtcblx0ICAgICAgICBpZiAoY29tcG9uZW50cyA9PSBudWxsKSByZXR1cm4gZWxlbWVudDsgLy8gRG9uJ3QgY3JlYXRlIG5ldyBjaGlsZHJlbjsgdXNlIHRoZSBncmFuZGNoaWxkcmVuLlxuXG5cdCAgICAgICAgdmFyIHJvdXRlID0gcm91dGVzW2luZGV4XTtcblx0ICAgICAgICB2YXIgcm91dGVQYXJhbXMgPSAoMCwgX2dldFJvdXRlUGFyYW1zMi5kZWZhdWx0KShyb3V0ZSwgcGFyYW1zKTtcblx0ICAgICAgICB2YXIgcHJvcHMgPSB7XG5cdCAgICAgICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuXHQgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuXHQgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG5cdCAgICAgICAgICByb3V0ZTogcm91dGUsXG5cdCAgICAgICAgICByb3V0ZVBhcmFtczogcm91dGVQYXJhbXMsXG5cdCAgICAgICAgICByb3V0ZXM6IHJvdXRlc1xuXHQgICAgICAgIH07XG5cblx0ICAgICAgICBpZiAoKDAsIF9Sb3V0ZVV0aWxzLmlzUmVhY3RDaGlsZHJlbikoZWxlbWVudCkpIHtcblx0ICAgICAgICAgIHByb3BzLmNoaWxkcmVuID0gZWxlbWVudDtcblx0ICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQpIHtcblx0ICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gZWxlbWVudCkge1xuXHQgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVsZW1lbnQsIHByb3ApKSBwcm9wc1twcm9wXSA9IGVsZW1lbnRbcHJvcF07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKCh0eXBlb2YgY29tcG9uZW50cyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29tcG9uZW50cykpID09PSAnb2JqZWN0Jykge1xuXHQgICAgICAgICAgdmFyIGVsZW1lbnRzID0ge307XG5cblx0ICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjb21wb25lbnRzKSB7XG5cdCAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29tcG9uZW50cywga2V5KSkge1xuXHQgICAgICAgICAgICAgIC8vIFBhc3MgdGhyb3VnaCB0aGUga2V5IGFzIGEgcHJvcCB0byBjcmVhdGVFbGVtZW50IHRvIGFsbG93XG5cdCAgICAgICAgICAgICAgLy8gY3VzdG9tIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb25zIHRvIGtub3cgd2hpY2ggbmFtZWQgY29tcG9uZW50XG5cdCAgICAgICAgICAgICAgLy8gdGhleSdyZSByZW5kZXJpbmcsIGZvciBlLmcuIG1hdGNoaW5nIHVwIHRvIGZldGNoZWQgZGF0YS5cblx0ICAgICAgICAgICAgICBlbGVtZW50c1trZXldID0gX3RoaXMuY3JlYXRlRWxlbWVudChjb21wb25lbnRzW2tleV0sIF9leHRlbmRzKHtcblx0ICAgICAgICAgICAgICAgIGtleToga2V5IH0sIHByb3BzKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBfdGhpcy5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHMsIHByb3BzKTtcblx0ICAgICAgfSwgZWxlbWVudCk7XG5cdCAgICB9XG5cblx0ICAgICEoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSB8fCBfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpID8gIHRydWUgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UsICdUaGUgcm9vdCByb3V0ZSBtdXN0IHJlbmRlciBhIHNpbmdsZSBlbGVtZW50JykgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuXG5cdCAgICByZXR1cm4gZWxlbWVudDtcblx0ICB9XG5cdH0pO1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IFJvdXRlckNvbnRleHQ7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRleHBvcnRzLmNhblVzZU1lbWJyYW5lID0gdW5kZWZpbmVkO1xuXG5cdHZhciBfcm91dGVyV2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0dmFyIGNhblVzZU1lbWJyYW5lID0gZXhwb3J0cy5jYW5Vc2VNZW1icmFuZSA9IGZhbHNlO1xuXG5cdC8vIE5vLW9wIGJ5IGRlZmF1bHQuXG5cdHZhciBkZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllcyhvYmplY3QpIHtcblx0ICByZXR1cm4gb2JqZWN0O1xuXHR9O1xuXG5cdGlmICh0cnVlKSB7XG5cdCAgdHJ5IHtcblx0ICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICd4Jywge1xuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgfVxuXHQgICAgfSkueCkge1xuXHQgICAgICBleHBvcnRzLmNhblVzZU1lbWJyYW5lID0gY2FuVXNlTWVtYnJhbmUgPSB0cnVlO1xuXHQgICAgfVxuXHQgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZW1wdHkgKi9cblx0ICB9IGNhdGNoIChlKSB7fVxuXHQgIC8qIGVzbGludC1lbmFibGUgbm8tZW1wdHkgKi9cblxuXHQgIGlmIChjYW5Vc2VNZW1icmFuZSkge1xuXHQgICAgZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMob2JqZWN0LCBtZXNzYWdlKSB7XG5cdCAgICAgIC8vIFdyYXAgdGhlIGRlcHJlY2F0ZWQgb2JqZWN0IGluIGEgbWVtYnJhbmUgdG8gd2FybiBvbiBwcm9wZXJ0eSBhY2Nlc3MuXG5cdCAgICAgIHZhciBtZW1icmFuZSA9IHt9O1xuXG5cdCAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKHByb3ApIHtcblx0ICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3ApKSB7XG5cdCAgICAgICAgICByZXR1cm4gJ2NvbnRpbnVlJztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodHlwZW9mIG9iamVjdFtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgLy8gQ2FuJ3QgdXNlIGZhdCBhcnJvdyBoZXJlIGJlY2F1c2Ugb2YgdXNlIG9mIGFyZ3VtZW50cyBiZWxvdy5cblx0ICAgICAgICAgIG1lbWJyYW5lW3Byb3BdID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgdHJ1ZSA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuXHQgICAgICAgICAgICByZXR1cm4gb2JqZWN0W3Byb3BdLmFwcGx5KG9iamVjdCwgYXJndW1lbnRzKTtcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgICByZXR1cm4gJ2NvbnRpbnVlJztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBUaGVzZSBwcm9wZXJ0aWVzIGFyZSBub24tZW51bWVyYWJsZSB0byBwcmV2ZW50IFJlYWN0IGRldiB0b29scyBmcm9tXG5cdCAgICAgICAgLy8gc2VlaW5nIHRoZW0gYW5kIGNhdXNpbmcgc3B1cmlvdXMgd2FybmluZ3Mgd2hlbiBhY2Nlc3NpbmcgdGhlbS4gSW5cblx0ICAgICAgICAvLyBwcmluY2lwbGUgdGhpcyBjb3VsZCBiZSBkb25lIHdpdGggYSBwcm94eSwgYnV0IHN1cHBvcnQgZm9yIHRoZVxuXHQgICAgICAgIC8vIG93bktleXMgdHJhcCBvbiBwcm94aWVzIGlzIG5vdCB1bml2ZXJzYWwsIGV2ZW4gYW1vbmcgYnJvd3NlcnMgdGhhdFxuXHQgICAgICAgIC8vIG90aGVyd2lzZSBzdXBwb3J0IHByb3hpZXMuXG5cdCAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1lbWJyYW5lLCBwcm9wLCB7XG5cdCAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgIHRydWUgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcblx0ICAgICAgICAgICAgcmV0dXJuIG9iamVjdFtwcm9wXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgICAgfTtcblxuXHQgICAgICBmb3IgKHZhciBwcm9wIGluIG9iamVjdCkge1xuXHQgICAgICAgIHZhciBfcmV0ID0gX2xvb3AocHJvcCk7XG5cblx0ICAgICAgICBpZiAoX3JldCA9PT0gJ2NvbnRpbnVlJykgY29udGludWU7XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gbWVtYnJhbmU7XG5cdCAgICB9O1xuXHQgIH1cblx0fVxuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IGRlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXM7XG5cbi8qKiovIH0sXG4vKiAxMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXHRleHBvcnRzLmNhblVzZURPTSA9IGNhblVzZURPTTtcblxuLyoqKi8gfSxcbi8qIDEzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuXHR2YXIgX3dhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdHZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuXHR2YXIgX3F1ZXJ5U3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSk7XG5cblx0dmFyIF9ydW5UcmFuc2l0aW9uSG9vayA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXG5cdHZhciBfcnVuVHJhbnNpdGlvbkhvb2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnVuVHJhbnNpdGlvbkhvb2spO1xuXG5cdHZhciBfUGF0aFV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuXHR2YXIgX2RlcHJlY2F0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG5cdHZhciBfZGVwcmVjYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlcHJlY2F0ZSk7XG5cblx0dmFyIFNFQVJDSF9CQVNFX0tFWSA9ICckc2VhcmNoQmFzZSc7XG5cblx0ZnVuY3Rpb24gZGVmYXVsdFN0cmluZ2lmeVF1ZXJ5KHF1ZXJ5KSB7XG5cdCAgcmV0dXJuIF9xdWVyeVN0cmluZy5zdHJpbmdpZnkocXVlcnkpLnJlcGxhY2UoLyUyMC9nLCAnKycpO1xuXHR9XG5cblx0dmFyIGRlZmF1bHRQYXJzZVF1ZXJ5U3RyaW5nID0gX3F1ZXJ5U3RyaW5nLnBhcnNlO1xuXG5cdGZ1bmN0aW9uIGlzTmVzdGVkT2JqZWN0KG9iamVjdCkge1xuXHQgIGZvciAodmFyIHAgaW4gb2JqZWN0KSB7XG5cdCAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcCkgJiYgdHlwZW9mIG9iamVjdFtwXSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkob2JqZWN0W3BdKSAmJiBvYmplY3RbcF0gIT09IG51bGwpIHJldHVybiB0cnVlO1xuXHQgIH1yZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyBjcmVhdGVIaXN0b3J5IGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY3JlYXRlXG5cdCAqIGhpc3Rvcnkgb2JqZWN0cyB0aGF0IGtub3cgaG93IHRvIGhhbmRsZSBVUkwgcXVlcmllcy5cblx0ICovXG5cdGZ1bmN0aW9uIHVzZVF1ZXJpZXMoY3JlYXRlSGlzdG9yeSkge1xuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG5cdCAgICB2YXIgaGlzdG9yeSA9IGNyZWF0ZUhpc3Rvcnkob3B0aW9ucyk7XG5cblx0ICAgIHZhciBzdHJpbmdpZnlRdWVyeSA9IG9wdGlvbnMuc3RyaW5naWZ5UXVlcnk7XG5cdCAgICB2YXIgcGFyc2VRdWVyeVN0cmluZyA9IG9wdGlvbnMucGFyc2VRdWVyeVN0cmluZztcblxuXHQgICAgaWYgKHR5cGVvZiBzdHJpbmdpZnlRdWVyeSAhPT0gJ2Z1bmN0aW9uJykgc3RyaW5naWZ5UXVlcnkgPSBkZWZhdWx0U3RyaW5naWZ5UXVlcnk7XG5cblx0ICAgIGlmICh0eXBlb2YgcGFyc2VRdWVyeVN0cmluZyAhPT0gJ2Z1bmN0aW9uJykgcGFyc2VRdWVyeVN0cmluZyA9IGRlZmF1bHRQYXJzZVF1ZXJ5U3RyaW5nO1xuXG5cdCAgICBmdW5jdGlvbiBhZGRRdWVyeShsb2NhdGlvbikge1xuXHQgICAgICBpZiAobG9jYXRpb24ucXVlcnkgPT0gbnVsbCkge1xuXHQgICAgICAgIHZhciBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG5cblx0ICAgICAgICBsb2NhdGlvbi5xdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcoc2VhcmNoLnN1YnN0cmluZygxKSk7XG5cdCAgICAgICAgbG9jYXRpb25bU0VBUkNIX0JBU0VfS0VZXSA9IHsgc2VhcmNoOiBzZWFyY2gsIHNlYXJjaEJhc2U6ICcnIH07XG5cdCAgICAgIH1cblxuXHQgICAgICAvLyBUT0RPOiBJbnN0ZWFkIG9mIGFsbCB0aGUgYm9vay1rZWVwaW5nIGhlcmUsIHRoaXMgc2hvdWxkIGp1c3Qgc3RyaXAgdGhlXG5cdCAgICAgIC8vIHN0cmluZ2lmaWVkIHF1ZXJ5IGZyb20gdGhlIHNlYXJjaC5cblxuXHQgICAgICByZXR1cm4gbG9jYXRpb247XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGFwcGVuZFF1ZXJ5KGxvY2F0aW9uLCBxdWVyeSkge1xuXHQgICAgICB2YXIgX2V4dGVuZHMyO1xuXG5cdCAgICAgIHZhciBzZWFyY2hCYXNlU3BlYyA9IGxvY2F0aW9uW1NFQVJDSF9CQVNFX0tFWV07XG5cdCAgICAgIHZhciBxdWVyeVN0cmluZyA9IHF1ZXJ5ID8gc3RyaW5naWZ5UXVlcnkocXVlcnkpIDogJyc7XG5cdCAgICAgIGlmICghc2VhcmNoQmFzZVNwZWMgJiYgIXF1ZXJ5U3RyaW5nKSB7XG5cdCAgICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuXHQgICAgICB9XG5cblx0ICAgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShzdHJpbmdpZnlRdWVyeSAhPT0gZGVmYXVsdFN0cmluZ2lmeVF1ZXJ5IHx8ICFpc05lc3RlZE9iamVjdChxdWVyeSksICd1c2VRdWVyaWVzIGRvZXMgbm90IHN0cmluZ2lmeSBuZXN0ZWQgcXVlcnkgb2JqZWN0cyBieSBkZWZhdWx0OyAnICsgJ3VzZSBhIGN1c3RvbSBzdHJpbmdpZnlRdWVyeSBmdW5jdGlvbicpIDogdW5kZWZpbmVkO1xuXG5cdCAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnKSBsb2NhdGlvbiA9IF9QYXRoVXRpbHMucGFyc2VQYXRoKGxvY2F0aW9uKTtcblxuXHQgICAgICB2YXIgc2VhcmNoQmFzZSA9IHVuZGVmaW5lZDtcblx0ICAgICAgaWYgKHNlYXJjaEJhc2VTcGVjICYmIGxvY2F0aW9uLnNlYXJjaCA9PT0gc2VhcmNoQmFzZVNwZWMuc2VhcmNoKSB7XG5cdCAgICAgICAgc2VhcmNoQmFzZSA9IHNlYXJjaEJhc2VTcGVjLnNlYXJjaEJhc2U7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgc2VhcmNoQmFzZSA9IGxvY2F0aW9uLnNlYXJjaCB8fCAnJztcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBzZWFyY2ggPSBzZWFyY2hCYXNlO1xuXHQgICAgICBpZiAocXVlcnlTdHJpbmcpIHtcblx0ICAgICAgICBzZWFyY2ggKz0gKHNlYXJjaCA/ICcmJyA6ICc/JykgKyBxdWVyeVN0cmluZztcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIChfZXh0ZW5kczIgPSB7XG5cdCAgICAgICAgc2VhcmNoOiBzZWFyY2hcblx0ICAgICAgfSwgX2V4dGVuZHMyW1NFQVJDSF9CQVNFX0tFWV0gPSB7IHNlYXJjaDogc2VhcmNoLCBzZWFyY2hCYXNlOiBzZWFyY2hCYXNlIH0sIF9leHRlbmRzMikpO1xuXHQgICAgfVxuXG5cdCAgICAvLyBPdmVycmlkZSBhbGwgcmVhZCBtZXRob2RzIHdpdGggcXVlcnktYXdhcmUgdmVyc2lvbnMuXG5cdCAgICBmdW5jdGlvbiBsaXN0ZW5CZWZvcmUoaG9vaykge1xuXHQgICAgICByZXR1cm4gaGlzdG9yeS5saXN0ZW5CZWZvcmUoZnVuY3Rpb24gKGxvY2F0aW9uLCBjYWxsYmFjaykge1xuXHQgICAgICAgIF9ydW5UcmFuc2l0aW9uSG9vazJbJ2RlZmF1bHQnXShob29rLCBhZGRRdWVyeShsb2NhdGlvbiksIGNhbGxiYWNrKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuXHQgICAgICByZXR1cm4gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG5cdCAgICAgICAgbGlzdGVuZXIoYWRkUXVlcnkobG9jYXRpb24pKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgIC8vIE92ZXJyaWRlIGFsbCB3cml0ZSBtZXRob2RzIHdpdGggcXVlcnktYXdhcmUgdmVyc2lvbnMuXG5cdCAgICBmdW5jdGlvbiBwdXNoKGxvY2F0aW9uKSB7XG5cdCAgICAgIGhpc3RvcnkucHVzaChhcHBlbmRRdWVyeShsb2NhdGlvbiwgbG9jYXRpb24ucXVlcnkpKTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbikge1xuXHQgICAgICBoaXN0b3J5LnJlcGxhY2UoYXBwZW5kUXVlcnkobG9jYXRpb24sIGxvY2F0aW9uLnF1ZXJ5KSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24sIHF1ZXJ5KSB7XG5cdCAgICAgICB0cnVlID8gX3dhcm5pbmcyWydkZWZhdWx0J10oIXF1ZXJ5LCAndGhlIHF1ZXJ5IGFyZ3VtZW50IHRvIGNyZWF0ZVBhdGggaXMgZGVwcmVjYXRlZDsgdXNlIGEgbG9jYXRpb24gZGVzY3JpcHRvciBpbnN0ZWFkJykgOiB1bmRlZmluZWQ7XG5cblx0ICAgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlUGF0aChhcHBlbmRRdWVyeShsb2NhdGlvbiwgcXVlcnkgfHwgbG9jYXRpb24ucXVlcnkpKTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbiwgcXVlcnkpIHtcblx0ICAgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXSghcXVlcnksICd0aGUgcXVlcnkgYXJndW1lbnQgdG8gY3JlYXRlSHJlZiBpcyBkZXByZWNhdGVkOyB1c2UgYSBsb2NhdGlvbiBkZXNjcmlwdG9yIGluc3RlYWQnKSA6IHVuZGVmaW5lZDtcblxuXHQgICAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVIcmVmKGFwcGVuZFF1ZXJ5KGxvY2F0aW9uLCBxdWVyeSB8fCBsb2NhdGlvbi5xdWVyeSkpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikge1xuXHQgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBmdWxsTG9jYXRpb24gPSBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uLmFwcGx5KGhpc3RvcnksIFthcHBlbmRRdWVyeShsb2NhdGlvbiwgbG9jYXRpb24ucXVlcnkpXS5jb25jYXQoYXJncykpO1xuXHQgICAgICBpZiAobG9jYXRpb24ucXVlcnkpIHtcblx0ICAgICAgICBmdWxsTG9jYXRpb24ucXVlcnkgPSBsb2NhdGlvbi5xdWVyeTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gYWRkUXVlcnkoZnVsbExvY2F0aW9uKTtcblx0ICAgIH1cblxuXHQgICAgLy8gZGVwcmVjYXRlZFxuXHQgICAgZnVuY3Rpb24gcHVzaFN0YXRlKHN0YXRlLCBwYXRoLCBxdWVyeSkge1xuXHQgICAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSBwYXRoID0gX1BhdGhVdGlscy5wYXJzZVBhdGgocGF0aCk7XG5cblx0ICAgICAgcHVzaChfZXh0ZW5kcyh7IHN0YXRlOiBzdGF0ZSB9LCBwYXRoLCB7IHF1ZXJ5OiBxdWVyeSB9KSk7XG5cdCAgICB9XG5cblx0ICAgIC8vIGRlcHJlY2F0ZWRcblx0ICAgIGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZShzdGF0ZSwgcGF0aCwgcXVlcnkpIHtcblx0ICAgICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgcGF0aCA9IF9QYXRoVXRpbHMucGFyc2VQYXRoKHBhdGgpO1xuXG5cdCAgICAgIHJlcGxhY2UoX2V4dGVuZHMoeyBzdGF0ZTogc3RhdGUgfSwgcGF0aCwgeyBxdWVyeTogcXVlcnkgfSkpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcblx0ICAgICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXG5cdCAgICAgIGxpc3RlbjogbGlzdGVuLFxuXHQgICAgICBwdXNoOiBwdXNoLFxuXHQgICAgICByZXBsYWNlOiByZXBsYWNlLFxuXHQgICAgICBjcmVhdGVQYXRoOiBjcmVhdGVQYXRoLFxuXHQgICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuXHQgICAgICBjcmVhdGVMb2NhdGlvbjogY3JlYXRlTG9jYXRpb24sXG5cblx0ICAgICAgcHVzaFN0YXRlOiBfZGVwcmVjYXRlMlsnZGVmYXVsdCddKHB1c2hTdGF0ZSwgJ3B1c2hTdGF0ZSBpcyBkZXByZWNhdGVkOyB1c2UgcHVzaCBpbnN0ZWFkJyksXG5cdCAgICAgIHJlcGxhY2VTdGF0ZTogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShyZXBsYWNlU3RhdGUsICdyZXBsYWNlU3RhdGUgaXMgZGVwcmVjYXRlZDsgdXNlIHJlcGxhY2UgaW5zdGVhZCcpXG5cdCAgICB9KTtcblx0ICB9O1xuXHR9XG5cblx0ZXhwb3J0c1snZGVmYXVsdCddID0gdXNlUXVlcmllcztcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAxNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0ZXhwb3J0cy5sb29wQXN5bmMgPSBsb29wQXN5bmM7XG5cdGV4cG9ydHMubWFwQXN5bmMgPSBtYXBBc3luYztcblx0ZnVuY3Rpb24gbG9vcEFzeW5jKHR1cm5zLCB3b3JrLCBjYWxsYmFjaykge1xuXHQgIHZhciBjdXJyZW50VHVybiA9IDAsXG5cdCAgICAgIGlzRG9uZSA9IGZhbHNlO1xuXHQgIHZhciBzeW5jID0gZmFsc2UsXG5cdCAgICAgIGhhc05leHQgPSBmYWxzZSxcblx0ICAgICAgZG9uZUFyZ3MgPSB2b2lkIDA7XG5cblx0ICBmdW5jdGlvbiBkb25lKCkge1xuXHQgICAgaXNEb25lID0gdHJ1ZTtcblx0ICAgIGlmIChzeW5jKSB7XG5cdCAgICAgIC8vIEl0ZXJhdGUgaW5zdGVhZCBvZiByZWN1cnNpbmcgaWYgcG9zc2libGUuXG5cdCAgICAgIGRvbmVBcmdzID0gW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cblx0ICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gbmV4dCgpIHtcblx0ICAgIGlmIChpc0RvbmUpIHtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICBoYXNOZXh0ID0gdHJ1ZTtcblx0ICAgIGlmIChzeW5jKSB7XG5cdCAgICAgIC8vIEl0ZXJhdGUgaW5zdGVhZCBvZiByZWN1cnNpbmcgaWYgcG9zc2libGUuXG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgc3luYyA9IHRydWU7XG5cblx0ICAgIHdoaWxlICghaXNEb25lICYmIGN1cnJlbnRUdXJuIDwgdHVybnMgJiYgaGFzTmV4dCkge1xuXHQgICAgICBoYXNOZXh0ID0gZmFsc2U7XG5cdCAgICAgIHdvcmsuY2FsbCh0aGlzLCBjdXJyZW50VHVybisrLCBuZXh0LCBkb25lKTtcblx0ICAgIH1cblxuXHQgICAgc3luYyA9IGZhbHNlO1xuXG5cdCAgICBpZiAoaXNEb25lKSB7XG5cdCAgICAgIC8vIFRoaXMgbWVhbnMgdGhlIGxvb3AgZmluaXNoZWQgc3luY2hyb25vdXNseS5cblx0ICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgZG9uZUFyZ3MpO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cblx0ICAgIGlmIChjdXJyZW50VHVybiA+PSB0dXJucyAmJiBoYXNOZXh0KSB7XG5cdCAgICAgIGlzRG9uZSA9IHRydWU7XG5cdCAgICAgIGNhbGxiYWNrKCk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgbmV4dCgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gbWFwQXN5bmMoYXJyYXksIHdvcmssIGNhbGxiYWNrKSB7XG5cdCAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0ICB2YXIgdmFsdWVzID0gW107XG5cblx0ICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbGJhY2sobnVsbCwgdmFsdWVzKTtcblxuXHQgIHZhciBpc0RvbmUgPSBmYWxzZSxcblx0ICAgICAgZG9uZUNvdW50ID0gMDtcblxuXHQgIGZ1bmN0aW9uIGRvbmUoaW5kZXgsIGVycm9yLCB2YWx1ZSkge1xuXHQgICAgaWYgKGlzRG9uZSkgcmV0dXJuO1xuXG5cdCAgICBpZiAoZXJyb3IpIHtcblx0ICAgICAgaXNEb25lID0gdHJ1ZTtcblx0ICAgICAgY2FsbGJhY2soZXJyb3IpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuXG5cdCAgICAgIGlzRG9uZSA9ICsrZG9uZUNvdW50ID09PSBsZW5ndGg7XG5cblx0ICAgICAgaWYgKGlzRG9uZSkgY2FsbGJhY2sobnVsbCwgdmFsdWVzKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuXHQgICAgd29yayhpdGVtLCBpbmRleCwgZnVuY3Rpb24gKGVycm9yLCB2YWx1ZSkge1xuXHQgICAgICBkb25lKGluZGV4LCBlcnJvciwgdmFsdWUpO1xuXHQgICAgfSk7XG5cdCAgfSk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDE1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0ZXhwb3J0cy5yb3V0ZXIgPSBleHBvcnRzLnJvdXRlcyA9IGV4cG9ydHMucm91dGUgPSBleHBvcnRzLmNvbXBvbmVudHMgPSBleHBvcnRzLmNvbXBvbmVudCA9IGV4cG9ydHMubG9jYXRpb24gPSBleHBvcnRzLmhpc3RvcnkgPSBleHBvcnRzLmZhbHN5ID0gZXhwb3J0cy5sb2NhdGlvblNoYXBlID0gZXhwb3J0cy5yb3V0ZXJTaGFwZSA9IHVuZGVmaW5lZDtcblxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuXHR2YXIgX2RlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTtcblxuXHR2YXIgX2RlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllcyk7XG5cblx0dmFyIF9JbnRlcm5hbFByb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cblx0dmFyIEludGVybmFsUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX0ludGVybmFsUHJvcFR5cGVzKTtcblxuXHR2YXIgX3JvdXRlcldhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5cdHZhciBfcm91dGVyV2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yb3V0ZXJXYXJuaW5nKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0dmFyIGZ1bmMgPSBfcmVhY3QuUHJvcFR5cGVzLmZ1bmM7XG5cdHZhciBvYmplY3QgPSBfcmVhY3QuUHJvcFR5cGVzLm9iamVjdDtcblx0dmFyIHNoYXBlID0gX3JlYWN0LlByb3BUeXBlcy5zaGFwZTtcblx0dmFyIHN0cmluZyA9IF9yZWFjdC5Qcm9wVHlwZXMuc3RyaW5nO1xuXHR2YXIgcm91dGVyU2hhcGUgPSBleHBvcnRzLnJvdXRlclNoYXBlID0gc2hhcGUoe1xuXHQgIHB1c2g6IGZ1bmMuaXNSZXF1aXJlZCxcblx0ICByZXBsYWNlOiBmdW5jLmlzUmVxdWlyZWQsXG5cdCAgZ286IGZ1bmMuaXNSZXF1aXJlZCxcblx0ICBnb0JhY2s6IGZ1bmMuaXNSZXF1aXJlZCxcblx0ICBnb0ZvcndhcmQ6IGZ1bmMuaXNSZXF1aXJlZCxcblx0ICBzZXRSb3V0ZUxlYXZlSG9vazogZnVuYy5pc1JlcXVpcmVkLFxuXHQgIGlzQWN0aXZlOiBmdW5jLmlzUmVxdWlyZWRcblx0fSk7XG5cblx0dmFyIGxvY2F0aW9uU2hhcGUgPSBleHBvcnRzLmxvY2F0aW9uU2hhcGUgPSBzaGFwZSh7XG5cdCAgcGF0aG5hbWU6IHN0cmluZy5pc1JlcXVpcmVkLFxuXHQgIHNlYXJjaDogc3RyaW5nLmlzUmVxdWlyZWQsXG5cdCAgc3RhdGU6IG9iamVjdCxcblx0ICBhY3Rpb246IHN0cmluZy5pc1JlcXVpcmVkLFxuXHQgIGtleTogc3RyaW5nXG5cdH0pO1xuXG5cdC8vIERlcHJlY2F0ZWQgc3R1ZmYgYmVsb3c6XG5cblx0dmFyIGZhbHN5ID0gZXhwb3J0cy5mYWxzeSA9IEludGVybmFsUHJvcFR5cGVzLmZhbHN5O1xuXHR2YXIgaGlzdG9yeSA9IGV4cG9ydHMuaGlzdG9yeSA9IEludGVybmFsUHJvcFR5cGVzLmhpc3Rvcnk7XG5cdHZhciBsb2NhdGlvbiA9IGV4cG9ydHMubG9jYXRpb24gPSBsb2NhdGlvblNoYXBlO1xuXHR2YXIgY29tcG9uZW50ID0gZXhwb3J0cy5jb21wb25lbnQgPSBJbnRlcm5hbFByb3BUeXBlcy5jb21wb25lbnQ7XG5cdHZhciBjb21wb25lbnRzID0gZXhwb3J0cy5jb21wb25lbnRzID0gSW50ZXJuYWxQcm9wVHlwZXMuY29tcG9uZW50cztcblx0dmFyIHJvdXRlID0gZXhwb3J0cy5yb3V0ZSA9IEludGVybmFsUHJvcFR5cGVzLnJvdXRlO1xuXHR2YXIgcm91dGVzID0gZXhwb3J0cy5yb3V0ZXMgPSBJbnRlcm5hbFByb3BUeXBlcy5yb3V0ZXM7XG5cdHZhciByb3V0ZXIgPSBleHBvcnRzLnJvdXRlciA9IHJvdXRlclNoYXBlO1xuXG5cdGlmICh0cnVlKSB7XG5cdCAgKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBkZXByZWNhdGVQcm9wVHlwZSA9IGZ1bmN0aW9uIGRlcHJlY2F0ZVByb3BUeXBlKHByb3BUeXBlLCBtZXNzYWdlKSB7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgIHRydWUgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcblx0ICAgICAgICByZXR1cm4gcHJvcFR5cGUuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuXHQgICAgICB9O1xuXHQgICAgfTtcblxuXHQgICAgdmFyIGRlcHJlY2F0ZUludGVybmFsUHJvcFR5cGUgPSBmdW5jdGlvbiBkZXByZWNhdGVJbnRlcm5hbFByb3BUeXBlKHByb3BUeXBlKSB7XG5cdCAgICAgIHJldHVybiBkZXByZWNhdGVQcm9wVHlwZShwcm9wVHlwZSwgJ1RoaXMgcHJvcCB0eXBlIGlzIG5vdCBpbnRlbmRlZCBmb3IgZXh0ZXJuYWwgdXNlLCBhbmQgd2FzIHByZXZpb3VzbHkgZXhwb3J0ZWQgYnkgbWlzdGFrZS4gVGhlc2UgaW50ZXJuYWwgcHJvcCB0eXBlcyBhcmUgZGVwcmVjYXRlZCBmb3IgZXh0ZXJuYWwgdXNlLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgbGF0ZXIgdmVyc2lvbi4nKTtcblx0ICAgIH07XG5cblx0ICAgIHZhciBkZXByZWNhdGVSZW5hbWVkUHJvcFR5cGUgPSBmdW5jdGlvbiBkZXByZWNhdGVSZW5hbWVkUHJvcFR5cGUocHJvcFR5cGUsIG5hbWUpIHtcblx0ICAgICAgcmV0dXJuIGRlcHJlY2F0ZVByb3BUeXBlKHByb3BUeXBlLCAnVGhlIGAnICsgbmFtZSArICdgIHByb3AgdHlwZSBpcyBub3cgZXhwb3J0ZWQgYXMgYCcgKyBuYW1lICsgJ1NoYXBlYCB0byBhdm9pZCBuYW1lIGNvbmZsaWN0cy4gVGhpcyBleHBvcnQgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgbGF0ZXIgdmVyc2lvbi4nKTtcblx0ICAgIH07XG5cblx0ICAgIGV4cG9ydHMuZmFsc3kgPSBmYWxzeSA9IGRlcHJlY2F0ZUludGVybmFsUHJvcFR5cGUoZmFsc3kpO1xuXHQgICAgZXhwb3J0cy5oaXN0b3J5ID0gaGlzdG9yeSA9IGRlcHJlY2F0ZUludGVybmFsUHJvcFR5cGUoaGlzdG9yeSk7XG5cdCAgICBleHBvcnRzLmNvbXBvbmVudCA9IGNvbXBvbmVudCA9IGRlcHJlY2F0ZUludGVybmFsUHJvcFR5cGUoY29tcG9uZW50KTtcblx0ICAgIGV4cG9ydHMuY29tcG9uZW50cyA9IGNvbXBvbmVudHMgPSBkZXByZWNhdGVJbnRlcm5hbFByb3BUeXBlKGNvbXBvbmVudHMpO1xuXHQgICAgZXhwb3J0cy5yb3V0ZSA9IHJvdXRlID0gZGVwcmVjYXRlSW50ZXJuYWxQcm9wVHlwZShyb3V0ZSk7XG5cdCAgICBleHBvcnRzLnJvdXRlcyA9IHJvdXRlcyA9IGRlcHJlY2F0ZUludGVybmFsUHJvcFR5cGUocm91dGVzKTtcblxuXHQgICAgZXhwb3J0cy5sb2NhdGlvbiA9IGxvY2F0aW9uID0gZGVwcmVjYXRlUmVuYW1lZFByb3BUeXBlKGxvY2F0aW9uLCAnbG9jYXRpb24nKTtcblx0ICAgIGV4cG9ydHMucm91dGVyID0gcm91dGVyID0gZGVwcmVjYXRlUmVuYW1lZFByb3BUeXBlKHJvdXRlciwgJ3JvdXRlcicpO1xuXHQgIH0pKCk7XG5cdH1cblxuXHR2YXIgZGVmYXVsdEV4cG9ydCA9IHtcblx0ICBmYWxzeTogZmFsc3ksXG5cdCAgaGlzdG9yeTogaGlzdG9yeSxcblx0ICBsb2NhdGlvbjogbG9jYXRpb24sXG5cdCAgY29tcG9uZW50OiBjb21wb25lbnQsXG5cdCAgY29tcG9uZW50czogY29tcG9uZW50cyxcblx0ICByb3V0ZTogcm91dGUsXG5cdCAgLy8gRm9yIHNvbWUgcmVhc29uLCByb3V0ZXMgd2FzIG5ldmVyIGhlcmUuXG5cdCAgcm91dGVyOiByb3V0ZXJcblx0fTtcblxuXHRpZiAodHJ1ZSkge1xuXHQgIGRlZmF1bHRFeHBvcnQgPSAoMCwgX2RlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMyLmRlZmF1bHQpKGRlZmF1bHRFeHBvcnQsICdUaGUgZGVmYXVsdCBleHBvcnQgZnJvbSBgcmVhY3Qtcm91dGVyL2xpYi9Qcm9wVHlwZXNgIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdGhlIG5hbWVkIGV4cG9ydHMgaW5zdGVhZC4nKTtcblx0fVxuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IGRlZmF1bHRFeHBvcnQ7XG5cbi8qKiovIH0sXG4vKiAxNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuXHRleHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjtcblxuXHR2YXIgX3JvdXRlcldhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5cdHZhciBfcm91dGVyV2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yb3V0ZXJXYXJuaW5nKTtcblxuXHR2YXIgX0FjdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG5cdHZhciBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCk7XG5cblx0dmFyIF9jb21wdXRlQ2hhbmdlZFJvdXRlczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wdXRlQ2hhbmdlZFJvdXRlczIpO1xuXG5cdHZhciBfVHJhbnNpdGlvblV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cblx0dmFyIF9pc0FjdGl2ZTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblxuXHR2YXIgX2lzQWN0aXZlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQWN0aXZlMik7XG5cblx0dmFyIF9nZXRDb21wb25lbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NSk7XG5cblx0dmFyIF9nZXRDb21wb25lbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldENvbXBvbmVudHMpO1xuXG5cdHZhciBfbWF0Y2hSb3V0ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTtcblxuXHR2YXIgX21hdGNoUm91dGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hdGNoUm91dGVzKTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGZ1bmN0aW9uIGhhc0FueVByb3BlcnRpZXMob2JqZWN0KSB7XG5cdCAgZm9yICh2YXIgcCBpbiBvYmplY3QpIHtcblx0ICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwKSkgcmV0dXJuIHRydWU7XG5cdCAgfXJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKGhpc3RvcnksIHJvdXRlcykge1xuXHQgIHZhciBzdGF0ZSA9IHt9O1xuXG5cdCAgLy8gU2lnbmF0dXJlIHNob3VsZCBiZSAobG9jYXRpb24sIGluZGV4T25seSksIGJ1dCBuZWVkcyB0byBzdXBwb3J0IChwYXRoLFxuXHQgIC8vIHF1ZXJ5LCBpbmRleE9ubHkpXG5cdCAgZnVuY3Rpb24gaXNBY3RpdmUobG9jYXRpb24pIHtcblx0ICAgIHZhciBpbmRleE9ubHlPckRlcHJlY2F0ZWRRdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYXJndW1lbnRzWzFdO1xuXHQgICAgdmFyIGRlcHJlY2F0ZWRJbmRleE9ubHkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBudWxsIDogYXJndW1lbnRzWzJdO1xuXG5cdCAgICB2YXIgaW5kZXhPbmx5ID0gdm9pZCAwO1xuXHQgICAgaWYgKGluZGV4T25seU9yRGVwcmVjYXRlZFF1ZXJ5ICYmIGluZGV4T25seU9yRGVwcmVjYXRlZFF1ZXJ5ICE9PSB0cnVlIHx8IGRlcHJlY2F0ZWRJbmRleE9ubHkgIT09IG51bGwpIHtcblx0ICAgICAgIHRydWUgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnYGlzQWN0aXZlKHBhdGhuYW1lLCBxdWVyeSwgaW5kZXhPbmx5KSBpcyBkZXByZWNhdGVkOyB1c2UgYGlzQWN0aXZlKGxvY2F0aW9uLCBpbmRleE9ubHkpYCB3aXRoIGEgbG9jYXRpb24gZGVzY3JpcHRvciBpbnN0ZWFkLiBodHRwOi8vdGlueS5jYy9yb3V0ZXItaXNBY3RpdmVkZXByZWNhdGVkJykgOiB2b2lkIDA7XG5cdCAgICAgIGxvY2F0aW9uID0geyBwYXRobmFtZTogbG9jYXRpb24sIHF1ZXJ5OiBpbmRleE9ubHlPckRlcHJlY2F0ZWRRdWVyeSB9O1xuXHQgICAgICBpbmRleE9ubHkgPSBkZXByZWNhdGVkSW5kZXhPbmx5IHx8IGZhbHNlO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgbG9jYXRpb24gPSBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKTtcblx0ICAgICAgaW5kZXhPbmx5ID0gaW5kZXhPbmx5T3JEZXByZWNhdGVkUXVlcnk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiAoMCwgX2lzQWN0aXZlMy5kZWZhdWx0KShsb2NhdGlvbiwgaW5kZXhPbmx5LCBzdGF0ZS5sb2NhdGlvbiwgc3RhdGUucm91dGVzLCBzdGF0ZS5wYXJhbXMpO1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uRnJvbVJlZGlyZWN0SW5mbyhsb2NhdGlvbikge1xuXHQgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlTG9jYXRpb24obG9jYXRpb24sIF9BY3Rpb25zLlJFUExBQ0UpO1xuXHQgIH1cblxuXHQgIHZhciBwYXJ0aWFsTmV4dFN0YXRlID0gdm9pZCAwO1xuXG5cdCAgZnVuY3Rpb24gbWF0Y2gobG9jYXRpb24sIGNhbGxiYWNrKSB7XG5cdCAgICBpZiAocGFydGlhbE5leHRTdGF0ZSAmJiBwYXJ0aWFsTmV4dFN0YXRlLmxvY2F0aW9uID09PSBsb2NhdGlvbikge1xuXHQgICAgICAvLyBDb250aW51ZSBmcm9tIHdoZXJlIHdlIGxlZnQgb2ZmLlxuXHQgICAgICBmaW5pc2hNYXRjaChwYXJ0aWFsTmV4dFN0YXRlLCBjYWxsYmFjayk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAoMCwgX21hdGNoUm91dGVzMi5kZWZhdWx0KShyb3V0ZXMsIGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIG5leHRTdGF0ZSkge1xuXHQgICAgICAgIGlmIChlcnJvcikge1xuXHQgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAobmV4dFN0YXRlKSB7XG5cdCAgICAgICAgICBmaW5pc2hNYXRjaChfZXh0ZW5kcyh7fSwgbmV4dFN0YXRlLCB7IGxvY2F0aW9uOiBsb2NhdGlvbiB9KSwgY2FsbGJhY2spO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBjYWxsYmFjaygpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gZmluaXNoTWF0Y2gobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuXHQgICAgdmFyIF9jb21wdXRlQ2hhbmdlZFJvdXRlcyA9ICgwLCBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMzLmRlZmF1bHQpKHN0YXRlLCBuZXh0U3RhdGUpO1xuXG5cdCAgICB2YXIgbGVhdmVSb3V0ZXMgPSBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMubGVhdmVSb3V0ZXM7XG5cdCAgICB2YXIgY2hhbmdlUm91dGVzID0gX2NvbXB1dGVDaGFuZ2VkUm91dGVzLmNoYW5nZVJvdXRlcztcblx0ICAgIHZhciBlbnRlclJvdXRlcyA9IF9jb21wdXRlQ2hhbmdlZFJvdXRlcy5lbnRlclJvdXRlcztcblxuXG5cdCAgICAoMCwgX1RyYW5zaXRpb25VdGlscy5ydW5MZWF2ZUhvb2tzKShsZWF2ZVJvdXRlcywgc3RhdGUpO1xuXG5cdCAgICAvLyBUZWFyIGRvd24gY29uZmlybWF0aW9uIGhvb2tzIGZvciBsZWZ0IHJvdXRlc1xuXHQgICAgbGVhdmVSb3V0ZXMuZmlsdGVyKGZ1bmN0aW9uIChyb3V0ZSkge1xuXHQgICAgICByZXR1cm4gZW50ZXJSb3V0ZXMuaW5kZXhPZihyb3V0ZSkgPT09IC0xO1xuXHQgICAgfSkuZm9yRWFjaChyZW1vdmVMaXN0ZW5CZWZvcmVIb29rc0ZvclJvdXRlKTtcblxuXHQgICAgLy8gY2hhbmdlIGFuZCBlbnRlciBob29rcyBhcmUgcnVuIGluIHNlcmllc1xuXHQgICAgKDAsIF9UcmFuc2l0aW9uVXRpbHMucnVuQ2hhbmdlSG9va3MpKGNoYW5nZVJvdXRlcywgc3RhdGUsIG5leHRTdGF0ZSwgZnVuY3Rpb24gKGVycm9yLCByZWRpcmVjdEluZm8pIHtcblx0ICAgICAgaWYgKGVycm9yIHx8IHJlZGlyZWN0SW5mbykgcmV0dXJuIGhhbmRsZUVycm9yT3JSZWRpcmVjdChlcnJvciwgcmVkaXJlY3RJbmZvKTtcblxuXHQgICAgICAoMCwgX1RyYW5zaXRpb25VdGlscy5ydW5FbnRlckhvb2tzKShlbnRlclJvdXRlcywgbmV4dFN0YXRlLCBmaW5pc2hFbnRlckhvb2tzKTtcblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBmaW5pc2hFbnRlckhvb2tzKGVycm9yLCByZWRpcmVjdEluZm8pIHtcblx0ICAgICAgaWYgKGVycm9yIHx8IHJlZGlyZWN0SW5mbykgcmV0dXJuIGhhbmRsZUVycm9yT3JSZWRpcmVjdChlcnJvciwgcmVkaXJlY3RJbmZvKTtcblxuXHQgICAgICAvLyBUT0RPOiBGZXRjaCBjb21wb25lbnRzIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG5cdCAgICAgICgwLCBfZ2V0Q29tcG9uZW50czIuZGVmYXVsdCkobmV4dFN0YXRlLCBmdW5jdGlvbiAoZXJyb3IsIGNvbXBvbmVudHMpIHtcblx0ICAgICAgICBpZiAoZXJyb3IpIHtcblx0ICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgLy8gVE9ETzogTWFrZSBtYXRjaCBhIHB1cmUgZnVuY3Rpb24gYW5kIGhhdmUgc29tZSBvdGhlciBBUElcblx0ICAgICAgICAgIC8vIGZvciBcIm1hdGNoIGFuZCB1cGRhdGUgc3RhdGVcIi5cblx0ICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG51bGwsIHN0YXRlID0gX2V4dGVuZHMoe30sIG5leHRTdGF0ZSwgeyBjb21wb25lbnRzOiBjb21wb25lbnRzIH0pKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBoYW5kbGVFcnJvck9yUmVkaXJlY3QoZXJyb3IsIHJlZGlyZWN0SW5mbykge1xuXHQgICAgICBpZiAoZXJyb3IpIGNhbGxiYWNrKGVycm9yKTtlbHNlIGNhbGxiYWNrKG51bGwsIGNyZWF0ZUxvY2F0aW9uRnJvbVJlZGlyZWN0SW5mbyhyZWRpcmVjdEluZm8pKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICB2YXIgUm91dGVHdWlkID0gMTtcblxuXHQgIGZ1bmN0aW9uIGdldFJvdXRlSUQocm91dGUpIHtcblx0ICAgIHZhciBjcmVhdGUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzFdO1xuXG5cdCAgICByZXR1cm4gcm91dGUuX19pZF9fIHx8IGNyZWF0ZSAmJiAocm91dGUuX19pZF9fID0gUm91dGVHdWlkKyspO1xuXHQgIH1cblxuXHQgIHZhciBSb3V0ZUhvb2tzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuXHQgIGZ1bmN0aW9uIGdldFJvdXRlSG9va3NGb3JSb3V0ZXMocm91dGVzKSB7XG5cdCAgICByZXR1cm4gcm91dGVzLnJlZHVjZShmdW5jdGlvbiAoaG9va3MsIHJvdXRlKSB7XG5cdCAgICAgIGhvb2tzLnB1c2guYXBwbHkoaG9va3MsIFJvdXRlSG9va3NbZ2V0Um91dGVJRChyb3V0ZSldKTtcblx0ICAgICAgcmV0dXJuIGhvb2tzO1xuXHQgICAgfSwgW10pO1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIHRyYW5zaXRpb25Ib29rKGxvY2F0aW9uLCBjYWxsYmFjaykge1xuXHQgICAgKDAsIF9tYXRjaFJvdXRlczIuZGVmYXVsdCkocm91dGVzLCBsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBuZXh0U3RhdGUpIHtcblx0ICAgICAgaWYgKG5leHRTdGF0ZSA9PSBudWxsKSB7XG5cdCAgICAgICAgLy8gVE9ETzogV2UgZGlkbid0IGFjdHVhbGx5IG1hdGNoIGFueXRoaW5nLCBidXQgaGFuZ1xuXHQgICAgICAgIC8vIG9udG8gZXJyb3IvbmV4dFN0YXRlIHNvIHdlIGRvbid0IGhhdmUgdG8gbWF0Y2hSb3V0ZXNcblx0ICAgICAgICAvLyBhZ2FpbiBpbiB0aGUgbGlzdGVuIGNhbGxiYWNrLlxuXHQgICAgICAgIGNhbGxiYWNrKCk7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cblx0ICAgICAgLy8gQ2FjaGUgc29tZSBzdGF0ZSBoZXJlIHNvIHdlIGRvbid0IGhhdmUgdG9cblx0ICAgICAgLy8gbWF0Y2hSb3V0ZXMoKSBhZ2FpbiBpbiB0aGUgbGlzdGVuIGNhbGxiYWNrLlxuXHQgICAgICBwYXJ0aWFsTmV4dFN0YXRlID0gX2V4dGVuZHMoe30sIG5leHRTdGF0ZSwgeyBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG5cblx0ICAgICAgdmFyIGhvb2tzID0gZ2V0Um91dGVIb29rc0ZvclJvdXRlcygoMCwgX2NvbXB1dGVDaGFuZ2VkUm91dGVzMy5kZWZhdWx0KShzdGF0ZSwgcGFydGlhbE5leHRTdGF0ZSkubGVhdmVSb3V0ZXMpO1xuXG5cdCAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBob29rcy5sZW5ndGg7IHJlc3VsdCA9PSBudWxsICYmIGkgPCBsZW47ICsraSkge1xuXHQgICAgICAgIC8vIFBhc3NpbmcgdGhlIGxvY2F0aW9uIGFyZyBoZXJlIGluZGljYXRlcyB0b1xuXHQgICAgICAgIC8vIHRoZSB1c2VyIHRoYXQgdGhpcyBpcyBhIHRyYW5zaXRpb24gaG9vay5cblx0ICAgICAgICByZXN1bHQgPSBob29rc1tpXShsb2NhdGlvbik7XG5cdCAgICAgIH1cblxuXHQgICAgICBjYWxsYmFjayhyZXN1bHQpO1xuXHQgICAgfSk7XG5cdCAgfVxuXG5cdCAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHVudGVzdGFibGUgd2l0aCBLYXJtYSAqL1xuXHQgIGZ1bmN0aW9uIGJlZm9yZVVubG9hZEhvb2soKSB7XG5cdCAgICAvLyBTeW5jaHJvbm91c2x5IGNoZWNrIHRvIHNlZSBpZiBhbnkgcm91dGUgaG9va3Mgd2FudFxuXHQgICAgLy8gdG8gcHJldmVudCB0aGUgY3VycmVudCB3aW5kb3cvdGFiIGZyb20gY2xvc2luZy5cblx0ICAgIGlmIChzdGF0ZS5yb3V0ZXMpIHtcblx0ICAgICAgdmFyIGhvb2tzID0gZ2V0Um91dGVIb29rc0ZvclJvdXRlcyhzdGF0ZS5yb3V0ZXMpO1xuXG5cdCAgICAgIHZhciBtZXNzYWdlID0gdm9pZCAwO1xuXHQgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaG9va3MubGVuZ3RoOyB0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycgJiYgaSA8IGxlbjsgKytpKSB7XG5cdCAgICAgICAgLy8gUGFzc2luZyBubyBhcmdzIGluZGljYXRlcyB0byB0aGUgdXNlciB0aGF0IHRoaXMgaXMgYVxuXHQgICAgICAgIC8vIGJlZm9yZXVubG9hZCBob29rLiBXZSBkb24ndCBrbm93IHRoZSBuZXh0IGxvY2F0aW9uLlxuXHQgICAgICAgIG1lc3NhZ2UgPSBob29rc1tpXSgpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIG1lc3NhZ2U7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgdmFyIHVubGlzdGVuQmVmb3JlID0gdm9pZCAwLFxuXHQgICAgICB1bmxpc3RlbkJlZm9yZVVubG9hZCA9IHZvaWQgMDtcblxuXHQgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbkJlZm9yZUhvb2tzRm9yUm91dGUocm91dGUpIHtcblx0ICAgIHZhciByb3V0ZUlEID0gZ2V0Um91dGVJRChyb3V0ZSwgZmFsc2UpO1xuXHQgICAgaWYgKCFyb3V0ZUlEKSB7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgZGVsZXRlIFJvdXRlSG9va3Nbcm91dGVJRF07XG5cblx0ICAgIGlmICghaGFzQW55UHJvcGVydGllcyhSb3V0ZUhvb2tzKSkge1xuXHQgICAgICAvLyB0ZWFyZG93biB0cmFuc2l0aW9uICYgYmVmb3JldW5sb2FkIGhvb2tzXG5cdCAgICAgIGlmICh1bmxpc3RlbkJlZm9yZSkge1xuXHQgICAgICAgIHVubGlzdGVuQmVmb3JlKCk7XG5cdCAgICAgICAgdW5saXN0ZW5CZWZvcmUgPSBudWxsO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKHVubGlzdGVuQmVmb3JlVW5sb2FkKSB7XG5cdCAgICAgICAgdW5saXN0ZW5CZWZvcmVVbmxvYWQoKTtcblx0ICAgICAgICB1bmxpc3RlbkJlZm9yZVVubG9hZCA9IG51bGw7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cblx0ICAvKipcblx0ICAgKiBSZWdpc3RlcnMgdGhlIGdpdmVuIGhvb2sgZnVuY3Rpb24gdG8gcnVuIGJlZm9yZSBsZWF2aW5nIHRoZSBnaXZlbiByb3V0ZS5cblx0ICAgKlxuXHQgICAqIER1cmluZyBhIG5vcm1hbCB0cmFuc2l0aW9uLCB0aGUgaG9vayBmdW5jdGlvbiByZWNlaXZlcyB0aGUgbmV4dCBsb2NhdGlvblxuXHQgICAqIGFzIGl0cyBvbmx5IGFyZ3VtZW50IGFuZCBjYW4gcmV0dXJuIGVpdGhlciBhIHByb21wdCBtZXNzYWdlIChzdHJpbmcpIHRvIHNob3cgdGhlIHVzZXIsXG5cdCAgICogdG8gbWFrZSBzdXJlIHRoZXkgd2FudCB0byBsZWF2ZSB0aGUgcGFnZTsgb3IgYGZhbHNlYCwgdG8gcHJldmVudCB0aGUgdHJhbnNpdGlvbi5cblx0ICAgKiBBbnkgb3RoZXIgcmV0dXJuIHZhbHVlIHdpbGwgaGF2ZSBubyBlZmZlY3QuXG5cdCAgICpcblx0ICAgKiBEdXJpbmcgdGhlIGJlZm9yZXVubG9hZCBldmVudCAoaW4gYnJvd3NlcnMpIHRoZSBob29rIHJlY2VpdmVzIG5vIGFyZ3VtZW50cy5cblx0ICAgKiBJbiB0aGlzIGNhc2UgaXQgbXVzdCByZXR1cm4gYSBwcm9tcHQgbWVzc2FnZSB0byBwcmV2ZW50IHRoZSB0cmFuc2l0aW9uLlxuXHQgICAqXG5cdCAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gdW5iaW5kIHRoZSBsaXN0ZW5lci5cblx0ICAgKi9cblx0ICBmdW5jdGlvbiBsaXN0ZW5CZWZvcmVMZWF2aW5nUm91dGUocm91dGUsIGhvb2spIHtcblx0ICAgIC8vIFRPRE86IFdhcm4gaWYgdGhleSByZWdpc3RlciBmb3IgYSByb3V0ZSB0aGF0IGlzbid0IGN1cnJlbnRseVxuXHQgICAgLy8gYWN0aXZlLiBUaGV5J3JlIHByb2JhYmx5IGRvaW5nIHNvbWV0aGluZyB3cm9uZywgbGlrZSByZS1jcmVhdGluZ1xuXHQgICAgLy8gcm91dGUgb2JqZWN0cyBvbiBldmVyeSBsb2NhdGlvbiBjaGFuZ2UuXG5cdCAgICB2YXIgcm91dGVJRCA9IGdldFJvdXRlSUQocm91dGUpO1xuXHQgICAgdmFyIGhvb2tzID0gUm91dGVIb29rc1tyb3V0ZUlEXTtcblxuXHQgICAgaWYgKCFob29rcykge1xuXHQgICAgICB2YXIgdGhlcmVXZXJlTm9Sb3V0ZUhvb2tzID0gIWhhc0FueVByb3BlcnRpZXMoUm91dGVIb29rcyk7XG5cblx0ICAgICAgUm91dGVIb29rc1tyb3V0ZUlEXSA9IFtob29rXTtcblxuXHQgICAgICBpZiAodGhlcmVXZXJlTm9Sb3V0ZUhvb2tzKSB7XG5cdCAgICAgICAgLy8gc2V0dXAgdHJhbnNpdGlvbiAmIGJlZm9yZXVubG9hZCBob29rc1xuXHQgICAgICAgIHVubGlzdGVuQmVmb3JlID0gaGlzdG9yeS5saXN0ZW5CZWZvcmUodHJhbnNpdGlvbkhvb2spO1xuXG5cdCAgICAgICAgaWYgKGhpc3RvcnkubGlzdGVuQmVmb3JlVW5sb2FkKSB1bmxpc3RlbkJlZm9yZVVubG9hZCA9IGhpc3RvcnkubGlzdGVuQmVmb3JlVW5sb2FkKGJlZm9yZVVubG9hZEhvb2spO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpZiAoaG9va3MuaW5kZXhPZihob29rKSA9PT0gLTEpIHtcblx0ICAgICAgICAgdHJ1ZSA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdhZGRpbmcgbXVsdGlwbGUgbGVhdmUgaG9va3MgZm9yIHRoZSBzYW1lIHJvdXRlIGlzIGRlcHJlY2F0ZWQ7IG1hbmFnZSBtdWx0aXBsZSBjb25maXJtYXRpb25zIGluIHlvdXIgb3duIGNvZGUgaW5zdGVhZCcpIDogdm9pZCAwO1xuXG5cdCAgICAgICAgaG9va3MucHVzaChob29rKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgaG9va3MgPSBSb3V0ZUhvb2tzW3JvdXRlSURdO1xuXG5cdCAgICAgIGlmIChob29rcykge1xuXHQgICAgICAgIHZhciBuZXdIb29rcyA9IGhvb2tzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGhvb2s7XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICBpZiAobmV3SG9va3MubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICByZW1vdmVMaXN0ZW5CZWZvcmVIb29rc0ZvclJvdXRlKHJvdXRlKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgUm91dGVIb29rc1tyb3V0ZUlEXSA9IG5ld0hvb2tzO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9XG5cblx0ICAvKipcblx0ICAgKiBUaGlzIGlzIHRoZSBBUEkgZm9yIHN0YXRlZnVsIGVudmlyb25tZW50cy4gQXMgdGhlIGxvY2F0aW9uXG5cdCAgICogY2hhbmdlcywgd2UgdXBkYXRlIHN0YXRlIGFuZCBjYWxsIHRoZSBsaXN0ZW5lci4gV2UgY2FuIGFsc29cblx0ICAgKiBncmFjZWZ1bGx5IGhhbmRsZSBlcnJvcnMgYW5kIHJlZGlyZWN0cy5cblx0ICAgKi9cblx0ICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcblx0ICAgIC8vIFRPRE86IE9ubHkgdXNlIGEgc2luZ2xlIGhpc3RvcnkgbGlzdGVuZXIuIE90aGVyd2lzZSB3ZSdsbFxuXHQgICAgLy8gZW5kIHVwIHdpdGggbXVsdGlwbGUgY29uY3VycmVudCBjYWxscyB0byBtYXRjaC5cblx0ICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcblx0ICAgICAgaWYgKHN0YXRlLmxvY2F0aW9uID09PSBsb2NhdGlvbikge1xuXHQgICAgICAgIGxpc3RlbmVyKG51bGwsIHN0YXRlKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBtYXRjaChsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCByZWRpcmVjdExvY2F0aW9uLCBuZXh0U3RhdGUpIHtcblx0ICAgICAgICAgIGlmIChlcnJvcikge1xuXHQgICAgICAgICAgICBsaXN0ZW5lcihlcnJvcik7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKHJlZGlyZWN0TG9jYXRpb24pIHtcblx0ICAgICAgICAgICAgaGlzdG9yeS50cmFuc2l0aW9uVG8ocmVkaXJlY3RMb2NhdGlvbik7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKG5leHRTdGF0ZSkge1xuXHQgICAgICAgICAgICBsaXN0ZW5lcihudWxsLCBuZXh0U3RhdGUpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgIHRydWUgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnTG9jYXRpb24gXCIlc1wiIGRpZCBub3QgbWF0Y2ggYW55IHJvdXRlcycsIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCkgOiB2b2lkIDA7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH1cblxuXHQgIHJldHVybiB7XG5cdCAgICBpc0FjdGl2ZTogaXNBY3RpdmUsXG5cdCAgICBtYXRjaDogbWF0Y2gsXG5cdCAgICBsaXN0ZW5CZWZvcmVMZWF2aW5nUm91dGU6IGxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZSxcblx0ICAgIGxpc3RlbjogbGlzdGVuXG5cdCAgfTtcblx0fVxuXG5cdC8vZXhwb3J0IGRlZmF1bHQgdXNlUm91dGVzXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRleHBvcnRzLmFkZEV2ZW50TGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyO1xuXHRleHBvcnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSByZW1vdmVFdmVudExpc3RlbmVyO1xuXHRleHBvcnRzLmdldEhhc2hQYXRoID0gZ2V0SGFzaFBhdGg7XG5cdGV4cG9ydHMucmVwbGFjZUhhc2hQYXRoID0gcmVwbGFjZUhhc2hQYXRoO1xuXHRleHBvcnRzLmdldFdpbmRvd1BhdGggPSBnZXRXaW5kb3dQYXRoO1xuXHRleHBvcnRzLmdvID0gZ287XG5cdGV4cG9ydHMuZ2V0VXNlckNvbmZpcm1hdGlvbiA9IGdldFVzZXJDb25maXJtYXRpb247XG5cdGV4cG9ydHMuc3VwcG9ydHNIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5O1xuXHRleHBvcnRzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2g7XG5cblx0ZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcblx0ICBpZiAobm9kZS5hZGRFdmVudExpc3RlbmVyKSB7XG5cdCAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG5cdCAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcblx0ICBpZiAobm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG5cdCAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG5cdCAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG5cdCAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuXHQgIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG5cdCAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KCcjJylbMV0gfHwgJyc7XG5cdH1cblxuXHRmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuXHQgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyAnIycgKyBwYXRoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFdpbmRvd1BhdGgoKSB7XG5cdCAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0fVxuXG5cdGZ1bmN0aW9uIGdvKG4pIHtcblx0ICBpZiAobikgd2luZG93Lmhpc3RvcnkuZ28obik7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVc2VyQ29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG5cdCAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cblx0ICpcblx0ICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuXHQgKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuXHQgKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWNrdC9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuXHQgKi9cblxuXHRmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG5cdCAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcblx0ICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHtcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdCAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cblx0ICovXG5cblx0ZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG5cdCAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcblx0ICByZXR1cm4gdWEuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcblx0fVxuXG4vKioqLyB9LFxuLyogMTggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuXHR2YXIgX3dhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdHZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuXHRmdW5jdGlvbiBkZXByZWNhdGUoZm4sIG1lc3NhZ2UpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ1toaXN0b3J5XSAnICsgbWVzc2FnZSkgOiB1bmRlZmluZWQ7XG5cdCAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICB9O1xuXHR9XG5cblx0ZXhwb3J0c1snZGVmYXVsdCddID0gZGVwcmVjYXRlO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDE5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cblx0dmFyIF93YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuXHR2YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cblx0ZnVuY3Rpb24gcnVuVHJhbnNpdGlvbkhvb2soaG9vaywgbG9jYXRpb24sIGNhbGxiYWNrKSB7XG5cdCAgdmFyIHJlc3VsdCA9IGhvb2sobG9jYXRpb24sIGNhbGxiYWNrKTtcblxuXHQgIGlmIChob29rLmxlbmd0aCA8IDIpIHtcblx0ICAgIC8vIEFzc3VtZSB0aGUgaG9vayBydW5zIHN5bmNocm9ub3VzbHkgYW5kIGF1dG9tYXRpY2FsbHlcblx0ICAgIC8vIGNhbGwgdGhlIGNhbGxiYWNrIHdpdGggdGhlIHJldHVybiB2YWx1ZS5cblx0ICAgIGNhbGxiYWNrKHJlc3VsdCk7XG5cdCAgfSBlbHNlIHtcblx0ICAgICB0cnVlID8gX3dhcm5pbmcyWydkZWZhdWx0J10ocmVzdWx0ID09PSB1bmRlZmluZWQsICdZb3Ugc2hvdWxkIG5vdCBcInJldHVyblwiIGluIGEgdHJhbnNpdGlvbiBob29rIHdpdGggYSBjYWxsYmFjayBhcmd1bWVudDsgY2FsbCB0aGUgY2FsbGJhY2sgaW5zdGVhZCcpIDogdW5kZWZpbmVkO1xuXHQgIH1cblx0fVxuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IHJ1blRyYW5zaXRpb25Ib29rO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDIwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5cdHZhciBfcm91dGVyV2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5cdHZhciBfaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuXHR2YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG5cdHZhciBfUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cblx0dmFyIF9SZWFjdCRQcm9wVHlwZXMgPSBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzO1xuXHR2YXIgYm9vbCA9IF9SZWFjdCRQcm9wVHlwZXMuYm9vbDtcblx0dmFyIG9iamVjdCA9IF9SZWFjdCRQcm9wVHlwZXMub2JqZWN0O1xuXHR2YXIgc3RyaW5nID0gX1JlYWN0JFByb3BUeXBlcy5zdHJpbmc7XG5cdHZhciBmdW5jID0gX1JlYWN0JFByb3BUeXBlcy5mdW5jO1xuXHR2YXIgb25lT2ZUeXBlID0gX1JlYWN0JFByb3BUeXBlcy5vbmVPZlR5cGU7XG5cblxuXHRmdW5jdGlvbiBpc0xlZnRDbGlja0V2ZW50KGV2ZW50KSB7XG5cdCAgcmV0dXJuIGV2ZW50LmJ1dHRvbiA9PT0gMDtcblx0fVxuXG5cdGZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuXHQgIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcblx0fVxuXG5cdC8vIFRPRE86IERlLWR1cGxpY2F0ZSBhZ2FpbnN0IGhhc0FueVByb3BlcnRpZXMgaW4gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuXG5cdGZ1bmN0aW9uIGlzRW1wdHlPYmplY3Qob2JqZWN0KSB7XG5cdCAgZm9yICh2YXIgcCBpbiBvYmplY3QpIHtcblx0ICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwKSkgcmV0dXJuIGZhbHNlO1xuXHQgIH1yZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uRGVzY3JpcHRvcih0bywgX3JlZikge1xuXHQgIHZhciBxdWVyeSA9IF9yZWYucXVlcnk7XG5cdCAgdmFyIGhhc2ggPSBfcmVmLmhhc2g7XG5cdCAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuXHQgIGlmIChxdWVyeSB8fCBoYXNoIHx8IHN0YXRlKSB7XG5cdCAgICByZXR1cm4geyBwYXRobmFtZTogdG8sIHF1ZXJ5OiBxdWVyeSwgaGFzaDogaGFzaCwgc3RhdGU6IHN0YXRlIH07XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHRvO1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgPExpbms+IGlzIHVzZWQgdG8gY3JlYXRlIGFuIDxhPiBlbGVtZW50IHRoYXQgbGlua3MgdG8gYSByb3V0ZS5cblx0ICogV2hlbiB0aGF0IHJvdXRlIGlzIGFjdGl2ZSwgdGhlIGxpbmsgZ2V0cyB0aGUgdmFsdWUgb2YgaXRzXG5cdCAqIGFjdGl2ZUNsYXNzTmFtZSBwcm9wLlxuXHQgKlxuXHQgKiBGb3IgZXhhbXBsZSwgYXNzdW1pbmcgeW91IGhhdmUgdGhlIGZvbGxvd2luZyByb3V0ZTpcblx0ICpcblx0ICogICA8Um91dGUgcGF0aD1cIi9wb3N0cy86cG9zdElEXCIgY29tcG9uZW50PXtQb3N0fSAvPlxuXHQgKlxuXHQgKiBZb3UgY291bGQgdXNlIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50IHRvIGxpbmsgdG8gdGhhdCByb3V0ZTpcblx0ICpcblx0ICogICA8TGluayB0bz17YC9wb3N0cy8ke3Bvc3QuaWR9YH0gLz5cblx0ICpcblx0ICogTGlua3MgbWF5IHBhc3MgYWxvbmcgbG9jYXRpb24gc3RhdGUgYW5kL29yIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXJzXG5cdCAqIGluIHRoZSBzdGF0ZS9xdWVyeSBwcm9wcywgcmVzcGVjdGl2ZWx5LlxuXHQgKlxuXHQgKiAgIDxMaW5rIC4uLiBxdWVyeT17eyBzaG93OiB0cnVlIH19IHN0YXRlPXt7IHRoZTogJ3N0YXRlJyB9fSAvPlxuXHQgKi9cblx0dmFyIExpbmsgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuXHQgIGRpc3BsYXlOYW1lOiAnTGluaycsXG5cblxuXHQgIGNvbnRleHRUeXBlczoge1xuXHQgICAgcm91dGVyOiBfUHJvcFR5cGVzLnJvdXRlclNoYXBlXG5cdCAgfSxcblxuXHQgIHByb3BUeXBlczoge1xuXHQgICAgdG86IG9uZU9mVHlwZShbc3RyaW5nLCBvYmplY3RdKS5pc1JlcXVpcmVkLFxuXHQgICAgcXVlcnk6IG9iamVjdCxcblx0ICAgIGhhc2g6IHN0cmluZyxcblx0ICAgIHN0YXRlOiBvYmplY3QsXG5cdCAgICBhY3RpdmVTdHlsZTogb2JqZWN0LFxuXHQgICAgYWN0aXZlQ2xhc3NOYW1lOiBzdHJpbmcsXG5cdCAgICBvbmx5QWN0aXZlT25JbmRleDogYm9vbC5pc1JlcXVpcmVkLFxuXHQgICAgb25DbGljazogZnVuYyxcblx0ICAgIHRhcmdldDogc3RyaW5nXG5cdCAgfSxcblxuXHQgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgb25seUFjdGl2ZU9uSW5kZXg6IGZhbHNlLFxuXHQgICAgICBzdHlsZToge31cblx0ICAgIH07XG5cdCAgfSxcblx0ICBoYW5kbGVDbGljazogZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcblx0ICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2spIHRoaXMucHJvcHMub25DbGljayhldmVudCk7XG5cblx0ICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG5cblx0ICAgICF0aGlzLmNvbnRleHQucm91dGVyID8gIHRydWUgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UsICc8TGluaz5zIHJlbmRlcmVkIG91dHNpZGUgb2YgYSByb3V0ZXIgY29udGV4dCBjYW5ub3QgbmF2aWdhdGUuJykgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuXG5cdCAgICBpZiAoaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB8fCAhaXNMZWZ0Q2xpY2tFdmVudChldmVudCkpIHJldHVybjtcblxuXHQgICAgLy8gSWYgdGFyZ2V0IHByb3AgaXMgc2V0IChlLmcuIHRvIFwiX2JsYW5rXCIpLCBsZXQgYnJvd3NlciBoYW5kbGUgbGluay5cblx0ICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZjogdW50ZXN0YWJsZSB3aXRoIEthcm1hICovXG5cdCAgICBpZiAodGhpcy5wcm9wcy50YXJnZXQpIHJldHVybjtcblxuXHQgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHQgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG5cdCAgICB2YXIgdG8gPSBfcHJvcHMudG87XG5cdCAgICB2YXIgcXVlcnkgPSBfcHJvcHMucXVlcnk7XG5cdCAgICB2YXIgaGFzaCA9IF9wcm9wcy5oYXNoO1xuXHQgICAgdmFyIHN0YXRlID0gX3Byb3BzLnN0YXRlO1xuXG5cdCAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbkRlc2NyaXB0b3IodG8sIHsgcXVlcnk6IHF1ZXJ5LCBoYXNoOiBoYXNoLCBzdGF0ZTogc3RhdGUgfSk7XG5cblx0ICAgIHRoaXMuY29udGV4dC5yb3V0ZXIucHVzaChsb2NhdGlvbik7XG5cdCAgfSxcblx0ICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcztcblx0ICAgIHZhciB0byA9IF9wcm9wczIudG87XG5cdCAgICB2YXIgcXVlcnkgPSBfcHJvcHMyLnF1ZXJ5O1xuXHQgICAgdmFyIGhhc2ggPSBfcHJvcHMyLmhhc2g7XG5cdCAgICB2YXIgc3RhdGUgPSBfcHJvcHMyLnN0YXRlO1xuXHQgICAgdmFyIGFjdGl2ZUNsYXNzTmFtZSA9IF9wcm9wczIuYWN0aXZlQ2xhc3NOYW1lO1xuXHQgICAgdmFyIGFjdGl2ZVN0eWxlID0gX3Byb3BzMi5hY3RpdmVTdHlsZTtcblx0ICAgIHZhciBvbmx5QWN0aXZlT25JbmRleCA9IF9wcm9wczIub25seUFjdGl2ZU9uSW5kZXg7XG5cblx0ICAgIHZhciBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMyLCBbJ3RvJywgJ3F1ZXJ5JywgJ2hhc2gnLCAnc3RhdGUnLCAnYWN0aXZlQ2xhc3NOYW1lJywgJ2FjdGl2ZVN0eWxlJywgJ29ubHlBY3RpdmVPbkluZGV4J10pO1xuXG5cdCAgICAgdHJ1ZSA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoIShxdWVyeSB8fCBoYXNoIHx8IHN0YXRlKSwgJ3RoZSBgcXVlcnlgLCBgaGFzaGAsIGFuZCBgc3RhdGVgIHByb3BzIG9uIGA8TGluaz5gIGFyZSBkZXByZWNhdGVkLCB1c2UgYDxMaW5rIHRvPXt7IHBhdGhuYW1lLCBxdWVyeSwgaGFzaCwgc3RhdGUgfX0vPi4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLWlzQWN0aXZlZGVwcmVjYXRlZCcpIDogdm9pZCAwO1xuXG5cdCAgICAvLyBJZ25vcmUgaWYgcmVuZGVyZWQgb3V0c2lkZSB0aGUgY29udGV4dCBvZiByb3V0ZXIsIHNpbXBsaWZpZXMgdW5pdCB0ZXN0aW5nLlxuXHQgICAgdmFyIHJvdXRlciA9IHRoaXMuY29udGV4dC5yb3V0ZXI7XG5cblxuXHQgICAgaWYgKHJvdXRlcikge1xuXHQgICAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbkRlc2NyaXB0b3IodG8sIHsgcXVlcnk6IHF1ZXJ5LCBoYXNoOiBoYXNoLCBzdGF0ZTogc3RhdGUgfSk7XG5cdCAgICAgIHByb3BzLmhyZWYgPSByb3V0ZXIuY3JlYXRlSHJlZihsb2NhdGlvbik7XG5cblx0ICAgICAgaWYgKGFjdGl2ZUNsYXNzTmFtZSB8fCBhY3RpdmVTdHlsZSAhPSBudWxsICYmICFpc0VtcHR5T2JqZWN0KGFjdGl2ZVN0eWxlKSkge1xuXHQgICAgICAgIGlmIChyb3V0ZXIuaXNBY3RpdmUobG9jYXRpb24sIG9ubHlBY3RpdmVPbkluZGV4KSkge1xuXHQgICAgICAgICAgaWYgKGFjdGl2ZUNsYXNzTmFtZSkge1xuXHQgICAgICAgICAgICBpZiAocHJvcHMuY2xhc3NOYW1lKSB7XG5cdCAgICAgICAgICAgICAgcHJvcHMuY2xhc3NOYW1lICs9ICcgJyArIGFjdGl2ZUNsYXNzTmFtZTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICBwcm9wcy5jbGFzc05hbWUgPSBhY3RpdmVDbGFzc05hbWU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgaWYgKGFjdGl2ZVN0eWxlKSBwcm9wcy5zdHlsZSA9IF9leHRlbmRzKHt9LCBwcm9wcy5zdHlsZSwgYWN0aXZlU3R5bGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2EnLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljayB9KSk7XG5cdCAgfVxuXHR9KTtcblxuXHRleHBvcnRzLmRlZmF1bHQgPSBMaW5rO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDIxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuXHR2YXIgX2ludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cblx0dmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxuXHR2YXIgX1JvdXRlVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cdHZhciBfUGF0dGVyblV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxuXHR2YXIgX0ludGVybmFsUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdHZhciBfUmVhY3QkUHJvcFR5cGVzID0gX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcztcblx0dmFyIHN0cmluZyA9IF9SZWFjdCRQcm9wVHlwZXMuc3RyaW5nO1xuXHR2YXIgb2JqZWN0ID0gX1JlYWN0JFByb3BUeXBlcy5vYmplY3Q7XG5cblx0LyoqXG5cdCAqIEEgPFJlZGlyZWN0PiBpcyB1c2VkIHRvIGRlY2xhcmUgYW5vdGhlciBVUkwgcGF0aCBhIGNsaWVudCBzaG91bGRcblx0ICogYmUgc2VudCB0byB3aGVuIHRoZXkgcmVxdWVzdCBhIGdpdmVuIFVSTC5cblx0ICpcblx0ICogUmVkaXJlY3RzIGFyZSBwbGFjZWQgYWxvbmdzaWRlIHJvdXRlcyBpbiB0aGUgcm91dGUgY29uZmlndXJhdGlvblxuXHQgKiBhbmQgYXJlIHRyYXZlcnNlZCBpbiB0aGUgc2FtZSBtYW5uZXIuXG5cdCAqL1xuXG5cdHZhciBSZWRpcmVjdCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG5cdCAgZGlzcGxheU5hbWU6ICdSZWRpcmVjdCcsXG5cblxuXHQgIHN0YXRpY3M6IHtcblx0ICAgIGNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudDogZnVuY3Rpb24gY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQpIHtcblx0ICAgICAgdmFyIHJvdXRlID0gKDAsIF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCkoZWxlbWVudCk7XG5cblx0ICAgICAgaWYgKHJvdXRlLmZyb20pIHJvdXRlLnBhdGggPSByb3V0ZS5mcm9tO1xuXG5cdCAgICAgIHJvdXRlLm9uRW50ZXIgPSBmdW5jdGlvbiAobmV4dFN0YXRlLCByZXBsYWNlKSB7XG5cdCAgICAgICAgdmFyIGxvY2F0aW9uID0gbmV4dFN0YXRlLmxvY2F0aW9uO1xuXHQgICAgICAgIHZhciBwYXJhbXMgPSBuZXh0U3RhdGUucGFyYW1zO1xuXG5cblx0ICAgICAgICB2YXIgcGF0aG5hbWUgPSB2b2lkIDA7XG5cdCAgICAgICAgaWYgKHJvdXRlLnRvLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG5cdCAgICAgICAgICBwYXRobmFtZSA9ICgwLCBfUGF0dGVyblV0aWxzLmZvcm1hdFBhdHRlcm4pKHJvdXRlLnRvLCBwYXJhbXMpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoIXJvdXRlLnRvKSB7XG5cdCAgICAgICAgICBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YXIgcm91dGVJbmRleCA9IG5leHRTdGF0ZS5yb3V0ZXMuaW5kZXhPZihyb3V0ZSk7XG5cdCAgICAgICAgICB2YXIgcGFyZW50UGF0dGVybiA9IFJlZGlyZWN0LmdldFJvdXRlUGF0dGVybihuZXh0U3RhdGUucm91dGVzLCByb3V0ZUluZGV4IC0gMSk7XG5cdCAgICAgICAgICB2YXIgcGF0dGVybiA9IHBhcmVudFBhdHRlcm4ucmVwbGFjZSgvXFwvKiQvLCAnLycpICsgcm91dGUudG87XG5cdCAgICAgICAgICBwYXRobmFtZSA9ICgwLCBfUGF0dGVyblV0aWxzLmZvcm1hdFBhdHRlcm4pKHBhdHRlcm4sIHBhcmFtcyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmVwbGFjZSh7XG5cdCAgICAgICAgICBwYXRobmFtZTogcGF0aG5hbWUsXG5cdCAgICAgICAgICBxdWVyeTogcm91dGUucXVlcnkgfHwgbG9jYXRpb24ucXVlcnksXG5cdCAgICAgICAgICBzdGF0ZTogcm91dGUuc3RhdGUgfHwgbG9jYXRpb24uc3RhdGVcblx0ICAgICAgICB9KTtcblx0ICAgICAgfTtcblxuXHQgICAgICByZXR1cm4gcm91dGU7XG5cdCAgICB9LFxuXHQgICAgZ2V0Um91dGVQYXR0ZXJuOiBmdW5jdGlvbiBnZXRSb3V0ZVBhdHRlcm4ocm91dGVzLCByb3V0ZUluZGV4KSB7XG5cdCAgICAgIHZhciBwYXJlbnRQYXR0ZXJuID0gJyc7XG5cblx0ICAgICAgZm9yICh2YXIgaSA9IHJvdXRlSW5kZXg7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgdmFyIHJvdXRlID0gcm91dGVzW2ldO1xuXHQgICAgICAgIHZhciBwYXR0ZXJuID0gcm91dGUucGF0aCB8fCAnJztcblxuXHQgICAgICAgIHBhcmVudFBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcLyokLywgJy8nKSArIHBhcmVudFBhdHRlcm47XG5cblx0ICAgICAgICBpZiAocGF0dGVybi5pbmRleE9mKCcvJykgPT09IDApIGJyZWFrO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuICcvJyArIHBhcmVudFBhdHRlcm47XG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIHByb3BUeXBlczoge1xuXHQgICAgcGF0aDogc3RyaW5nLFxuXHQgICAgZnJvbTogc3RyaW5nLCAvLyBBbGlhcyBmb3IgcGF0aFxuXHQgICAgdG86IHN0cmluZy5pc1JlcXVpcmVkLFxuXHQgICAgcXVlcnk6IG9iamVjdCxcblx0ICAgIHN0YXRlOiBvYmplY3QsXG5cdCAgICBvbkVudGVyOiBfSW50ZXJuYWxQcm9wVHlwZXMuZmFsc3ksXG5cdCAgICBjaGlsZHJlbjogX0ludGVybmFsUHJvcFR5cGVzLmZhbHN5XG5cdCAgfSxcblxuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzYW5pdHkgY2hlY2sgKi9cblx0ICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICB0cnVlID8gIHRydWUgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UsICc8UmVkaXJlY3Q+IGVsZW1lbnRzIGFyZSBmb3Igcm91dGVyIGNvbmZpZ3VyYXRpb24gb25seSBhbmQgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCcpIDogKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlKSA6IHZvaWQgMDtcblx0ICB9XG5cdH0pO1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IFJlZGlyZWN0O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDIyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdGV4cG9ydHMuY3JlYXRlUm91dGVyT2JqZWN0ID0gY3JlYXRlUm91dGVyT2JqZWN0O1xuXHRleHBvcnRzLmNyZWF0ZVJvdXRpbmdIaXN0b3J5ID0gY3JlYXRlUm91dGluZ0hpc3Rvcnk7XG5cblx0dmFyIF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cblx0dmFyIF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZnVuY3Rpb24gY3JlYXRlUm91dGVyT2JqZWN0KGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKSB7XG5cdCAgcmV0dXJuIF9leHRlbmRzKHt9LCBoaXN0b3J5LCB7XG5cdCAgICBzZXRSb3V0ZUxlYXZlSG9vazogdHJhbnNpdGlvbk1hbmFnZXIubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlLFxuXHQgICAgaXNBY3RpdmU6IHRyYW5zaXRpb25NYW5hZ2VyLmlzQWN0aXZlXG5cdCAgfSk7XG5cdH1cblxuXHQvLyBkZXByZWNhdGVkXG5cdGZ1bmN0aW9uIGNyZWF0ZVJvdXRpbmdIaXN0b3J5KGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKSB7XG5cdCAgaGlzdG9yeSA9IF9leHRlbmRzKHt9LCBoaXN0b3J5LCB0cmFuc2l0aW9uTWFuYWdlcik7XG5cblx0ICBpZiAodHJ1ZSkge1xuXHQgICAgaGlzdG9yeSA9ICgwLCBfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllczIuZGVmYXVsdCkoaGlzdG9yeSwgJ2Bwcm9wcy5oaXN0b3J5YCBhbmQgYGNvbnRleHQuaGlzdG9yeWAgYXJlIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYGNvbnRleHQucm91dGVyYC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLWNvbnRleHRjaGFuZ2VzJyk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGhpc3Rvcnk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDIzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlTWVtb3J5SGlzdG9yeTtcblxuXHR2YXIgX3VzZVF1ZXJpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxuXHR2YXIgX3VzZVF1ZXJpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlUXVlcmllcyk7XG5cblx0dmFyIF91c2VCYXNlbmFtZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpO1xuXG5cdHZhciBfdXNlQmFzZW5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlQmFzZW5hbWUpO1xuXG5cdHZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeSA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXG5cdHZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3Rvcnkob3B0aW9ucykge1xuXHQgIC8vIHNpZ25hdHVyZXMgYW5kIHR5cGUgY2hlY2tpbmcgZGlmZmVyIGJldHdlZW4gYHVzZVJvdXRlc2AgYW5kXG5cdCAgLy8gYGNyZWF0ZU1lbW9yeUhpc3RvcnlgLCBoYXZlIHRvIGNyZWF0ZSBgbWVtb3J5SGlzdG9yeWAgZmlyc3QgYmVjYXVzZVxuXHQgIC8vIGB1c2VRdWVyaWVzYCBkb2Vzbid0IHVuZGVyc3RhbmQgdGhlIHNpZ25hdHVyZVxuXHQgIHZhciBtZW1vcnlIaXN0b3J5ID0gKDAsIF9jcmVhdGVNZW1vcnlIaXN0b3J5Mi5kZWZhdWx0KShvcHRpb25zKTtcblx0ICB2YXIgY3JlYXRlSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhpc3RvcnkoKSB7XG5cdCAgICByZXR1cm4gbWVtb3J5SGlzdG9yeTtcblx0ICB9O1xuXHQgIHZhciBoaXN0b3J5ID0gKDAsIF91c2VRdWVyaWVzMi5kZWZhdWx0KSgoMCwgX3VzZUJhc2VuYW1lMi5kZWZhdWx0KShjcmVhdGVIaXN0b3J5KSkob3B0aW9ucyk7XG5cdCAgaGlzdG9yeS5fX3YyX2NvbXBhdGlibGVfXyA9IHRydWU7XG5cdCAgcmV0dXJuIGhpc3Rvcnk7XG5cdH1cblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGNyZWF0ZUhpc3RvcnkpIHtcblx0ICB2YXIgaGlzdG9yeSA9IHZvaWQgMDtcblx0ICBpZiAoY2FuVXNlRE9NKSBoaXN0b3J5ID0gKDAsIF91c2VSb3V0ZXJIaXN0b3J5Mi5kZWZhdWx0KShjcmVhdGVIaXN0b3J5KSgpO1xuXHQgIHJldHVybiBoaXN0b3J5O1xuXHR9O1xuXG5cdHZhciBfdXNlUm91dGVySGlzdG9yeSA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXG5cdHZhciBfdXNlUm91dGVySGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VSb3V0ZXJIaXN0b3J5KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gbWFrZVN0YXRlV2l0aExvY2F0aW9uO1xuXG5cdHZhciBfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG5cdHZhciBfcm91dGVyV2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZnVuY3Rpb24gbWFrZVN0YXRlV2l0aExvY2F0aW9uKHN0YXRlLCBsb2NhdGlvbikge1xuXHQgIGlmICgoXCJkZXZlbG9wbWVudFwiKSAhPT0gJ3Byb2R1Y3Rpb24nICYmIF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzLmNhblVzZU1lbWJyYW5lKSB7XG5cdCAgICB2YXIgc3RhdGVXaXRoTG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgc3RhdGUpO1xuXG5cdCAgICAvLyBJIGRvbid0IHVzZSBkZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzIGhlcmUgYmVjYXVzZSBJIHdhbnQgdG8ga2VlcCB0aGVcblx0ICAgIC8vIHNhbWUgY29kZSBwYXRoIGJldHdlZW4gZGV2ZWxvcG1lbnQgYW5kIHByb2R1Y3Rpb24sIGluIHRoYXQgd2UganVzdFxuXHQgICAgLy8gYXNzaWduIGV4dHJhIHByb3BlcnRpZXMgdG8gdGhlIGNvcHkgb2YgdGhlIHN0YXRlIG9iamVjdCBpbiBib3RoIGNhc2VzLlxuXG5cdCAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChwcm9wKSB7XG5cdCAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGxvY2F0aW9uLCBwcm9wKSkge1xuXHQgICAgICAgIHJldHVybiAnY29udGludWUnO1xuXHQgICAgICB9XG5cblx0ICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN0YXRlV2l0aExvY2F0aW9uLCBwcm9wLCB7XG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgdHJ1ZSA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdBY2Nlc3NpbmcgbG9jYXRpb24gcHJvcGVydGllcyBkaXJlY3RseSBmcm9tIHRoZSBmaXJzdCBhcmd1bWVudCB0byBgZ2V0Q29tcG9uZW50YCwgYGdldENvbXBvbmVudHNgLCBgZ2V0Q2hpbGRSb3V0ZXNgLCBhbmQgYGdldEluZGV4Um91dGVgIGlzIGRlcHJlY2F0ZWQuIFRoYXQgYXJndW1lbnQgaXMgbm93IHRoZSByb3V0ZXIgc3RhdGUgKGBuZXh0U3RhdGVgIG9yIGBwYXJ0aWFsTmV4dFN0YXRlYCkgcmF0aGVyIHRoYW4gdGhlIGxvY2F0aW9uLiBUbyBhY2Nlc3MgdGhlIGxvY2F0aW9uLCB1c2UgYG5leHRTdGF0ZS5sb2NhdGlvbmAgb3IgYHBhcnRpYWxOZXh0U3RhdGUubG9jYXRpb25gLicpIDogdm9pZCAwO1xuXHQgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uW3Byb3BdO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXG5cdCAgICBmb3IgKHZhciBwcm9wIGluIGxvY2F0aW9uKSB7XG5cdCAgICAgIHZhciBfcmV0ID0gX2xvb3AocHJvcCk7XG5cblx0ICAgICAgaWYgKF9yZXQgPT09ICdjb250aW51ZScpIGNvbnRpbnVlO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gc3RhdGVXaXRoTG9jYXRpb247XG5cdCAgfVxuXG5cdCAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwgbG9jYXRpb24pO1xuXHR9XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHRleHBvcnRzLmRlZmF1bHQgPSB1c2VSb3V0ZXJIaXN0b3J5O1xuXG5cdHZhciBfdXNlUXVlcmllcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXG5cdHZhciBfdXNlUXVlcmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VRdWVyaWVzKTtcblxuXHR2YXIgX3VzZUJhc2VuYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG5cblx0dmFyIF91c2VCYXNlbmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VCYXNlbmFtZSk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiB1c2VSb3V0ZXJIaXN0b3J5KGNyZWF0ZUhpc3RvcnkpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgIHZhciBoaXN0b3J5ID0gKDAsIF91c2VRdWVyaWVzMi5kZWZhdWx0KSgoMCwgX3VzZUJhc2VuYW1lMi5kZWZhdWx0KShjcmVhdGVIaXN0b3J5KSkob3B0aW9ucyk7XG5cdCAgICBoaXN0b3J5Ll9fdjJfY29tcGF0aWJsZV9fID0gdHJ1ZTtcblx0ICAgIHJldHVybiBoaXN0b3J5O1xuXHQgIH07XG5cdH1cblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Lyplc2xpbnQtZGlzYWJsZSBuby1lbXB0eSAqL1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0ZXhwb3J0cy5zYXZlU3RhdGUgPSBzYXZlU3RhdGU7XG5cdGV4cG9ydHMucmVhZFN0YXRlID0gcmVhZFN0YXRlO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuXHR2YXIgX3dhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdHZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuXHR2YXIgS2V5UHJlZml4ID0gJ0BASGlzdG9yeS8nO1xuXHR2YXIgUXVvdGFFeGNlZWRlZEVycm9ycyA9IFsnUXVvdGFFeGNlZWRlZEVycm9yJywgJ1FVT1RBX0VYQ0VFREVEX0VSUiddO1xuXG5cdHZhciBTZWN1cml0eUVycm9yID0gJ1NlY3VyaXR5RXJyb3InO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUtleShrZXkpIHtcblx0ICByZXR1cm4gS2V5UHJlZml4ICsga2V5O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2F2ZVN0YXRlKGtleSwgc3RhdGUpIHtcblx0ICB0cnkge1xuXHQgICAgaWYgKHN0YXRlID09IG51bGwpIHtcblx0ICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oY3JlYXRlS2V5KGtleSkpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oY3JlYXRlS2V5KGtleSksIEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XG5cdCAgICB9XG5cdCAgfSBjYXRjaCAoZXJyb3IpIHtcblx0ICAgIGlmIChlcnJvci5uYW1lID09PSBTZWN1cml0eUVycm9yKSB7XG5cdCAgICAgIC8vIEJsb2NraW5nIGNvb2tpZXMgaW4gQ2hyb21lL0ZpcmVmb3gvU2FmYXJpIHRocm93cyBTZWN1cml0eUVycm9yIG9uIGFueVxuXHQgICAgICAvLyBhdHRlbXB0IHRvIGFjY2VzcyB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuXG5cdCAgICAgICB0cnVlID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdbaGlzdG9yeV0gVW5hYmxlIHRvIHNhdmUgc3RhdGU7IHNlc3Npb25TdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgZHVlIHRvIHNlY3VyaXR5IHNldHRpbmdzJykgOiB1bmRlZmluZWQ7XG5cblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoUXVvdGFFeGNlZWRlZEVycm9ycy5pbmRleE9mKGVycm9yLm5hbWUpID49IDAgJiYgd2luZG93LnNlc3Npb25TdG9yYWdlLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAvLyBTYWZhcmkgXCJwcml2YXRlIG1vZGVcIiB0aHJvd3MgUXVvdGFFeGNlZWRlZEVycm9yLlxuXHQgICAgICAgdHJ1ZSA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnW2hpc3RvcnldIFVuYWJsZSB0byBzYXZlIHN0YXRlOyBzZXNzaW9uU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlIGluIFNhZmFyaSBwcml2YXRlIG1vZGUnKSA6IHVuZGVmaW5lZDtcblxuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cblx0ICAgIHRocm93IGVycm9yO1xuXHQgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJlYWRTdGF0ZShrZXkpIHtcblx0ICB2YXIganNvbiA9IHVuZGVmaW5lZDtcblx0ICB0cnkge1xuXHQgICAganNvbiA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGNyZWF0ZUtleShrZXkpKTtcblx0ICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgaWYgKGVycm9yLm5hbWUgPT09IFNlY3VyaXR5RXJyb3IpIHtcblx0ICAgICAgLy8gQmxvY2tpbmcgY29va2llcyBpbiBDaHJvbWUvRmlyZWZveC9TYWZhcmkgdGhyb3dzIFNlY3VyaXR5RXJyb3Igb24gYW55XG5cdCAgICAgIC8vIGF0dGVtcHQgdG8gYWNjZXNzIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5cblx0ICAgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ1toaXN0b3J5XSBVbmFibGUgdG8gcmVhZCBzdGF0ZTsgc2Vzc2lvblN0b3JhZ2UgaXMgbm90IGF2YWlsYWJsZSBkdWUgdG8gc2VjdXJpdHkgc2V0dGluZ3MnKSA6IHVuZGVmaW5lZDtcblxuXHQgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH1cblx0ICB9XG5cblx0ICBpZiAoanNvbikge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvbik7XG5cdCAgICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgICAvLyBJZ25vcmUgaW52YWxpZCBKU09OLlxuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBudWxsO1xuXHR9XG5cbi8qKiovIH0sXG4vKiAyOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cblx0dmFyIF9pbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cdHZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cblx0dmFyIF9FeGVjdXRpb25FbnZpcm9ubWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG5cdHZhciBfRE9NVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblxuXHR2YXIgX2NyZWF0ZUhpc3RvcnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcblxuXHR2YXIgX2NyZWF0ZUhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlSGlzdG9yeSk7XG5cblx0ZnVuY3Rpb24gY3JlYXRlRE9NSGlzdG9yeShvcHRpb25zKSB7XG5cdCAgdmFyIGhpc3RvcnkgPSBfY3JlYXRlSGlzdG9yeTJbJ2RlZmF1bHQnXShfZXh0ZW5kcyh7XG5cdCAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBfRE9NVXRpbHMuZ2V0VXNlckNvbmZpcm1hdGlvblxuXHQgIH0sIG9wdGlvbnMsIHtcblx0ICAgIGdvOiBfRE9NVXRpbHMuZ29cblx0ICB9KSk7XG5cblx0ICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcblx0ICAgICFfRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gIHRydWUgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnRE9NIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuXG5cdCAgICByZXR1cm4gaGlzdG9yeS5saXN0ZW4obGlzdGVuZXIpO1xuXHQgIH1cblxuXHQgIHJldHVybiBfZXh0ZW5kcyh7fSwgaGlzdG9yeSwge1xuXHQgICAgbGlzdGVuOiBsaXN0ZW5cblx0ICB9KTtcblx0fVxuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZURPTUhpc3Rvcnk7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5cdHZhciBfd2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cblx0dmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5cdHZhciBfaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuXHR2YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG5cdHZhciBfQWN0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cblx0dmFyIF9QYXRoVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG5cdHZhciBfRXhlY3V0aW9uRW52aXJvbm1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblxuXHR2YXIgX0RPTVV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cblx0dmFyIF9ET01TdGF0ZVN0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblxuXHR2YXIgX2NyZWF0ZURPTUhpc3RvcnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcblxuXHR2YXIgX2NyZWF0ZURPTUhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlRE9NSGlzdG9yeSk7XG5cblx0ZnVuY3Rpb24gaXNBYnNvbHV0ZVBhdGgocGF0aCkge1xuXHQgIHJldHVybiB0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycgJiYgcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcblx0fVxuXG5cdGZ1bmN0aW9uIGVuc3VyZVNsYXNoKCkge1xuXHQgIHZhciBwYXRoID0gX0RPTVV0aWxzLmdldEhhc2hQYXRoKCk7XG5cblx0ICBpZiAoaXNBYnNvbHV0ZVBhdGgocGF0aCkpIHJldHVybiB0cnVlO1xuXG5cdCAgX0RPTVV0aWxzLnJlcGxhY2VIYXNoUGF0aCgnLycgKyBwYXRoKTtcblxuXHQgIHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZFF1ZXJ5U3RyaW5nVmFsdWVUb1BhdGgocGF0aCwga2V5LCB2YWx1ZSkge1xuXHQgIHJldHVybiBwYXRoICsgKHBhdGguaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyAoa2V5ICsgJz0nICsgdmFsdWUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc3RyaXBRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgocGF0aCwga2V5KSB7XG5cdCAgcmV0dXJuIHBhdGgucmVwbGFjZShuZXcgUmVnRXhwKCdbPyZdPycgKyBrZXkgKyAnPVthLXpBLVowLTldKycpLCAnJyk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgocGF0aCwga2V5KSB7XG5cdCAgdmFyIG1hdGNoID0gcGF0aC5tYXRjaChuZXcgUmVnRXhwKCdcXFxcPy4qP1xcXFxiJyArIGtleSArICc9KC4rPylcXFxcYicpKTtcblx0ICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV07XG5cdH1cblxuXHR2YXIgRGVmYXVsdFF1ZXJ5S2V5ID0gJ19rJztcblxuXHRmdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcblx0ICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG5cdCAgIV9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyAgdHJ1ZSA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuXG5cdCAgdmFyIHF1ZXJ5S2V5ID0gb3B0aW9ucy5xdWVyeUtleTtcblxuXHQgIGlmIChxdWVyeUtleSA9PT0gdW5kZWZpbmVkIHx8ICEhcXVlcnlLZXkpIHF1ZXJ5S2V5ID0gdHlwZW9mIHF1ZXJ5S2V5ID09PSAnc3RyaW5nJyA/IHF1ZXJ5S2V5IDogRGVmYXVsdFF1ZXJ5S2V5O1xuXG5cdCAgZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uKCkge1xuXHQgICAgdmFyIHBhdGggPSBfRE9NVXRpbHMuZ2V0SGFzaFBhdGgoKTtcblxuXHQgICAgdmFyIGtleSA9IHVuZGVmaW5lZCxcblx0ICAgICAgICBzdGF0ZSA9IHVuZGVmaW5lZDtcblx0ICAgIGlmIChxdWVyeUtleSkge1xuXHQgICAgICBrZXkgPSBnZXRRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgocGF0aCwgcXVlcnlLZXkpO1xuXHQgICAgICBwYXRoID0gc3RyaXBRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgocGF0aCwgcXVlcnlLZXkpO1xuXG5cdCAgICAgIGlmIChrZXkpIHtcblx0ICAgICAgICBzdGF0ZSA9IF9ET01TdGF0ZVN0b3JhZ2UucmVhZFN0YXRlKGtleSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgc3RhdGUgPSBudWxsO1xuXHQgICAgICAgIGtleSA9IGhpc3RvcnkuY3JlYXRlS2V5KCk7XG5cdCAgICAgICAgX0RPTVV0aWxzLnJlcGxhY2VIYXNoUGF0aChhZGRRdWVyeVN0cmluZ1ZhbHVlVG9QYXRoKHBhdGgsIHF1ZXJ5S2V5LCBrZXkpKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAga2V5ID0gc3RhdGUgPSBudWxsO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgbG9jYXRpb24gPSBfUGF0aFV0aWxzLnBhcnNlUGF0aChwYXRoKTtcblxuXHQgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlTG9jYXRpb24oX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7IHN0YXRlOiBzdGF0ZSB9KSwgdW5kZWZpbmVkLCBrZXkpO1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIHN0YXJ0SGFzaENoYW5nZUxpc3RlbmVyKF9yZWYpIHtcblx0ICAgIHZhciB0cmFuc2l0aW9uVG8gPSBfcmVmLnRyYW5zaXRpb25UbztcblxuXHQgICAgZnVuY3Rpb24gaGFzaENoYW5nZUxpc3RlbmVyKCkge1xuXHQgICAgICBpZiAoIWVuc3VyZVNsYXNoKCkpIHJldHVybjsgLy8gQWx3YXlzIG1ha2Ugc3VyZSBoYXNoZXMgYXJlIHByZWNlZWRlZCB3aXRoIGEgLy5cblxuXHQgICAgICB0cmFuc2l0aW9uVG8oZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuXHQgICAgfVxuXG5cdCAgICBlbnN1cmVTbGFzaCgpO1xuXHQgICAgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIod2luZG93LCAnaGFzaGNoYW5nZScsIGhhc2hDaGFuZ2VMaXN0ZW5lcik7XG5cblx0ICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgJ2hhc2hjaGFuZ2UnLCBoYXNoQ2hhbmdlTGlzdGVuZXIpO1xuXHQgICAgfTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBmaW5pc2hUcmFuc2l0aW9uKGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgYmFzZW5hbWUgPSBsb2NhdGlvbi5iYXNlbmFtZTtcblx0ICAgIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuXHQgICAgdmFyIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcblx0ICAgIHZhciBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXHQgICAgdmFyIGFjdGlvbiA9IGxvY2F0aW9uLmFjdGlvbjtcblx0ICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXk7XG5cblx0ICAgIGlmIChhY3Rpb24gPT09IF9BY3Rpb25zLlBPUCkgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvLlxuXG5cdCAgICB2YXIgcGF0aCA9IChiYXNlbmFtZSB8fCAnJykgKyBwYXRobmFtZSArIHNlYXJjaDtcblxuXHQgICAgaWYgKHF1ZXJ5S2V5KSB7XG5cdCAgICAgIHBhdGggPSBhZGRRdWVyeVN0cmluZ1ZhbHVlVG9QYXRoKHBhdGgsIHF1ZXJ5S2V5LCBrZXkpO1xuXHQgICAgICBfRE9NU3RhdGVTdG9yYWdlLnNhdmVTdGF0ZShrZXksIHN0YXRlKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIERyb3Aga2V5IGFuZCBzdGF0ZS5cblx0ICAgICAgbG9jYXRpb24ua2V5ID0gbG9jYXRpb24uc3RhdGUgPSBudWxsO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgY3VycmVudEhhc2ggPSBfRE9NVXRpbHMuZ2V0SGFzaFBhdGgoKTtcblxuXHQgICAgaWYgKGFjdGlvbiA9PT0gX0FjdGlvbnMuUFVTSCkge1xuXHQgICAgICBpZiAoY3VycmVudEhhc2ggIT09IHBhdGgpIHtcblx0ICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ1lvdSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoIHVzaW5nIGhhc2ggaGlzdG9yeScpIDogdW5kZWZpbmVkO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2UgaWYgKGN1cnJlbnRIYXNoICE9PSBwYXRoKSB7XG5cdCAgICAgIC8vIFJFUExBQ0Vcblx0ICAgICAgX0RPTVV0aWxzLnJlcGxhY2VIYXNoUGF0aChwYXRoKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICB2YXIgaGlzdG9yeSA9IF9jcmVhdGVET01IaXN0b3J5MlsnZGVmYXVsdCddKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG5cdCAgICBnZXRDdXJyZW50TG9jYXRpb246IGdldEN1cnJlbnRMb2NhdGlvbixcblx0ICAgIGZpbmlzaFRyYW5zaXRpb246IGZpbmlzaFRyYW5zaXRpb24sXG5cdCAgICBzYXZlU3RhdGU6IF9ET01TdGF0ZVN0b3JhZ2Uuc2F2ZVN0YXRlXG5cdCAgfSkpO1xuXG5cdCAgdmFyIGxpc3RlbmVyQ291bnQgPSAwLFxuXHQgICAgICBzdG9wSGFzaENoYW5nZUxpc3RlbmVyID0gdW5kZWZpbmVkO1xuXG5cdCAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGxpc3RlbmVyKSB7XG5cdCAgICBpZiAoKytsaXN0ZW5lckNvdW50ID09PSAxKSBzdG9wSGFzaENoYW5nZUxpc3RlbmVyID0gc3RhcnRIYXNoQ2hhbmdlTGlzdGVuZXIoaGlzdG9yeSk7XG5cblx0ICAgIHZhciB1bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuQmVmb3JlKGxpc3RlbmVyKTtcblxuXHQgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdW5saXN0ZW4oKTtcblxuXHQgICAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wSGFzaENoYW5nZUxpc3RlbmVyKCk7XG5cdCAgICB9O1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuXHQgICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcEhhc2hDaGFuZ2VMaXN0ZW5lciA9IHN0YXJ0SGFzaENoYW5nZUxpc3RlbmVyKGhpc3RvcnkpO1xuXG5cdCAgICB2YXIgdW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbihsaXN0ZW5lcik7XG5cblx0ICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHVubGlzdGVuKCk7XG5cblx0ICAgICAgaWYgKC0tbGlzdGVuZXJDb3VudCA9PT0gMCkgc3RvcEhhc2hDaGFuZ2VMaXN0ZW5lcigpO1xuXHQgICAgfTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBwdXNoKGxvY2F0aW9uKSB7XG5cdCAgICAgdHJ1ZSA/IF93YXJuaW5nMlsnZGVmYXVsdCddKHF1ZXJ5S2V5IHx8IGxvY2F0aW9uLnN0YXRlID09IG51bGwsICdZb3UgY2Fubm90IHVzZSBzdGF0ZSB3aXRob3V0IGEgcXVlcnlLZXkgaXQgd2lsbCBiZSBkcm9wcGVkJykgOiB1bmRlZmluZWQ7XG5cblx0ICAgIGhpc3RvcnkucHVzaChsb2NhdGlvbik7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbikge1xuXHQgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShxdWVyeUtleSB8fCBsb2NhdGlvbi5zdGF0ZSA9PSBudWxsLCAnWW91IGNhbm5vdCB1c2Ugc3RhdGUgd2l0aG91dCBhIHF1ZXJ5S2V5IGl0IHdpbGwgYmUgZHJvcHBlZCcpIDogdW5kZWZpbmVkO1xuXG5cdCAgICBoaXN0b3J5LnJlcGxhY2UobG9jYXRpb24pO1xuXHQgIH1cblxuXHQgIHZhciBnb0lzU3VwcG9ydGVkV2l0aG91dFJlbG9hZCA9IF9ET01VdGlscy5zdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuXG5cdCAgZnVuY3Rpb24gZ28obikge1xuXHQgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShnb0lzU3VwcG9ydGVkV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdW5kZWZpbmVkO1xuXG5cdCAgICBoaXN0b3J5LmdvKG4pO1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuXHQgICAgcmV0dXJuICcjJyArIGhpc3RvcnkuY3JlYXRlSHJlZihwYXRoKTtcblx0ICB9XG5cblx0ICAvLyBkZXByZWNhdGVkXG5cdCAgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG5cdCAgICBpZiAoKytsaXN0ZW5lckNvdW50ID09PSAxKSBzdG9wSGFzaENoYW5nZUxpc3RlbmVyID0gc3RhcnRIYXNoQ2hhbmdlTGlzdGVuZXIoaGlzdG9yeSk7XG5cblx0ICAgIGhpc3RvcnkucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKTtcblx0ICB9XG5cblx0ICAvLyBkZXByZWNhdGVkXG5cdCAgZnVuY3Rpb24gdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spIHtcblx0ICAgIGhpc3RvcnkudW5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spO1xuXG5cdCAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wSGFzaENoYW5nZUxpc3RlbmVyKCk7XG5cdCAgfVxuXG5cdCAgLy8gZGVwcmVjYXRlZFxuXHQgIGZ1bmN0aW9uIHB1c2hTdGF0ZShzdGF0ZSwgcGF0aCkge1xuXHQgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShxdWVyeUtleSB8fCBzdGF0ZSA9PSBudWxsLCAnWW91IGNhbm5vdCB1c2Ugc3RhdGUgd2l0aG91dCBhIHF1ZXJ5S2V5IGl0IHdpbGwgYmUgZHJvcHBlZCcpIDogdW5kZWZpbmVkO1xuXG5cdCAgICBoaXN0b3J5LnB1c2hTdGF0ZShzdGF0ZSwgcGF0aCk7XG5cdCAgfVxuXG5cdCAgLy8gZGVwcmVjYXRlZFxuXHQgIGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZShzdGF0ZSwgcGF0aCkge1xuXHQgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShxdWVyeUtleSB8fCBzdGF0ZSA9PSBudWxsLCAnWW91IGNhbm5vdCB1c2Ugc3RhdGUgd2l0aG91dCBhIHF1ZXJ5S2V5IGl0IHdpbGwgYmUgZHJvcHBlZCcpIDogdW5kZWZpbmVkO1xuXG5cdCAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgcGF0aCk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIF9leHRlbmRzKHt9LCBoaXN0b3J5LCB7XG5cdCAgICBsaXN0ZW5CZWZvcmU6IGxpc3RlbkJlZm9yZSxcblx0ICAgIGxpc3RlbjogbGlzdGVuLFxuXHQgICAgcHVzaDogcHVzaCxcblx0ICAgIHJlcGxhY2U6IHJlcGxhY2UsXG5cdCAgICBnbzogZ28sXG5cdCAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuXG5cdCAgICByZWdpc3RlclRyYW5zaXRpb25Ib29rOiByZWdpc3RlclRyYW5zaXRpb25Ib29rLCAvLyBkZXByZWNhdGVkIC0gd2FybmluZyBpcyBpbiBjcmVhdGVIaXN0b3J5XG5cdCAgICB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vaywgLy8gZGVwcmVjYXRlZCAtIHdhcm5pbmcgaXMgaW4gY3JlYXRlSGlzdG9yeVxuXHQgICAgcHVzaFN0YXRlOiBwdXNoU3RhdGUsIC8vIGRlcHJlY2F0ZWQgLSB3YXJuaW5nIGlzIGluIGNyZWF0ZUhpc3Rvcnlcblx0ICAgIHJlcGxhY2VTdGF0ZTogcmVwbGFjZVN0YXRlIC8vIGRlcHJlY2F0ZWQgLSB3YXJuaW5nIGlzIGluIGNyZWF0ZUhpc3Rvcnlcblx0ICB9KTtcblx0fVxuXG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZUhhc2hIaXN0b3J5O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDMwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuXHR2YXIgX3dhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdHZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuXHR2YXIgX2RlZXBFcXVhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTMpO1xuXG5cdHZhciBfZGVlcEVxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBFcXVhbCk7XG5cblx0dmFyIF9QYXRoVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG5cdHZhciBfQXN5bmNVdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpO1xuXG5cdHZhciBfQWN0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cblx0dmFyIF9jcmVhdGVMb2NhdGlvbjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KTtcblxuXHR2YXIgX2NyZWF0ZUxvY2F0aW9uMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUxvY2F0aW9uMik7XG5cblx0dmFyIF9ydW5UcmFuc2l0aW9uSG9vayA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXG5cdHZhciBfcnVuVHJhbnNpdGlvbkhvb2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnVuVHJhbnNpdGlvbkhvb2spO1xuXG5cdHZhciBfZGVwcmVjYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cblx0dmFyIF9kZXByZWNhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVwcmVjYXRlKTtcblxuXHRmdW5jdGlvbiBjcmVhdGVSYW5kb21LZXkobGVuZ3RoKSB7XG5cdCAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBsZW5ndGgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuXHQgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJlxuXHQgIC8vYS5hY3Rpb24gPT09IGIuYWN0aW9uICYmIC8vIERpZmZlcmVudCBhY3Rpb24gIT09IGxvY2F0aW9uIGNoYW5nZS5cblx0ICBhLmtleSA9PT0gYi5rZXkgJiYgX2RlZXBFcXVhbDJbJ2RlZmF1bHQnXShhLnN0YXRlLCBiLnN0YXRlKTtcblx0fVxuXG5cdHZhciBEZWZhdWx0S2V5TGVuZ3RoID0gNjtcblxuXHRmdW5jdGlvbiBjcmVhdGVIaXN0b3J5KCkge1xuXHQgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG5cdCAgdmFyIGdldEN1cnJlbnRMb2NhdGlvbiA9IG9wdGlvbnMuZ2V0Q3VycmVudExvY2F0aW9uO1xuXHQgIHZhciBmaW5pc2hUcmFuc2l0aW9uID0gb3B0aW9ucy5maW5pc2hUcmFuc2l0aW9uO1xuXHQgIHZhciBzYXZlU3RhdGUgPSBvcHRpb25zLnNhdmVTdGF0ZTtcblx0ICB2YXIgZ28gPSBvcHRpb25zLmdvO1xuXHQgIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gb3B0aW9ucy5nZXRVc2VyQ29uZmlybWF0aW9uO1xuXHQgIHZhciBrZXlMZW5ndGggPSBvcHRpb25zLmtleUxlbmd0aDtcblxuXHQgIGlmICh0eXBlb2Yga2V5TGVuZ3RoICE9PSAnbnVtYmVyJykga2V5TGVuZ3RoID0gRGVmYXVsdEtleUxlbmd0aDtcblxuXHQgIHZhciB0cmFuc2l0aW9uSG9va3MgPSBbXTtcblxuXHQgIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZShob29rKSB7XG5cdCAgICB0cmFuc2l0aW9uSG9va3MucHVzaChob29rKTtcblxuXHQgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdHJhbnNpdGlvbkhvb2tzID0gdHJhbnNpdGlvbkhvb2tzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgIHJldHVybiBpdGVtICE9PSBob29rO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgfVxuXG5cdCAgdmFyIGFsbEtleXMgPSBbXTtcblx0ICB2YXIgY2hhbmdlTGlzdGVuZXJzID0gW107XG5cdCAgdmFyIGxvY2F0aW9uID0gdW5kZWZpbmVkO1xuXG5cdCAgZnVuY3Rpb24gZ2V0Q3VycmVudCgpIHtcblx0ICAgIGlmIChwZW5kaW5nTG9jYXRpb24gJiYgcGVuZGluZ0xvY2F0aW9uLmFjdGlvbiA9PT0gX0FjdGlvbnMuUE9QKSB7XG5cdCAgICAgIHJldHVybiBhbGxLZXlzLmluZGV4T2YocGVuZGluZ0xvY2F0aW9uLmtleSk7XG5cdCAgICB9IGVsc2UgaWYgKGxvY2F0aW9uKSB7XG5cdCAgICAgIHJldHVybiBhbGxLZXlzLmluZGV4T2YobG9jYXRpb24ua2V5KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiAtMTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICBmdW5jdGlvbiB1cGRhdGVMb2NhdGlvbihuZXdMb2NhdGlvbikge1xuXHQgICAgdmFyIGN1cnJlbnQgPSBnZXRDdXJyZW50KCk7XG5cblx0ICAgIGxvY2F0aW9uID0gbmV3TG9jYXRpb247XG5cblx0ICAgIGlmIChsb2NhdGlvbi5hY3Rpb24gPT09IF9BY3Rpb25zLlBVU0gpIHtcblx0ICAgICAgYWxsS2V5cyA9IFtdLmNvbmNhdChhbGxLZXlzLnNsaWNlKDAsIGN1cnJlbnQgKyAxKSwgW2xvY2F0aW9uLmtleV0pO1xuXHQgICAgfSBlbHNlIGlmIChsb2NhdGlvbi5hY3Rpb24gPT09IF9BY3Rpb25zLlJFUExBQ0UpIHtcblx0ICAgICAgYWxsS2V5c1tjdXJyZW50XSA9IGxvY2F0aW9uLmtleTtcblx0ICAgIH1cblxuXHQgICAgY2hhbmdlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG5cdCAgICAgIGxpc3RlbmVyKGxvY2F0aW9uKTtcblx0ICAgIH0pO1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuXHQgICAgY2hhbmdlTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG5cdCAgICBpZiAobG9jYXRpb24pIHtcblx0ICAgICAgbGlzdGVuZXIobG9jYXRpb24pO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdmFyIF9sb2NhdGlvbiA9IGdldEN1cnJlbnRMb2NhdGlvbigpO1xuXHQgICAgICBhbGxLZXlzID0gW19sb2NhdGlvbi5rZXldO1xuXHQgICAgICB1cGRhdGVMb2NhdGlvbihfbG9jYXRpb24pO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgICBjaGFuZ2VMaXN0ZW5lcnMgPSBjaGFuZ2VMaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuXHQgICAgICB9KTtcblx0ICAgIH07XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgY2FsbGJhY2spIHtcblx0ICAgIF9Bc3luY1V0aWxzLmxvb3BBc3luYyh0cmFuc2l0aW9uSG9va3MubGVuZ3RoLCBmdW5jdGlvbiAoaW5kZXgsIG5leHQsIGRvbmUpIHtcblx0ICAgICAgX3J1blRyYW5zaXRpb25Ib29rMlsnZGVmYXVsdCddKHRyYW5zaXRpb25Ib29rc1tpbmRleF0sIGxvY2F0aW9uLCBmdW5jdGlvbiAocmVzdWx0KSB7XG5cdCAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG5cdCAgICAgICAgICBkb25lKHJlc3VsdCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIG5leHQoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfSwgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcblx0ICAgICAgaWYgKGdldFVzZXJDb25maXJtYXRpb24gJiYgdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihtZXNzYWdlLCBmdW5jdGlvbiAob2spIHtcblx0ICAgICAgICAgIGNhbGxiYWNrKG9rICE9PSBmYWxzZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgY2FsbGJhY2sobWVzc2FnZSAhPT0gZmFsc2UpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9XG5cblx0ICB2YXIgcGVuZGluZ0xvY2F0aW9uID0gdW5kZWZpbmVkO1xuXG5cdCAgZnVuY3Rpb24gdHJhbnNpdGlvblRvKG5leHRMb2NhdGlvbikge1xuXHQgICAgaWYgKGxvY2F0aW9uICYmIGxvY2F0aW9uc0FyZUVxdWFsKGxvY2F0aW9uLCBuZXh0TG9jYXRpb24pKSByZXR1cm47IC8vIE5vdGhpbmcgdG8gZG8uXG5cblx0ICAgIHBlbmRpbmdMb2NhdGlvbiA9IG5leHRMb2NhdGlvbjtcblxuXHQgICAgY29uZmlybVRyYW5zaXRpb25UbyhuZXh0TG9jYXRpb24sIGZ1bmN0aW9uIChvaykge1xuXHQgICAgICBpZiAocGVuZGluZ0xvY2F0aW9uICE9PSBuZXh0TG9jYXRpb24pIHJldHVybjsgLy8gVHJhbnNpdGlvbiB3YXMgaW50ZXJydXB0ZWQuXG5cblx0ICAgICAgaWYgKG9rKSB7XG5cdCAgICAgICAgLy8gdHJlYXQgUFVTSCB0byBjdXJyZW50IHBhdGggbGlrZSBSRVBMQUNFIHRvIGJlIGNvbnNpc3RlbnQgd2l0aCBicm93c2Vyc1xuXHQgICAgICAgIGlmIChuZXh0TG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QVVNIKSB7XG5cdCAgICAgICAgICB2YXIgcHJldlBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcblx0ICAgICAgICAgIHZhciBuZXh0UGF0aCA9IGNyZWF0ZVBhdGgobmV4dExvY2F0aW9uKTtcblxuXHQgICAgICAgICAgaWYgKG5leHRQYXRoID09PSBwcmV2UGF0aCAmJiBfZGVlcEVxdWFsMlsnZGVmYXVsdCddKGxvY2F0aW9uLnN0YXRlLCBuZXh0TG9jYXRpb24uc3RhdGUpKSBuZXh0TG9jYXRpb24uYWN0aW9uID0gX0FjdGlvbnMuUkVQTEFDRTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoZmluaXNoVHJhbnNpdGlvbihuZXh0TG9jYXRpb24pICE9PSBmYWxzZSkgdXBkYXRlTG9jYXRpb24obmV4dExvY2F0aW9uKTtcblx0ICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbiAmJiBuZXh0TG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHtcblx0ICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGxvY2F0aW9uLmtleSk7XG5cdCAgICAgICAgdmFyIG5leHRJbmRleCA9IGFsbEtleXMuaW5kZXhPZihuZXh0TG9jYXRpb24ua2V5KTtcblxuXHQgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xICYmIG5leHRJbmRleCAhPT0gLTEpIGdvKHByZXZJbmRleCAtIG5leHRJbmRleCk7IC8vIFJlc3RvcmUgdGhlIFVSTC5cblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gcHVzaChsb2NhdGlvbikge1xuXHQgICAgdHJhbnNpdGlvblRvKGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uLCBfQWN0aW9ucy5QVVNILCBjcmVhdGVLZXkoKSkpO1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIHJlcGxhY2UobG9jYXRpb24pIHtcblx0ICAgIHRyYW5zaXRpb25UbyhjcmVhdGVMb2NhdGlvbihsb2NhdGlvbiwgX0FjdGlvbnMuUkVQTEFDRSwgY3JlYXRlS2V5KCkpKTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBnb0JhY2soKSB7XG5cdCAgICBnbygtMSk7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuXHQgICAgZ28oMSk7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuXHQgICAgcmV0dXJuIGNyZWF0ZVJhbmRvbUtleShrZXlMZW5ndGgpO1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcblx0ICAgIGlmIChsb2NhdGlvbiA9PSBudWxsIHx8IHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycpIHJldHVybiBsb2NhdGlvbjtcblxuXHQgICAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG5cdCAgICB2YXIgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuXHQgICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cdCAgICB2YXIgcmVzdWx0ID0gcGF0aG5hbWU7XG5cblx0ICAgIGlmIChzZWFyY2gpIHJlc3VsdCArPSBzZWFyY2g7XG5cblx0ICAgIGlmIChoYXNoKSByZXN1bHQgKz0gaGFzaDtcblxuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG5cdCAgICByZXR1cm4gY3JlYXRlUGF0aChsb2NhdGlvbik7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24obG9jYXRpb24sIGFjdGlvbikge1xuXHQgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IGNyZWF0ZUtleSgpIDogYXJndW1lbnRzWzJdO1xuXG5cdCAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ1RoZSBzdGF0ZSAoMm5kKSBhcmd1bWVudCB0byBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uIGlzIGRlcHJlY2F0ZWQ7IHVzZSBhICcgKyAnbG9jYXRpb24gZGVzY3JpcHRvciBpbnN0ZWFkJykgOiB1bmRlZmluZWQ7XG5cblx0ICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycpIGxvY2F0aW9uID0gX1BhdGhVdGlscy5wYXJzZVBhdGgobG9jYXRpb24pO1xuXG5cdCAgICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7IHN0YXRlOiBhY3Rpb24gfSk7XG5cblx0ICAgICAgYWN0aW9uID0ga2V5O1xuXHQgICAgICBrZXkgPSBhcmd1bWVudHNbM10gfHwgY3JlYXRlS2V5KCk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBfY3JlYXRlTG9jYXRpb24zWydkZWZhdWx0J10obG9jYXRpb24sIGFjdGlvbiwga2V5KTtcblx0ICB9XG5cblx0ICAvLyBkZXByZWNhdGVkXG5cdCAgZnVuY3Rpb24gc2V0U3RhdGUoc3RhdGUpIHtcblx0ICAgIGlmIChsb2NhdGlvbikge1xuXHQgICAgICB1cGRhdGVMb2NhdGlvblN0YXRlKGxvY2F0aW9uLCBzdGF0ZSk7XG5cdCAgICAgIHVwZGF0ZUxvY2F0aW9uKGxvY2F0aW9uKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHVwZGF0ZUxvY2F0aW9uU3RhdGUoZ2V0Q3VycmVudExvY2F0aW9uKCksIHN0YXRlKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICBmdW5jdGlvbiB1cGRhdGVMb2NhdGlvblN0YXRlKGxvY2F0aW9uLCBzdGF0ZSkge1xuXHQgICAgbG9jYXRpb24uc3RhdGUgPSBfZXh0ZW5kcyh7fSwgbG9jYXRpb24uc3RhdGUsIHN0YXRlKTtcblx0ICAgIHNhdmVTdGF0ZShsb2NhdGlvbi5rZXksIGxvY2F0aW9uLnN0YXRlKTtcblx0ICB9XG5cblx0ICAvLyBkZXByZWNhdGVkXG5cdCAgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG5cdCAgICBpZiAodHJhbnNpdGlvbkhvb2tzLmluZGV4T2YoaG9vaykgPT09IC0xKSB0cmFuc2l0aW9uSG9va3MucHVzaChob29rKTtcblx0ICB9XG5cblx0ICAvLyBkZXByZWNhdGVkXG5cdCAgZnVuY3Rpb24gdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spIHtcblx0ICAgIHRyYW5zaXRpb25Ib29rcyA9IHRyYW5zaXRpb25Ib29rcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgcmV0dXJuIGl0ZW0gIT09IGhvb2s7XG5cdCAgICB9KTtcblx0ICB9XG5cblx0ICAvLyBkZXByZWNhdGVkXG5cdCAgZnVuY3Rpb24gcHVzaFN0YXRlKHN0YXRlLCBwYXRoKSB7XG5cdCAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSBwYXRoID0gX1BhdGhVdGlscy5wYXJzZVBhdGgocGF0aCk7XG5cblx0ICAgIHB1c2goX2V4dGVuZHMoeyBzdGF0ZTogc3RhdGUgfSwgcGF0aCkpO1xuXHQgIH1cblxuXHQgIC8vIGRlcHJlY2F0ZWRcblx0ICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGgpIHtcblx0ICAgIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHBhdGggPSBfUGF0aFV0aWxzLnBhcnNlUGF0aChwYXRoKTtcblxuXHQgICAgcmVwbGFjZShfZXh0ZW5kcyh7IHN0YXRlOiBzdGF0ZSB9LCBwYXRoKSk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHtcblx0ICAgIGxpc3RlbkJlZm9yZTogbGlzdGVuQmVmb3JlLFxuXHQgICAgbGlzdGVuOiBsaXN0ZW4sXG5cdCAgICB0cmFuc2l0aW9uVG86IHRyYW5zaXRpb25Ubyxcblx0ICAgIHB1c2g6IHB1c2gsXG5cdCAgICByZXBsYWNlOiByZXBsYWNlLFxuXHQgICAgZ286IGdvLFxuXHQgICAgZ29CYWNrOiBnb0JhY2ssXG5cdCAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcblx0ICAgIGNyZWF0ZUtleTogY3JlYXRlS2V5LFxuXHQgICAgY3JlYXRlUGF0aDogY3JlYXRlUGF0aCxcblx0ICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG5cdCAgICBjcmVhdGVMb2NhdGlvbjogY3JlYXRlTG9jYXRpb24sXG5cblx0ICAgIHNldFN0YXRlOiBfZGVwcmVjYXRlMlsnZGVmYXVsdCddKHNldFN0YXRlLCAnc2V0U3RhdGUgaXMgZGVwcmVjYXRlZDsgdXNlIGxvY2F0aW9uLmtleSB0byBzYXZlIHN0YXRlIGluc3RlYWQnKSxcblx0ICAgIHJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocmVnaXN0ZXJUcmFuc2l0aW9uSG9vaywgJ3JlZ2lzdGVyVHJhbnNpdGlvbkhvb2sgaXMgZGVwcmVjYXRlZDsgdXNlIGxpc3RlbkJlZm9yZSBpbnN0ZWFkJyksXG5cdCAgICB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IF9kZXByZWNhdGUyWydkZWZhdWx0J10odW5yZWdpc3RlclRyYW5zaXRpb25Ib29rLCAndW5yZWdpc3RlclRyYW5zaXRpb25Ib29rIGlzIGRlcHJlY2F0ZWQ7IHVzZSB0aGUgY2FsbGJhY2sgcmV0dXJuZWQgZnJvbSBsaXN0ZW5CZWZvcmUgaW5zdGVhZCcpLFxuXHQgICAgcHVzaFN0YXRlOiBfZGVwcmVjYXRlMlsnZGVmYXVsdCddKHB1c2hTdGF0ZSwgJ3B1c2hTdGF0ZSBpcyBkZXByZWNhdGVkOyB1c2UgcHVzaCBpbnN0ZWFkJyksXG5cdCAgICByZXBsYWNlU3RhdGU6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocmVwbGFjZVN0YXRlLCAncmVwbGFjZVN0YXRlIGlzIGRlcHJlY2F0ZWQ7IHVzZSByZXBsYWNlIGluc3RlYWQnKVxuXHQgIH07XG5cdH1cblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVIaXN0b3J5O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDMxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuXHR2YXIgX3dhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5cdHZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuXHR2YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cblx0dmFyIF9QYXRoVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG5cdHZhciBfcnVuVHJhbnNpdGlvbkhvb2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblxuXHR2YXIgX3J1blRyYW5zaXRpb25Ib29rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3J1blRyYW5zaXRpb25Ib29rKTtcblxuXHR2YXIgX2RlcHJlY2F0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG5cdHZhciBfZGVwcmVjYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlcHJlY2F0ZSk7XG5cblx0ZnVuY3Rpb24gdXNlQmFzZW5hbWUoY3JlYXRlSGlzdG9yeSkge1xuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG5cdCAgICB2YXIgaGlzdG9yeSA9IGNyZWF0ZUhpc3Rvcnkob3B0aW9ucyk7XG5cblx0ICAgIHZhciBiYXNlbmFtZSA9IG9wdGlvbnMuYmFzZW5hbWU7XG5cblx0ICAgIHZhciBjaGVja2VkQmFzZUhyZWYgPSBmYWxzZTtcblxuXHQgICAgZnVuY3Rpb24gY2hlY2tCYXNlSHJlZigpIHtcblx0ICAgICAgaWYgKGNoZWNrZWRCYXNlSHJlZikge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXG5cdCAgICAgIC8vIEF1dG9tYXRpY2FsbHkgdXNlIHRoZSB2YWx1ZSBvZiA8YmFzZSBocmVmPiBpbiBIVE1MXG5cdCAgICAgIC8vIGRvY3VtZW50cyBhcyBiYXNlbmFtZSBpZiBpdCdzIG5vdCBleHBsaWNpdGx5IGdpdmVuLlxuXHQgICAgICBpZiAoYmFzZW5hbWUgPT0gbnVsbCAmJiBfRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG5cdCAgICAgICAgdmFyIGJhc2UgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYmFzZScpWzBdO1xuXHQgICAgICAgIHZhciBiYXNlSHJlZiA9IGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblxuXHQgICAgICAgIGlmIChiYXNlSHJlZiAhPSBudWxsKSB7XG5cdCAgICAgICAgICBiYXNlbmFtZSA9IGJhc2VIcmVmO1xuXG5cdCAgICAgICAgICAgdHJ1ZSA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnQXV0b21hdGljYWxseSBzZXR0aW5nIGJhc2VuYW1lIHVzaW5nIDxiYXNlIGhyZWY+IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgJyArICdiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFRoZSBzZW1hbnRpY3Mgb2YgPGJhc2UgaHJlZj4gYXJlICcgKyAnc3VidGx5IGRpZmZlcmVudCBmcm9tIGJhc2VuYW1lLiBQbGVhc2UgcGFzcyB0aGUgYmFzZW5hbWUgZXhwbGljaXRseSBpbiAnICsgJ3RoZSBvcHRpb25zIHRvIGNyZWF0ZUhpc3RvcnknKSA6IHVuZGVmaW5lZDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBjaGVja2VkQmFzZUhyZWYgPSB0cnVlO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBhZGRCYXNlbmFtZShsb2NhdGlvbikge1xuXHQgICAgICBjaGVja0Jhc2VIcmVmKCk7XG5cblx0ICAgICAgaWYgKGJhc2VuYW1lICYmIGxvY2F0aW9uLmJhc2VuYW1lID09IG51bGwpIHtcblx0ICAgICAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlbmFtZSkgPT09IDApIHtcblx0ICAgICAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyaW5nKGJhc2VuYW1lLmxlbmd0aCk7XG5cdCAgICAgICAgICBsb2NhdGlvbi5iYXNlbmFtZSA9IGJhc2VuYW1lO1xuXG5cdCAgICAgICAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09ICcnKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgbG9jYXRpb24uYmFzZW5hbWUgPSAnJztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4gbG9jYXRpb247XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHByZXBlbmRCYXNlbmFtZShsb2NhdGlvbikge1xuXHQgICAgICBjaGVja0Jhc2VIcmVmKCk7XG5cblx0ICAgICAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG5cdCAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnKSBsb2NhdGlvbiA9IF9QYXRoVXRpbHMucGFyc2VQYXRoKGxvY2F0aW9uKTtcblxuXHQgICAgICB2YXIgcG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcblx0ICAgICAgdmFyIG5vcm1hbGl6ZWRCYXNlbmFtZSA9IGJhc2VuYW1lLnNsaWNlKC0xKSA9PT0gJy8nID8gYmFzZW5hbWUgOiBiYXNlbmFtZSArICcvJztcblx0ICAgICAgdmFyIG5vcm1hbGl6ZWRQYXRobmFtZSA9IHBuYW1lLmNoYXJBdCgwKSA9PT0gJy8nID8gcG5hbWUuc2xpY2UoMSkgOiBwbmFtZTtcblx0ICAgICAgdmFyIHBhdGhuYW1lID0gbm9ybWFsaXplZEJhc2VuYW1lICsgbm9ybWFsaXplZFBhdGhuYW1lO1xuXG5cdCAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcblx0ICAgICAgICBwYXRobmFtZTogcGF0aG5hbWVcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgIC8vIE92ZXJyaWRlIGFsbCByZWFkIG1ldGhvZHMgd2l0aCBiYXNlbmFtZS1hd2FyZSB2ZXJzaW9ucy5cblx0ICAgIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZShob29rKSB7XG5cdCAgICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbkJlZm9yZShmdW5jdGlvbiAobG9jYXRpb24sIGNhbGxiYWNrKSB7XG5cdCAgICAgICAgX3J1blRyYW5zaXRpb25Ib29rMlsnZGVmYXVsdCddKGhvb2ssIGFkZEJhc2VuYW1lKGxvY2F0aW9uKSwgY2FsbGJhY2spO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG5cdCAgICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcblx0ICAgICAgICBsaXN0ZW5lcihhZGRCYXNlbmFtZShsb2NhdGlvbikpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblxuXHQgICAgLy8gT3ZlcnJpZGUgYWxsIHdyaXRlIG1ldGhvZHMgd2l0aCBiYXNlbmFtZS1hd2FyZSB2ZXJzaW9ucy5cblx0ICAgIGZ1bmN0aW9uIHB1c2gobG9jYXRpb24pIHtcblx0ICAgICAgaGlzdG9yeS5wdXNoKHByZXBlbmRCYXNlbmFtZShsb2NhdGlvbikpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiByZXBsYWNlKGxvY2F0aW9uKSB7XG5cdCAgICAgIGhpc3RvcnkucmVwbGFjZShwcmVwZW5kQmFzZW5hbWUobG9jYXRpb24pKTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuXHQgICAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVQYXRoKHByZXBlbmRCYXNlbmFtZShsb2NhdGlvbikpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG5cdCAgICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZUhyZWYocHJlcGVuZEJhc2VuYW1lKGxvY2F0aW9uKSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSB7XG5cdCAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIGFkZEJhc2VuYW1lKGhpc3RvcnkuY3JlYXRlTG9jYXRpb24uYXBwbHkoaGlzdG9yeSwgW3ByZXBlbmRCYXNlbmFtZShsb2NhdGlvbildLmNvbmNhdChhcmdzKSkpO1xuXHQgICAgfVxuXG5cdCAgICAvLyBkZXByZWNhdGVkXG5cdCAgICBmdW5jdGlvbiBwdXNoU3RhdGUoc3RhdGUsIHBhdGgpIHtcblx0ICAgICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgcGF0aCA9IF9QYXRoVXRpbHMucGFyc2VQYXRoKHBhdGgpO1xuXG5cdCAgICAgIHB1c2goX2V4dGVuZHMoeyBzdGF0ZTogc3RhdGUgfSwgcGF0aCkpO1xuXHQgICAgfVxuXG5cdCAgICAvLyBkZXByZWNhdGVkXG5cdCAgICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGgpIHtcblx0ICAgICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgcGF0aCA9IF9QYXRoVXRpbHMucGFyc2VQYXRoKHBhdGgpO1xuXG5cdCAgICAgIHJlcGxhY2UoX2V4dGVuZHMoeyBzdGF0ZTogc3RhdGUgfSwgcGF0aCkpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcblx0ICAgICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXG5cdCAgICAgIGxpc3RlbjogbGlzdGVuLFxuXHQgICAgICBwdXNoOiBwdXNoLFxuXHQgICAgICByZXBsYWNlOiByZXBsYWNlLFxuXHQgICAgICBjcmVhdGVQYXRoOiBjcmVhdGVQYXRoLFxuXHQgICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuXHQgICAgICBjcmVhdGVMb2NhdGlvbjogY3JlYXRlTG9jYXRpb24sXG5cblx0ICAgICAgcHVzaFN0YXRlOiBfZGVwcmVjYXRlMlsnZGVmYXVsdCddKHB1c2hTdGF0ZSwgJ3B1c2hTdGF0ZSBpcyBkZXByZWNhdGVkOyB1c2UgcHVzaCBpbnN0ZWFkJyksXG5cdCAgICAgIHJlcGxhY2VTdGF0ZTogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShyZXBsYWNlU3RhdGUsICdyZXBsYWNlU3RhdGUgaXMgZGVwcmVjYXRlZDsgdXNlIHJlcGxhY2UgaW5zdGVhZCcpXG5cdCAgICB9KTtcblx0ICB9O1xuXHR9XG5cblx0ZXhwb3J0c1snZGVmYXVsdCddID0gdXNlQmFzZW5hbWU7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMzIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfcm91dGVyV2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5cdHZhciBfSW50ZXJuYWxQcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0LyoqXG5cdCAqIEEgbWl4aW4gdGhhdCBhZGRzIHRoZSBcImhpc3RvcnlcIiBpbnN0YW5jZSB2YXJpYWJsZSB0byBjb21wb25lbnRzLlxuXHQgKi9cblx0dmFyIEhpc3RvcnkgPSB7XG5cblx0ICBjb250ZXh0VHlwZXM6IHtcblx0ICAgIGhpc3Rvcnk6IF9JbnRlcm5hbFByb3BUeXBlcy5oaXN0b3J5XG5cdCAgfSxcblxuXHQgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuXHQgICAgIHRydWUgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAndGhlIGBIaXN0b3J5YCBtaXhpbiBpcyBkZXByZWNhdGVkLCBwbGVhc2UgYWNjZXNzIGBjb250ZXh0LnJvdXRlcmAgd2l0aCB5b3VyIG93biBgY29udGV4dFR5cGVzYC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLWhpc3RvcnltaXhpbicpIDogdm9pZCAwO1xuXHQgICAgdGhpcy5oaXN0b3J5ID0gdGhpcy5jb250ZXh0Lmhpc3Rvcnk7XG5cdCAgfVxuXHR9O1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IEhpc3Rvcnk7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMzMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cblx0dmFyIF9MaW5rID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cblx0dmFyIF9MaW5rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xpbmspO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0LyoqXG5cdCAqIEFuIDxJbmRleExpbms+IGlzIHVzZWQgdG8gbGluayB0byBhbiA8SW5kZXhSb3V0ZT4uXG5cdCAqL1xuXHR2YXIgSW5kZXhMaW5rID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcblx0ICBkaXNwbGF5TmFtZTogJ0luZGV4TGluaycsXG5cdCAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xpbmsyLmRlZmF1bHQsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7IG9ubHlBY3RpdmVPbkluZGV4OiB0cnVlIH0pKTtcblx0ICB9XG5cdH0pO1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IEluZGV4TGluaztcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuXHR2YXIgX3JvdXRlcldhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm91dGVyV2FybmluZyk7XG5cblx0dmFyIF9pbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cdHZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cblx0dmFyIF9SZWRpcmVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXG5cdHZhciBfUmVkaXJlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVkaXJlY3QpO1xuXG5cdHZhciBfSW50ZXJuYWxQcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0dmFyIF9SZWFjdCRQcm9wVHlwZXMgPSBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzO1xuXHR2YXIgc3RyaW5nID0gX1JlYWN0JFByb3BUeXBlcy5zdHJpbmc7XG5cdHZhciBvYmplY3QgPSBfUmVhY3QkUHJvcFR5cGVzLm9iamVjdDtcblxuXHQvKipcblx0ICogQW4gPEluZGV4UmVkaXJlY3Q+IGlzIHVzZWQgdG8gcmVkaXJlY3QgZnJvbSBhbiBpbmRleFJvdXRlLlxuXHQgKi9cblxuXHR2YXIgSW5kZXhSZWRpcmVjdCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG5cdCAgZGlzcGxheU5hbWU6ICdJbmRleFJlZGlyZWN0JyxcblxuXG5cdCAgc3RhdGljczoge1xuXHQgICAgY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50OiBmdW5jdGlvbiBjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQoZWxlbWVudCwgcGFyZW50Um91dGUpIHtcblx0ICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2U6IHNhbml0eSBjaGVjayAqL1xuXHQgICAgICBpZiAocGFyZW50Um91dGUpIHtcblx0ICAgICAgICBwYXJlbnRSb3V0ZS5pbmRleFJvdXRlID0gX1JlZGlyZWN0Mi5kZWZhdWx0LmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50KTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgdHJ1ZSA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdBbiA8SW5kZXhSZWRpcmVjdD4gZG9lcyBub3QgbWFrZSBzZW5zZSBhdCB0aGUgcm9vdCBvZiB5b3VyIHJvdXRlIGNvbmZpZycpIDogdm9pZCAwO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSxcblxuXHQgIHByb3BUeXBlczoge1xuXHQgICAgdG86IHN0cmluZy5pc1JlcXVpcmVkLFxuXHQgICAgcXVlcnk6IG9iamVjdCxcblx0ICAgIHN0YXRlOiBvYmplY3QsXG5cdCAgICBvbkVudGVyOiBfSW50ZXJuYWxQcm9wVHlwZXMuZmFsc3ksXG5cdCAgICBjaGlsZHJlbjogX0ludGVybmFsUHJvcFR5cGVzLmZhbHN5XG5cdCAgfSxcblxuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzYW5pdHkgY2hlY2sgKi9cblx0ICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICB0cnVlID8gIHRydWUgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UsICc8SW5kZXhSZWRpcmVjdD4gZWxlbWVudHMgYXJlIGZvciByb3V0ZXIgY29uZmlndXJhdGlvbiBvbmx5IGFuZCBzaG91bGQgbm90IGJlIHJlbmRlcmVkJykgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuXHQgIH1cblx0fSk7XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gSW5kZXhSZWRpcmVjdDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuXHR2YXIgX3JvdXRlcldhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm91dGVyV2FybmluZyk7XG5cblx0dmFyIF9pbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cdHZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cblx0dmFyIF9Sb3V0ZVV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXHR2YXIgX0ludGVybmFsUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdHZhciBmdW5jID0gX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5mdW5jO1xuXG5cdC8qKlxuXHQgKiBBbiA8SW5kZXhSb3V0ZT4gaXMgdXNlZCB0byBzcGVjaWZ5IGl0cyBwYXJlbnQncyA8Um91dGUgaW5kZXhSb3V0ZT4gaW5cblx0ICogYSBKU1ggcm91dGUgY29uZmlnLlxuXHQgKi9cblxuXHR2YXIgSW5kZXhSb3V0ZSA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG5cdCAgZGlzcGxheU5hbWU6ICdJbmRleFJvdXRlJyxcblxuXG5cdCAgc3RhdGljczoge1xuXHQgICAgY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50OiBmdW5jdGlvbiBjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQoZWxlbWVudCwgcGFyZW50Um91dGUpIHtcblx0ICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2U6IHNhbml0eSBjaGVjayAqL1xuXHQgICAgICBpZiAocGFyZW50Um91dGUpIHtcblx0ICAgICAgICBwYXJlbnRSb3V0ZS5pbmRleFJvdXRlID0gKDAsIF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCkoZWxlbWVudCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgIHRydWUgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnQW4gPEluZGV4Um91dGU+IGRvZXMgbm90IG1ha2Ugc2Vuc2UgYXQgdGhlIHJvb3Qgb2YgeW91ciByb3V0ZSBjb25maWcnKSA6IHZvaWQgMDtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sXG5cblx0ICBwcm9wVHlwZXM6IHtcblx0ICAgIHBhdGg6IF9JbnRlcm5hbFByb3BUeXBlcy5mYWxzeSxcblx0ICAgIGNvbXBvbmVudDogX0ludGVybmFsUHJvcFR5cGVzLmNvbXBvbmVudCxcblx0ICAgIGNvbXBvbmVudHM6IF9JbnRlcm5hbFByb3BUeXBlcy5jb21wb25lbnRzLFxuXHQgICAgZ2V0Q29tcG9uZW50OiBmdW5jLFxuXHQgICAgZ2V0Q29tcG9uZW50czogZnVuY1xuXHQgIH0sXG5cblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2FuaXR5IGNoZWNrICovXG5cdCAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgdHJ1ZSA/ICB0cnVlID8gKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlLCAnPEluZGV4Um91dGU+IGVsZW1lbnRzIGFyZSBmb3Igcm91dGVyIGNvbmZpZ3VyYXRpb24gb25seSBhbmQgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCcpIDogKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlKSA6IHZvaWQgMDtcblx0ICB9XG5cdH0pO1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IEluZGV4Um91dGU7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMzYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfcm91dGVyV2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5cdHZhciBfaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuXHR2YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0dmFyIG9iamVjdCA9IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMub2JqZWN0O1xuXG5cdC8qKlxuXHQgKiBUaGUgTGlmZWN5Y2xlIG1peGluIGFkZHMgdGhlIHJvdXRlcldpbGxMZWF2ZSBsaWZlY3ljbGUgbWV0aG9kIHRvIGFcblx0ICogY29tcG9uZW50IHRoYXQgbWF5IGJlIHVzZWQgdG8gY2FuY2VsIGEgdHJhbnNpdGlvbiBvciBwcm9tcHQgdGhlIHVzZXJcblx0ICogZm9yIGNvbmZpcm1hdGlvbi5cblx0ICpcblx0ICogT24gc3RhbmRhcmQgdHJhbnNpdGlvbnMsIHJvdXRlcldpbGxMZWF2ZSByZWNlaXZlcyBhIHNpbmdsZSBhcmd1bWVudDogdGhlXG5cdCAqIGxvY2F0aW9uIHdlJ3JlIHRyYW5zaXRpb25pbmcgdG8uIFRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbiwgcmV0dXJuIGZhbHNlLlxuXHQgKiBUbyBwcm9tcHQgdGhlIHVzZXIgZm9yIGNvbmZpcm1hdGlvbiwgcmV0dXJuIGEgcHJvbXB0IG1lc3NhZ2UgKHN0cmluZykuXG5cdCAqXG5cdCAqIER1cmluZyB0aGUgYmVmb3JldW5sb2FkIGV2ZW50IChhc3N1bWluZyB5b3UncmUgdXNpbmcgdGhlIHVzZUJlZm9yZVVubG9hZFxuXHQgKiBoaXN0b3J5IGVuaGFuY2VyKSwgcm91dGVyV2lsbExlYXZlIGRvZXMgbm90IHJlY2VpdmUgYSBsb2NhdGlvbiBvYmplY3Rcblx0ICogYmVjYXVzZSBpdCBpc24ndCBwb3NzaWJsZSBmb3IgdXMgdG8ga25vdyB0aGUgbG9jYXRpb24gd2UncmUgdHJhbnNpdGlvbmluZ1xuXHQgKiB0by4gSW4gdGhpcyBjYXNlIHJvdXRlcldpbGxMZWF2ZSBtdXN0IHJldHVybiBhIHByb21wdCBtZXNzYWdlIHRvIHByZXZlbnRcblx0ICogdGhlIHVzZXIgZnJvbSBjbG9zaW5nIHRoZSB3aW5kb3cvdGFiLlxuXHQgKi9cblxuXHR2YXIgTGlmZWN5Y2xlID0ge1xuXG5cdCAgY29udGV4dFR5cGVzOiB7XG5cdCAgICBoaXN0b3J5OiBvYmplY3QuaXNSZXF1aXJlZCxcblx0ICAgIC8vIE5lc3RlZCBjaGlsZHJlbiByZWNlaXZlIHRoZSByb3V0ZSBhcyBjb250ZXh0LCBlaXRoZXJcblx0ICAgIC8vIHNldCBieSB0aGUgcm91dGUgY29tcG9uZW50IHVzaW5nIHRoZSBSb3V0ZUNvbnRleHQgbWl4aW5cblx0ICAgIC8vIG9yIGJ5IHNvbWUgb3RoZXIgYW5jZXN0b3IuXG5cdCAgICByb3V0ZTogb2JqZWN0XG5cdCAgfSxcblxuXHQgIHByb3BUeXBlczoge1xuXHQgICAgLy8gUm91dGUgY29tcG9uZW50cyByZWNlaXZlIHRoZSByb3V0ZSBvYmplY3QgYXMgYSBwcm9wLlxuXHQgICAgcm91dGU6IG9iamVjdFxuXHQgIH0sXG5cblx0ICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG5cdCAgICAgdHJ1ZSA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICd0aGUgYExpZmVjeWNsZWAgbWl4aW4gaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBgY29udGV4dC5yb3V0ZXIuc2V0Um91dGVMZWF2ZUhvb2socm91dGUsIGhvb2spYC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLWxpZmVjeWNsZW1peGluJykgOiB2b2lkIDA7XG5cdCAgICAhdGhpcy5yb3V0ZXJXaWxsTGVhdmUgPyAgdHJ1ZSA/ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSwgJ1RoZSBMaWZlY3ljbGUgbWl4aW4gcmVxdWlyZXMgeW91IHRvIGRlZmluZSBhIHJvdXRlcldpbGxMZWF2ZSBtZXRob2QnKSA6ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSkgOiB2b2lkIDA7XG5cblx0ICAgIHZhciByb3V0ZSA9IHRoaXMucHJvcHMucm91dGUgfHwgdGhpcy5jb250ZXh0LnJvdXRlO1xuXG5cdCAgICAhcm91dGUgPyAgdHJ1ZSA/ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSwgJ1RoZSBMaWZlY3ljbGUgbWl4aW4gbXVzdCBiZSB1c2VkIG9uIGVpdGhlciBhKSBhIDxSb3V0ZSBjb21wb25lbnQ+IG9yICcgKyAnYikgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlIGNvbXBvbmVudD4gdGhhdCB1c2VzIHRoZSBSb3V0ZUNvbnRleHQgbWl4aW4nKSA6ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSkgOiB2b2lkIDA7XG5cblx0ICAgIHRoaXMuX3VubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlID0gdGhpcy5jb250ZXh0Lmhpc3RvcnkubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlKHJvdXRlLCB0aGlzLnJvdXRlcldpbGxMZWF2ZSk7XG5cdCAgfSxcblx0ICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdCAgICBpZiAodGhpcy5fdW5saXN0ZW5CZWZvcmVMZWF2aW5nUm91dGUpIHRoaXMuX3VubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlKCk7XG5cdCAgfVxuXHR9O1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IExpZmVjeWNsZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cblx0dmFyIF9pbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cdHZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cblx0dmFyIF9Sb3V0ZVV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXHR2YXIgX0ludGVybmFsUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdHZhciBfUmVhY3QkUHJvcFR5cGVzID0gX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcztcblx0dmFyIHN0cmluZyA9IF9SZWFjdCRQcm9wVHlwZXMuc3RyaW5nO1xuXHR2YXIgZnVuYyA9IF9SZWFjdCRQcm9wVHlwZXMuZnVuYztcblxuXHQvKipcblx0ICogQSA8Um91dGU+IGlzIHVzZWQgdG8gZGVjbGFyZSB3aGljaCBjb21wb25lbnRzIGFyZSByZW5kZXJlZCB0byB0aGVcblx0ICogcGFnZSB3aGVuIHRoZSBVUkwgbWF0Y2hlcyBhIGdpdmVuIHBhdHRlcm4uXG5cdCAqXG5cdCAqIFJvdXRlcyBhcmUgYXJyYW5nZWQgaW4gYSBuZXN0ZWQgdHJlZSBzdHJ1Y3R1cmUuIFdoZW4gYSBuZXcgVVJMIGlzXG5cdCAqIHJlcXVlc3RlZCwgdGhlIHRyZWUgaXMgc2VhcmNoZWQgZGVwdGgtZmlyc3QgdG8gZmluZCBhIHJvdXRlIHdob3NlXG5cdCAqIHBhdGggbWF0Y2hlcyB0aGUgVVJMLiAgV2hlbiBvbmUgaXMgZm91bmQsIGFsbCByb3V0ZXMgaW4gdGhlIHRyZWVcblx0ICogdGhhdCBsZWFkIHRvIGl0IGFyZSBjb25zaWRlcmVkIFwiYWN0aXZlXCIgYW5kIHRoZWlyIGNvbXBvbmVudHMgYXJlXG5cdCAqIHJlbmRlcmVkIGludG8gdGhlIERPTSwgbmVzdGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIGluIHRoZSB0cmVlLlxuXHQgKi9cblxuXHR2YXIgUm91dGUgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuXHQgIGRpc3BsYXlOYW1lOiAnUm91dGUnLFxuXG5cblx0ICBzdGF0aWNzOiB7XG5cdCAgICBjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQ6IF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudFxuXHQgIH0sXG5cblx0ICBwcm9wVHlwZXM6IHtcblx0ICAgIHBhdGg6IHN0cmluZyxcblx0ICAgIGNvbXBvbmVudDogX0ludGVybmFsUHJvcFR5cGVzLmNvbXBvbmVudCxcblx0ICAgIGNvbXBvbmVudHM6IF9JbnRlcm5hbFByb3BUeXBlcy5jb21wb25lbnRzLFxuXHQgICAgZ2V0Q29tcG9uZW50OiBmdW5jLFxuXHQgICAgZ2V0Q29tcG9uZW50czogZnVuY1xuXHQgIH0sXG5cblx0ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2FuaXR5IGNoZWNrICovXG5cdCAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgdHJ1ZSA/ICB0cnVlID8gKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlLCAnPFJvdXRlPiBlbGVtZW50cyBhcmUgZm9yIHJvdXRlciBjb25maWd1cmF0aW9uIG9ubHkgYW5kIHNob3VsZCBub3QgYmUgcmVuZGVyZWQnKSA6ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSkgOiB2b2lkIDA7XG5cdCAgfVxuXHR9KTtcblxuXHRleHBvcnRzLmRlZmF1bHQgPSBSb3V0ZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuXHR2YXIgX3JvdXRlcldhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm91dGVyV2FybmluZyk7XG5cblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHR2YXIgb2JqZWN0ID0gX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5vYmplY3Q7XG5cblx0LyoqXG5cdCAqIFRoZSBSb3V0ZUNvbnRleHQgbWl4aW4gcHJvdmlkZXMgYSBjb252ZW5pZW50IHdheSBmb3Igcm91dGVcblx0ICogY29tcG9uZW50cyB0byBzZXQgdGhlIHJvdXRlIGluIGNvbnRleHQuIFRoaXMgaXMgbmVlZGVkIGZvclxuXHQgKiByb3V0ZXMgdGhhdCByZW5kZXIgZWxlbWVudHMgdGhhdCB3YW50IHRvIHVzZSB0aGUgTGlmZWN5Y2xlXG5cdCAqIG1peGluIHRvIHByZXZlbnQgdHJhbnNpdGlvbnMuXG5cdCAqL1xuXG5cdHZhciBSb3V0ZUNvbnRleHQgPSB7XG5cblx0ICBwcm9wVHlwZXM6IHtcblx0ICAgIHJvdXRlOiBvYmplY3QuaXNSZXF1aXJlZFxuXHQgIH0sXG5cblx0ICBjaGlsZENvbnRleHRUeXBlczoge1xuXHQgICAgcm91dGU6IG9iamVjdC5pc1JlcXVpcmVkXG5cdCAgfSxcblxuXHQgIGdldENoaWxkQ29udGV4dDogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgcm91dGU6IHRoaXMucHJvcHMucm91dGVcblx0ICAgIH07XG5cdCAgfSxcblx0ICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcblx0ICAgICB0cnVlID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ1RoZSBgUm91dGVDb250ZXh0YCBtaXhpbiBpcyBkZXByZWNhdGVkLiBZb3UgY2FuIHByb3ZpZGUgYHRoaXMucHJvcHMucm91dGVgIG9uIGNvbnRleHQgd2l0aCB5b3VyIG93biBgY29udGV4dFR5cGVzYC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLXJvdXRlY29udGV4dG1peGluJykgOiB2b2lkIDA7XG5cdCAgfVxuXHR9O1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IFJvdXRlQ29udGV4dDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuXHR2YXIgX2NyZWF0ZUhhc2hIaXN0b3J5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7XG5cblx0dmFyIF9jcmVhdGVIYXNoSGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIYXNoSGlzdG9yeSk7XG5cblx0dmFyIF91c2VRdWVyaWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cblx0dmFyIF91c2VRdWVyaWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZVF1ZXJpZXMpO1xuXG5cdHZhciBfaW52YXJpYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuXHR2YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5cdHZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblxuXHR2YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxuXHR2YXIgX0ludGVybmFsUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHR2YXIgX1JvdXRlckNvbnRleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxuXHR2YXIgX1JvdXRlckNvbnRleHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVyQ29udGV4dCk7XG5cblx0dmFyIF9Sb3V0ZVV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuXHR2YXIgX1JvdXRlclV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuXHR2YXIgX3JvdXRlcldhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm91dGVyV2FybmluZyk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cblx0ZnVuY3Rpb24gaXNEZXByZWNhdGVkSGlzdG9yeShoaXN0b3J5KSB7XG5cdCAgcmV0dXJuICFoaXN0b3J5IHx8ICFoaXN0b3J5Ll9fdjJfY29tcGF0aWJsZV9fO1xuXHR9XG5cblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHNhbml0eSBjaGVjayAqL1xuXHRmdW5jdGlvbiBpc1Vuc3VwcG9ydGVkSGlzdG9yeShoaXN0b3J5KSB7XG5cdCAgLy8gdjMgaGlzdG9yaWVzIGV4cG9zZSBnZXRDdXJyZW50TG9jYXRpb24sIGJ1dCBhcmVuJ3QgY3VycmVudGx5IHN1cHBvcnRlZC5cblx0ICByZXR1cm4gaGlzdG9yeSAmJiBoaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbjtcblx0fVxuXG5cdHZhciBfUmVhY3QkUHJvcFR5cGVzID0gX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcztcblx0dmFyIGZ1bmMgPSBfUmVhY3QkUHJvcFR5cGVzLmZ1bmM7XG5cdHZhciBvYmplY3QgPSBfUmVhY3QkUHJvcFR5cGVzLm9iamVjdDtcblxuXHQvKipcblx0ICogQSA8Um91dGVyPiBpcyBhIGhpZ2gtbGV2ZWwgQVBJIGZvciBhdXRvbWF0aWNhbGx5IHNldHRpbmcgdXBcblx0ICogYSByb3V0ZXIgdGhhdCByZW5kZXJzIGEgPFJvdXRlckNvbnRleHQ+IHdpdGggYWxsIHRoZSBwcm9wc1xuXHQgKiBpdCBuZWVkcyBlYWNoIHRpbWUgdGhlIFVSTCBjaGFuZ2VzLlxuXHQgKi9cblxuXHR2YXIgUm91dGVyID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcblx0ICBkaXNwbGF5TmFtZTogJ1JvdXRlcicsXG5cblxuXHQgIHByb3BUeXBlczoge1xuXHQgICAgaGlzdG9yeTogb2JqZWN0LFxuXHQgICAgY2hpbGRyZW46IF9JbnRlcm5hbFByb3BUeXBlcy5yb3V0ZXMsXG5cdCAgICByb3V0ZXM6IF9JbnRlcm5hbFByb3BUeXBlcy5yb3V0ZXMsIC8vIGFsaWFzIGZvciBjaGlsZHJlblxuXHQgICAgcmVuZGVyOiBmdW5jLFxuXHQgICAgY3JlYXRlRWxlbWVudDogZnVuYyxcblx0ICAgIG9uRXJyb3I6IGZ1bmMsXG5cdCAgICBvblVwZGF0ZTogZnVuYyxcblxuXHQgICAgLy8gRGVwcmVjYXRlZDpcblx0ICAgIHBhcnNlUXVlcnlTdHJpbmc6IGZ1bmMsXG5cdCAgICBzdHJpbmdpZnlRdWVyeTogZnVuYyxcblxuXHQgICAgLy8gUFJJVkFURTogRm9yIGNsaWVudC1zaWRlIHJlaHlkcmF0aW9uIG9mIHNlcnZlciBtYXRjaC5cblx0ICAgIG1hdGNoQ29udGV4dDogb2JqZWN0XG5cdCAgfSxcblxuXHQgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gZ2V0RGVmYXVsdFByb3BzKCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocHJvcHMpIHtcblx0ICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1JvdXRlckNvbnRleHQyLmRlZmF1bHQsIHByb3BzKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9LFxuXHQgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgbG9jYXRpb246IG51bGwsXG5cdCAgICAgIHJvdXRlczogbnVsbCxcblx0ICAgICAgcGFyYW1zOiBudWxsLFxuXHQgICAgICBjb21wb25lbnRzOiBudWxsXG5cdCAgICB9O1xuXHQgIH0sXG5cdCAgaGFuZGxlRXJyb3I6IGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yKSB7XG5cdCAgICBpZiAodGhpcy5wcm9wcy5vbkVycm9yKSB7XG5cdCAgICAgIHRoaXMucHJvcHMub25FcnJvci5jYWxsKHRoaXMsIGVycm9yKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIFRocm93IGVycm9ycyBieSBkZWZhdWx0IHNvIHdlIGRvbid0IHNpbGVudGx5IHN3YWxsb3cgdGhlbSFcblx0ICAgICAgdGhyb3cgZXJyb3I7IC8vIFRoaXMgZXJyb3IgcHJvYmFibHkgb2NjdXJyZWQgaW4gZ2V0Q2hpbGRSb3V0ZXMgb3IgZ2V0Q29tcG9uZW50cy5cblx0ICAgIH1cblx0ICB9LFxuXHQgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuXHQgICAgdmFyIF90aGlzID0gdGhpcztcblxuXHQgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG5cdCAgICB2YXIgcGFyc2VRdWVyeVN0cmluZyA9IF9wcm9wcy5wYXJzZVF1ZXJ5U3RyaW5nO1xuXHQgICAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gX3Byb3BzLnN0cmluZ2lmeVF1ZXJ5O1xuXG5cdCAgICAgdHJ1ZSA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoIShwYXJzZVF1ZXJ5U3RyaW5nIHx8IHN0cmluZ2lmeVF1ZXJ5KSwgJ2BwYXJzZVF1ZXJ5U3RyaW5nYCBhbmQgYHN0cmluZ2lmeVF1ZXJ5YCBhcmUgZGVwcmVjYXRlZC4gUGxlYXNlIGNyZWF0ZSBhIGN1c3RvbSBoaXN0b3J5LiBodHRwOi8vdGlueS5jYy9yb3V0ZXItY3VzdG9tcXVlcnlzdHJpbmcnKSA6IHZvaWQgMDtcblxuXHQgICAgdmFyIF9jcmVhdGVSb3V0ZXJPYmplY3RzID0gdGhpcy5jcmVhdGVSb3V0ZXJPYmplY3RzKCk7XG5cblx0ICAgIHZhciBoaXN0b3J5ID0gX2NyZWF0ZVJvdXRlck9iamVjdHMuaGlzdG9yeTtcblx0ICAgIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IF9jcmVhdGVSb3V0ZXJPYmplY3RzLnRyYW5zaXRpb25NYW5hZ2VyO1xuXHQgICAgdmFyIHJvdXRlciA9IF9jcmVhdGVSb3V0ZXJPYmplY3RzLnJvdXRlcjtcblxuXG5cdCAgICB0aGlzLl91bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmxpc3RlbihmdW5jdGlvbiAoZXJyb3IsIHN0YXRlKSB7XG5cdCAgICAgIGlmIChlcnJvcikge1xuXHQgICAgICAgIF90aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBfdGhpcy5zZXRTdGF0ZShzdGF0ZSwgX3RoaXMucHJvcHMub25VcGRhdGUpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgdGhpcy5oaXN0b3J5ID0gaGlzdG9yeTtcblx0ICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xuXHQgIH0sXG5cdCAgY3JlYXRlUm91dGVyT2JqZWN0czogZnVuY3Rpb24gY3JlYXRlUm91dGVyT2JqZWN0cygpIHtcblx0ICAgIHZhciBtYXRjaENvbnRleHQgPSB0aGlzLnByb3BzLm1hdGNoQ29udGV4dDtcblxuXHQgICAgaWYgKG1hdGNoQ29udGV4dCkge1xuXHQgICAgICByZXR1cm4gbWF0Y2hDb250ZXh0O1xuXHQgICAgfVxuXG5cdCAgICB2YXIgaGlzdG9yeSA9IHRoaXMucHJvcHMuaGlzdG9yeTtcblx0ICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcztcblx0ICAgIHZhciByb3V0ZXMgPSBfcHJvcHMyLnJvdXRlcztcblx0ICAgIHZhciBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW47XG5cblxuXHQgICAgISFpc1Vuc3VwcG9ydGVkSGlzdG9yeShoaXN0b3J5KSA/ICB0cnVlID8gKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlLCAnWW91IGhhdmUgcHJvdmlkZWQgYSBoaXN0b3J5IG9iamVjdCBjcmVhdGVkIHdpdGggaGlzdG9yeSB2My54LiAnICsgJ1RoaXMgdmVyc2lvbiBvZiBSZWFjdCBSb3V0ZXIgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB2MyBoaXN0b3J5ICcgKyAnb2JqZWN0cy4gUGxlYXNlIHVzZSBoaXN0b3J5IHYyLnggaW5zdGVhZC4nKSA6ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSkgOiB2b2lkIDA7XG5cblx0ICAgIGlmIChpc0RlcHJlY2F0ZWRIaXN0b3J5KGhpc3RvcnkpKSB7XG5cdCAgICAgIGhpc3RvcnkgPSB0aGlzLndyYXBEZXByZWNhdGVkSGlzdG9yeShoaXN0b3J5KTtcblx0ICAgIH1cblxuXHQgICAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoaGlzdG9yeSwgKDAsIF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlcykocm91dGVzIHx8IGNoaWxkcmVuKSk7XG5cdCAgICB2YXIgcm91dGVyID0gKDAsIF9Sb3V0ZXJVdGlscy5jcmVhdGVSb3V0ZXJPYmplY3QpKGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKTtcblx0ICAgIHZhciByb3V0aW5nSGlzdG9yeSA9ICgwLCBfUm91dGVyVXRpbHMuY3JlYXRlUm91dGluZ0hpc3RvcnkpKGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKTtcblxuXHQgICAgcmV0dXJuIHsgaGlzdG9yeTogcm91dGluZ0hpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyOiB0cmFuc2l0aW9uTWFuYWdlciwgcm91dGVyOiByb3V0ZXIgfTtcblx0ICB9LFxuXHQgIHdyYXBEZXByZWNhdGVkSGlzdG9yeTogZnVuY3Rpb24gd3JhcERlcHJlY2F0ZWRIaXN0b3J5KGhpc3RvcnkpIHtcblx0ICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcztcblx0ICAgIHZhciBwYXJzZVF1ZXJ5U3RyaW5nID0gX3Byb3BzMy5wYXJzZVF1ZXJ5U3RyaW5nO1xuXHQgICAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gX3Byb3BzMy5zdHJpbmdpZnlRdWVyeTtcblxuXG5cdCAgICB2YXIgY3JlYXRlSGlzdG9yeSA9IHZvaWQgMDtcblx0ICAgIGlmIChoaXN0b3J5KSB7XG5cdCAgICAgICB0cnVlID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0l0IGFwcGVhcnMgeW91IGhhdmUgcHJvdmlkZWQgYSBkZXByZWNhdGVkIGhpc3Rvcnkgb2JqZWN0IHRvIGA8Um91dGVyLz5gLCBwbGVhc2UgdXNlIGEgaGlzdG9yeSBwcm92aWRlZCBieSAnICsgJ1JlYWN0IFJvdXRlciB3aXRoIGBpbXBvcnQgeyBicm93c2VySGlzdG9yeSB9IGZyb20gXFwncmVhY3Qtcm91dGVyXFwnYCBvciBgaW1wb3J0IHsgaGFzaEhpc3RvcnkgfSBmcm9tIFxcJ3JlYWN0LXJvdXRlclxcJ2AuICcgKyAnSWYgeW91IGFyZSB1c2luZyBhIGN1c3RvbSBoaXN0b3J5IHBsZWFzZSBjcmVhdGUgaXQgd2l0aCBgdXNlUm91dGVySGlzdG9yeWAsIHNlZSBodHRwOi8vdGlueS5jYy9yb3V0ZXItdXNpbmdoaXN0b3J5IGZvciBkZXRhaWxzLicpIDogdm9pZCAwO1xuXHQgICAgICBjcmVhdGVIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGlzdG9yeSgpIHtcblx0ICAgICAgICByZXR1cm4gaGlzdG9yeTtcblx0ICAgICAgfTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICB0cnVlID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ2BSb3V0ZXJgIG5vIGxvbmdlciBkZWZhdWx0cyB0aGUgaGlzdG9yeSBwcm9wIHRvIGhhc2ggaGlzdG9yeS4gUGxlYXNlIHVzZSB0aGUgYGhhc2hIaXN0b3J5YCBzaW5nbGV0b24gaW5zdGVhZC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLWRlZmF1bHRoaXN0b3J5JykgOiB2b2lkIDA7XG5cdCAgICAgIGNyZWF0ZUhpc3RvcnkgPSBfY3JlYXRlSGFzaEhpc3RvcnkyLmRlZmF1bHQ7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiAoMCwgX3VzZVF1ZXJpZXMyLmRlZmF1bHQpKGNyZWF0ZUhpc3RvcnkpKHsgcGFyc2VRdWVyeVN0cmluZzogcGFyc2VRdWVyeVN0cmluZywgc3RyaW5naWZ5UXVlcnk6IHN0cmluZ2lmeVF1ZXJ5IH0pO1xuXHQgIH0sXG5cblxuXHQgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzYW5pdHkgY2hlY2sgKi9cblx0ICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuXHQgICAgIHRydWUgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKG5leHRQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksICdZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+OyBpdCB3aWxsIGJlIGlnbm9yZWQnKSA6IHZvaWQgMDtcblxuXHQgICAgIHRydWUgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKChuZXh0UHJvcHMucm91dGVzIHx8IG5leHRQcm9wcy5jaGlsZHJlbikgPT09ICh0aGlzLnByb3BzLnJvdXRlcyB8fCB0aGlzLnByb3BzLmNoaWxkcmVuKSwgJ1lvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgcm91dGVzPjsgaXQgd2lsbCBiZSBpZ25vcmVkJykgOiB2b2lkIDA7XG5cdCAgfSxcblx0ICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdCAgICBpZiAodGhpcy5fdW5saXN0ZW4pIHRoaXMuX3VubGlzdGVuKCk7XG5cdCAgfSxcblx0ICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlO1xuXHQgICAgdmFyIGxvY2F0aW9uID0gX3N0YXRlLmxvY2F0aW9uO1xuXHQgICAgdmFyIHJvdXRlcyA9IF9zdGF0ZS5yb3V0ZXM7XG5cdCAgICB2YXIgcGFyYW1zID0gX3N0YXRlLnBhcmFtcztcblx0ICAgIHZhciBjb21wb25lbnRzID0gX3N0YXRlLmNvbXBvbmVudHM7XG5cdCAgICB2YXIgX3Byb3BzNCA9IHRoaXMucHJvcHM7XG5cdCAgICB2YXIgY3JlYXRlRWxlbWVudCA9IF9wcm9wczQuY3JlYXRlRWxlbWVudDtcblx0ICAgIHZhciByZW5kZXIgPSBfcHJvcHM0LnJlbmRlcjtcblxuXHQgICAgdmFyIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wczQsIFsnY3JlYXRlRWxlbWVudCcsICdyZW5kZXInXSk7XG5cblx0ICAgIGlmIChsb2NhdGlvbiA9PSBudWxsKSByZXR1cm4gbnVsbDsgLy8gQXN5bmMgbWF0Y2hcblxuXHQgICAgLy8gT25seSBmb3J3YXJkIG5vbi1Sb3V0ZXItc3BlY2lmaWMgcHJvcHMgdG8gcm91dGluZyBjb250ZXh0LCBhcyB0aG9zZSBhcmVcblx0ICAgIC8vIHRoZSBvbmx5IG9uZXMgdGhhdCBtaWdodCBiZSBjdXN0b20gcm91dGluZyBjb250ZXh0IHByb3BzLlxuXHQgICAgT2JqZWN0LmtleXMoUm91dGVyLnByb3BUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcFR5cGUpIHtcblx0ICAgICAgcmV0dXJuIGRlbGV0ZSBwcm9wc1twcm9wVHlwZV07XG5cdCAgICB9KTtcblxuXHQgICAgcmV0dXJuIHJlbmRlcihfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcblx0ICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuXHQgICAgICByb3V0ZXI6IHRoaXMucm91dGVyLFxuXHQgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG5cdCAgICAgIHJvdXRlczogcm91dGVzLFxuXHQgICAgICBwYXJhbXM6IHBhcmFtcyxcblx0ICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcblx0ICAgICAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudFxuXHQgICAgfSkpO1xuXHQgIH1cblx0fSk7XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gUm91dGVyO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDQwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuXHR2YXIgX1JvdXRlckNvbnRleHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxuXHR2YXIgX1JvdXRlckNvbnRleHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVyQ29udGV4dCk7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuXHR2YXIgX3JvdXRlcldhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm91dGVyV2FybmluZyk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHR2YXIgUm91dGluZ0NvbnRleHQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuXHQgIGRpc3BsYXlOYW1lOiAnUm91dGluZ0NvbnRleHQnLFxuXHQgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuXHQgICAgIHRydWUgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnYFJvdXRpbmdDb250ZXh0YCBoYXMgYmVlbiByZW5hbWVkIHRvIGBSb3V0ZXJDb250ZXh0YC4gUGxlYXNlIHVzZSBgaW1wb3J0IHsgUm91dGVyQ29udGV4dCB9IGZyb20gXFwncmVhY3Qtcm91dGVyXFwnYC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLXJvdXRlcmNvbnRleHQnKSA6IHZvaWQgMDtcblx0ICB9LFxuXHQgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Sb3V0ZXJDb250ZXh0Mi5kZWZhdWx0LCB0aGlzLnByb3BzKTtcblx0ICB9XG5cdH0pO1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IFJvdXRpbmdDb250ZXh0O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDQxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblx0ZXhwb3J0cy5ydW5FbnRlckhvb2tzID0gcnVuRW50ZXJIb29rcztcblx0ZXhwb3J0cy5ydW5DaGFuZ2VIb29rcyA9IHJ1bkNoYW5nZUhvb2tzO1xuXHRleHBvcnRzLnJ1bkxlYXZlSG9va3MgPSBydW5MZWF2ZUhvb2tzO1xuXG5cdHZhciBfQXN5bmNVdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXG5cdHZhciBfcm91dGVyV2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbkhvb2soaG9vaywgcm91dGUsIGFzeW5jQXJpdHkpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgIH1cblxuXHQgICAgaG9vay5hcHBseShyb3V0ZSwgYXJncyk7XG5cblx0ICAgIGlmIChob29rLmxlbmd0aCA8IGFzeW5jQXJpdHkpIHtcblx0ICAgICAgdmFyIGNhbGxiYWNrID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuXHQgICAgICAvLyBBc3N1bWUgaG9vayBleGVjdXRlcyBzeW5jaHJvbm91c2x5IGFuZFxuXHQgICAgICAvLyBhdXRvbWF0aWNhbGx5IGNhbGwgdGhlIGNhbGxiYWNrLlxuXHQgICAgICBjYWxsYmFjaygpO1xuXHQgICAgfVxuXHQgIH07XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRFbnRlckhvb2tzKHJvdXRlcykge1xuXHQgIHJldHVybiByb3V0ZXMucmVkdWNlKGZ1bmN0aW9uIChob29rcywgcm91dGUpIHtcblx0ICAgIGlmIChyb3V0ZS5vbkVudGVyKSBob29rcy5wdXNoKGNyZWF0ZVRyYW5zaXRpb25Ib29rKHJvdXRlLm9uRW50ZXIsIHJvdXRlLCAzKSk7XG5cblx0ICAgIHJldHVybiBob29rcztcblx0ICB9LCBbXSk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRDaGFuZ2VIb29rcyhyb3V0ZXMpIHtcblx0ICByZXR1cm4gcm91dGVzLnJlZHVjZShmdW5jdGlvbiAoaG9va3MsIHJvdXRlKSB7XG5cdCAgICBpZiAocm91dGUub25DaGFuZ2UpIGhvb2tzLnB1c2goY3JlYXRlVHJhbnNpdGlvbkhvb2socm91dGUub25DaGFuZ2UsIHJvdXRlLCA0KSk7XG5cdCAgICByZXR1cm4gaG9va3M7XG5cdCAgfSwgW10pO1xuXHR9XG5cblx0ZnVuY3Rpb24gcnVuVHJhbnNpdGlvbkhvb2tzKGxlbmd0aCwgaXRlciwgY2FsbGJhY2spIHtcblx0ICBpZiAoIWxlbmd0aCkge1xuXHQgICAgY2FsbGJhY2soKTtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cblx0ICB2YXIgcmVkaXJlY3RJbmZvID0gdm9pZCAwO1xuXHQgIGZ1bmN0aW9uIHJlcGxhY2UobG9jYXRpb24sIGRlcHJlY2F0ZWRQYXRobmFtZSwgZGVwcmVjYXRlZFF1ZXJ5KSB7XG5cdCAgICBpZiAoZGVwcmVjYXRlZFBhdGhuYW1lKSB7XG5cdCAgICAgICB0cnVlID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ2ByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGhuYW1lLCBxdWVyeSkgaXMgZGVwcmVjYXRlZDsgdXNlIGByZXBsYWNlKGxvY2F0aW9uKWAgd2l0aCBhIGxvY2F0aW9uIGRlc2NyaXB0b3IgaW5zdGVhZC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLWlzQWN0aXZlZGVwcmVjYXRlZCcpIDogdm9pZCAwO1xuXHQgICAgICByZWRpcmVjdEluZm8gPSB7XG5cdCAgICAgICAgcGF0aG5hbWU6IGRlcHJlY2F0ZWRQYXRobmFtZSxcblx0ICAgICAgICBxdWVyeTogZGVwcmVjYXRlZFF1ZXJ5LFxuXHQgICAgICAgIHN0YXRlOiBsb2NhdGlvblxuXHQgICAgICB9O1xuXG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgcmVkaXJlY3RJbmZvID0gbG9jYXRpb247XG5cdCAgfVxuXG5cdCAgKDAsIF9Bc3luY1V0aWxzLmxvb3BBc3luYykobGVuZ3RoLCBmdW5jdGlvbiAoaW5kZXgsIG5leHQsIGRvbmUpIHtcblx0ICAgIGl0ZXIoaW5kZXgsIHJlcGxhY2UsIGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgICBpZiAoZXJyb3IgfHwgcmVkaXJlY3RJbmZvKSB7XG5cdCAgICAgICAgZG9uZShlcnJvciwgcmVkaXJlY3RJbmZvKTsgLy8gTm8gbmVlZCB0byBjb250aW51ZS5cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBuZXh0KCk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH0sIGNhbGxiYWNrKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSdW5zIGFsbCBvbkVudGVyIGhvb2tzIGluIHRoZSBnaXZlbiBhcnJheSBvZiByb3V0ZXMgaW4gb3JkZXJcblx0ICogd2l0aCBvbkVudGVyKG5leHRTdGF0ZSwgcmVwbGFjZSwgY2FsbGJhY2spIGFuZCBjYWxsc1xuXHQgKiBjYWxsYmFjayhlcnJvciwgcmVkaXJlY3RJbmZvKSB3aGVuIGZpbmlzaGVkLiBUaGUgZmlyc3QgaG9va1xuXHQgKiB0byB1c2UgcmVwbGFjZSBzaG9ydC1jaXJjdWl0cyB0aGUgbG9vcC5cblx0ICpcblx0ICogSWYgYSBob29rIG5lZWRzIHRvIHJ1biBhc3luY2hyb25vdXNseSwgaXQgbWF5IHVzZSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uIEhvd2V2ZXIsIGRvaW5nIHNvIHdpbGwgY2F1c2UgdGhlIHRyYW5zaXRpb24gdG8gcGF1c2UsXG5cdCAqIHdoaWNoIGNvdWxkIGxlYWQgdG8gYSBub24tcmVzcG9uc2l2ZSBVSSBpZiB0aGUgaG9vayBpcyBzbG93LlxuXHQgKi9cblx0ZnVuY3Rpb24gcnVuRW50ZXJIb29rcyhyb3V0ZXMsIG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcblx0ICB2YXIgaG9va3MgPSBnZXRFbnRlckhvb2tzKHJvdXRlcyk7XG5cdCAgcmV0dXJuIHJ1blRyYW5zaXRpb25Ib29rcyhob29rcy5sZW5ndGgsIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZSwgbmV4dCkge1xuXHQgICAgaG9va3NbaW5kZXhdKG5leHRTdGF0ZSwgcmVwbGFjZSwgbmV4dCk7XG5cdCAgfSwgY2FsbGJhY2spO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJ1bnMgYWxsIG9uQ2hhbmdlIGhvb2tzIGluIHRoZSBnaXZlbiBhcnJheSBvZiByb3V0ZXMgaW4gb3JkZXJcblx0ICogd2l0aCBvbkNoYW5nZShwcmV2U3RhdGUsIG5leHRTdGF0ZSwgcmVwbGFjZSwgY2FsbGJhY2spIGFuZCBjYWxsc1xuXHQgKiBjYWxsYmFjayhlcnJvciwgcmVkaXJlY3RJbmZvKSB3aGVuIGZpbmlzaGVkLiBUaGUgZmlyc3QgaG9va1xuXHQgKiB0byB1c2UgcmVwbGFjZSBzaG9ydC1jaXJjdWl0cyB0aGUgbG9vcC5cblx0ICpcblx0ICogSWYgYSBob29rIG5lZWRzIHRvIHJ1biBhc3luY2hyb25vdXNseSwgaXQgbWF5IHVzZSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uIEhvd2V2ZXIsIGRvaW5nIHNvIHdpbGwgY2F1c2UgdGhlIHRyYW5zaXRpb24gdG8gcGF1c2UsXG5cdCAqIHdoaWNoIGNvdWxkIGxlYWQgdG8gYSBub24tcmVzcG9uc2l2ZSBVSSBpZiB0aGUgaG9vayBpcyBzbG93LlxuXHQgKi9cblx0ZnVuY3Rpb24gcnVuQ2hhbmdlSG9va3Mocm91dGVzLCBzdGF0ZSwgbmV4dFN0YXRlLCBjYWxsYmFjaykge1xuXHQgIHZhciBob29rcyA9IGdldENoYW5nZUhvb2tzKHJvdXRlcyk7XG5cdCAgcmV0dXJuIHJ1blRyYW5zaXRpb25Ib29rcyhob29rcy5sZW5ndGgsIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZSwgbmV4dCkge1xuXHQgICAgaG9va3NbaW5kZXhdKHN0YXRlLCBuZXh0U3RhdGUsIHJlcGxhY2UsIG5leHQpO1xuXHQgIH0sIGNhbGxiYWNrKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSdW5zIGFsbCBvbkxlYXZlIGhvb2tzIGluIHRoZSBnaXZlbiBhcnJheSBvZiByb3V0ZXMgaW4gb3JkZXIuXG5cdCAqL1xuXHRmdW5jdGlvbiBydW5MZWF2ZUhvb2tzKHJvdXRlcywgcHJldlN0YXRlKSB7XG5cdCAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJvdXRlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuXHQgICAgaWYgKHJvdXRlc1tpXS5vbkxlYXZlKSByb3V0ZXNbaV0ub25MZWF2ZS5jYWxsKHJvdXRlc1tpXSwgcHJldlN0YXRlKTtcblx0ICB9XG5cdH1cblxuLyoqKi8gfSxcbi8qIDQyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5cdHZhciBfUm91dGVyQ29udGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXG5cdHZhciBfUm91dGVyQ29udGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZXJDb250ZXh0KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcblx0ICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuXHQgIH1cblxuXHQgIHZhciB3aXRoQ29udGV4dCA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobSkge1xuXHQgICAgcmV0dXJuIG0ucmVuZGVyUm91dGVyQ29udGV4dDtcblx0ICB9KS5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcblx0ICAgIHJldHVybiBmO1xuXHQgIH0pO1xuXHQgIHZhciB3aXRoQ29tcG9uZW50ID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtKSB7XG5cdCAgICByZXR1cm4gbS5yZW5kZXJSb3V0ZUNvbXBvbmVudDtcblx0ICB9KS5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcblx0ICAgIHJldHVybiBmO1xuXHQgIH0pO1xuXHQgIHZhciBtYWtlQ3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIG1ha2VDcmVhdGVFbGVtZW50KCkge1xuXHQgICAgdmFyIGJhc2VDcmVhdGVFbGVtZW50ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gX3JlYWN0LmNyZWF0ZUVsZW1lbnQgOiBhcmd1bWVudHNbMF07XG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCwgcHJvcHMpIHtcblx0ICAgICAgcmV0dXJuIHdpdGhDb21wb25lbnQucmVkdWNlUmlnaHQoZnVuY3Rpb24gKHByZXZpb3VzLCByZW5kZXJSb3V0ZUNvbXBvbmVudCkge1xuXHQgICAgICAgIHJldHVybiByZW5kZXJSb3V0ZUNvbXBvbmVudChwcmV2aW91cywgcHJvcHMpO1xuXHQgICAgICB9LCBiYXNlQ3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzKSk7XG5cdCAgICB9O1xuXHQgIH07XG5cblx0ICByZXR1cm4gZnVuY3Rpb24gKHJlbmRlclByb3BzKSB7XG5cdCAgICByZXR1cm4gd2l0aENvbnRleHQucmVkdWNlUmlnaHQoZnVuY3Rpb24gKHByZXZpb3VzLCByZW5kZXJSb3V0ZXJDb250ZXh0KSB7XG5cdCAgICAgIHJldHVybiByZW5kZXJSb3V0ZXJDb250ZXh0KHByZXZpb3VzLCByZW5kZXJQcm9wcyk7XG5cdCAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUm91dGVyQ29udGV4dDIuZGVmYXVsdCwgX2V4dGVuZHMoe30sIHJlbmRlclByb3BzLCB7XG5cdCAgICAgIGNyZWF0ZUVsZW1lbnQ6IG1ha2VDcmVhdGVFbGVtZW50KHJlbmRlclByb3BzLmNyZWF0ZUVsZW1lbnQpXG5cdCAgICB9KSkpO1xuXHQgIH07XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA0MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9jcmVhdGVCcm93c2VySGlzdG9yeSA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpO1xuXG5cdHZhciBfY3JlYXRlQnJvd3Nlckhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQnJvd3Nlckhpc3RvcnkpO1xuXG5cdHZhciBfY3JlYXRlUm91dGVySGlzdG9yeSA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXG5cdHZhciBfY3JlYXRlUm91dGVySGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSb3V0ZXJIaXN0b3J5KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlUm91dGVySGlzdG9yeTIuZGVmYXVsdCkoX2NyZWF0ZUJyb3dzZXJIaXN0b3J5Mi5kZWZhdWx0KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA0NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9QYXR0ZXJuVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG5cdGZ1bmN0aW9uIHJvdXRlUGFyYW1zQ2hhbmdlZChyb3V0ZSwgcHJldlN0YXRlLCBuZXh0U3RhdGUpIHtcblx0ICBpZiAoIXJvdXRlLnBhdGgpIHJldHVybiBmYWxzZTtcblxuXHQgIHZhciBwYXJhbU5hbWVzID0gKDAsIF9QYXR0ZXJuVXRpbHMuZ2V0UGFyYW1OYW1lcykocm91dGUucGF0aCk7XG5cblx0ICByZXR1cm4gcGFyYW1OYW1lcy5zb21lKGZ1bmN0aW9uIChwYXJhbU5hbWUpIHtcblx0ICAgIHJldHVybiBwcmV2U3RhdGUucGFyYW1zW3BhcmFtTmFtZV0gIT09IG5leHRTdGF0ZS5wYXJhbXNbcGFyYW1OYW1lXTtcblx0ICB9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIG9iamVjdCBvZiB7IGxlYXZlUm91dGVzLCBjaGFuZ2VSb3V0ZXMsIGVudGVyUm91dGVzIH0gZGV0ZXJtaW5lZCBieVxuXHQgKiB0aGUgY2hhbmdlIGZyb20gcHJldlN0YXRlIHRvIG5leHRTdGF0ZS4gV2UgbGVhdmUgcm91dGVzIGlmIGVpdGhlclxuXHQgKiAxKSB0aGV5IGFyZSBub3QgaW4gdGhlIG5leHQgc3RhdGUgb3IgMikgdGhleSBhcmUgaW4gdGhlIG5leHQgc3RhdGVcblx0ICogYnV0IHRoZWlyIHBhcmFtcyBoYXZlIGNoYW5nZWQgKGkuZS4gL3VzZXJzLzEyMyA9PiAvdXNlcnMvNDU2KS5cblx0ICpcblx0ICogbGVhdmVSb3V0ZXMgYXJlIG9yZGVyZWQgc3RhcnRpbmcgYXQgdGhlIGxlYWYgcm91dGUgb2YgdGhlIHRyZWVcblx0ICogd2UncmUgbGVhdmluZyB1cCB0byB0aGUgY29tbW9uIHBhcmVudCByb3V0ZS4gZW50ZXJSb3V0ZXMgYXJlIG9yZGVyZWRcblx0ICogZnJvbSB0aGUgdG9wIG9mIHRoZSB0cmVlIHdlJ3JlIGVudGVyaW5nIGRvd24gdG8gdGhlIGxlYWYgcm91dGUuXG5cdCAqXG5cdCAqIGNoYW5nZVJvdXRlcyBhcmUgYW55IHJvdXRlcyB0aGF0IGRpZG4ndCBsZWF2ZSBvciBlbnRlciBkdXJpbmdcblx0ICogdGhlIHRyYW5zaXRpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBjb21wdXRlQ2hhbmdlZFJvdXRlcyhwcmV2U3RhdGUsIG5leHRTdGF0ZSkge1xuXHQgIHZhciBwcmV2Um91dGVzID0gcHJldlN0YXRlICYmIHByZXZTdGF0ZS5yb3V0ZXM7XG5cdCAgdmFyIG5leHRSb3V0ZXMgPSBuZXh0U3RhdGUucm91dGVzO1xuXG5cdCAgdmFyIGxlYXZlUm91dGVzID0gdm9pZCAwLFxuXHQgICAgICBjaGFuZ2VSb3V0ZXMgPSB2b2lkIDAsXG5cdCAgICAgIGVudGVyUm91dGVzID0gdm9pZCAwO1xuXHQgIGlmIChwcmV2Um91dGVzKSB7XG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgcGFyZW50SXNMZWF2aW5nID0gZmFsc2U7XG5cdCAgICAgIGxlYXZlUm91dGVzID0gcHJldlJvdXRlcy5maWx0ZXIoZnVuY3Rpb24gKHJvdXRlKSB7XG5cdCAgICAgICAgaWYgKHBhcmVudElzTGVhdmluZykge1xuXHQgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhciBpc0xlYXZpbmcgPSBuZXh0Um91dGVzLmluZGV4T2Yocm91dGUpID09PSAtMSB8fCByb3V0ZVBhcmFtc0NoYW5nZWQocm91dGUsIHByZXZTdGF0ZSwgbmV4dFN0YXRlKTtcblx0ICAgICAgICAgIGlmIChpc0xlYXZpbmcpIHBhcmVudElzTGVhdmluZyA9IHRydWU7XG5cdCAgICAgICAgICByZXR1cm4gaXNMZWF2aW5nO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cblx0ICAgICAgLy8gb25MZWF2ZSBob29rcyBzdGFydCBhdCB0aGUgbGVhZiByb3V0ZS5cblx0ICAgICAgbGVhdmVSb3V0ZXMucmV2ZXJzZSgpO1xuXG5cdCAgICAgIGVudGVyUm91dGVzID0gW107XG5cdCAgICAgIGNoYW5nZVJvdXRlcyA9IFtdO1xuXG5cdCAgICAgIG5leHRSb3V0ZXMuZm9yRWFjaChmdW5jdGlvbiAocm91dGUpIHtcblx0ICAgICAgICB2YXIgaXNOZXcgPSBwcmV2Um91dGVzLmluZGV4T2Yocm91dGUpID09PSAtMTtcblx0ICAgICAgICB2YXIgcGFyYW1zQ2hhbmdlZCA9IGxlYXZlUm91dGVzLmluZGV4T2Yocm91dGUpICE9PSAtMTtcblxuXHQgICAgICAgIGlmIChpc05ldyB8fCBwYXJhbXNDaGFuZ2VkKSBlbnRlclJvdXRlcy5wdXNoKHJvdXRlKTtlbHNlIGNoYW5nZVJvdXRlcy5wdXNoKHJvdXRlKTtcblx0ICAgICAgfSk7XG5cdCAgICB9KSgpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBsZWF2ZVJvdXRlcyA9IFtdO1xuXHQgICAgY2hhbmdlUm91dGVzID0gW107XG5cdCAgICBlbnRlclJvdXRlcyA9IG5leHRSb3V0ZXM7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHtcblx0ICAgIGxlYXZlUm91dGVzOiBsZWF2ZVJvdXRlcyxcblx0ICAgIGNoYW5nZVJvdXRlczogY2hhbmdlUm91dGVzLFxuXHQgICAgZW50ZXJSb3V0ZXM6IGVudGVyUm91dGVzXG5cdCAgfTtcblx0fVxuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IGNvbXB1dGVDaGFuZ2VkUm91dGVzO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDQ1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX0FzeW5jVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblxuXHR2YXIgX21ha2VTdGF0ZVdpdGhMb2NhdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xuXG5cdHZhciBfbWFrZVN0YXRlV2l0aExvY2F0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21ha2VTdGF0ZVdpdGhMb2NhdGlvbik7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBnZXRDb21wb25lbnRzRm9yUm91dGUobmV4dFN0YXRlLCByb3V0ZSwgY2FsbGJhY2spIHtcblx0ICBpZiAocm91dGUuY29tcG9uZW50IHx8IHJvdXRlLmNvbXBvbmVudHMpIHtcblx0ICAgIGNhbGxiYWNrKG51bGwsIHJvdXRlLmNvbXBvbmVudCB8fCByb3V0ZS5jb21wb25lbnRzKTtcblx0ICAgIHJldHVybjtcblx0ICB9XG5cblx0ICB2YXIgZ2V0Q29tcG9uZW50ID0gcm91dGUuZ2V0Q29tcG9uZW50IHx8IHJvdXRlLmdldENvbXBvbmVudHM7XG5cdCAgaWYgKCFnZXRDb21wb25lbnQpIHtcblx0ICAgIGNhbGxiYWNrKCk7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXG5cdCAgdmFyIGxvY2F0aW9uID0gbmV4dFN0YXRlLmxvY2F0aW9uO1xuXG5cdCAgdmFyIG5leHRTdGF0ZVdpdGhMb2NhdGlvbiA9ICgwLCBfbWFrZVN0YXRlV2l0aExvY2F0aW9uMi5kZWZhdWx0KShuZXh0U3RhdGUsIGxvY2F0aW9uKTtcblxuXHQgIGdldENvbXBvbmVudC5jYWxsKHJvdXRlLCBuZXh0U3RhdGVXaXRoTG9jYXRpb24sIGNhbGxiYWNrKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBc3luY2hyb25vdXNseSBmZXRjaGVzIGFsbCBjb21wb25lbnRzIG5lZWRlZCBmb3IgdGhlIGdpdmVuIHJvdXRlclxuXHQgKiBzdGF0ZSBhbmQgY2FsbHMgY2FsbGJhY2soZXJyb3IsIGNvbXBvbmVudHMpIHdoZW4gZmluaXNoZWQuXG5cdCAqXG5cdCAqIE5vdGU6IFRoaXMgb3BlcmF0aW9uIG1heSBmaW5pc2ggc3luY2hyb25vdXNseSBpZiBubyByb3V0ZXMgaGF2ZSBhblxuXHQgKiBhc3luY2hyb25vdXMgZ2V0Q29tcG9uZW50cyBtZXRob2QuXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRDb21wb25lbnRzKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcblx0ICAoMCwgX0FzeW5jVXRpbHMubWFwQXN5bmMpKG5leHRTdGF0ZS5yb3V0ZXMsIGZ1bmN0aW9uIChyb3V0ZSwgaW5kZXgsIGNhbGxiYWNrKSB7XG5cdCAgICBnZXRDb21wb25lbnRzRm9yUm91dGUobmV4dFN0YXRlLCByb3V0ZSwgY2FsbGJhY2spO1xuXHQgIH0sIGNhbGxiYWNrKTtcblx0fVxuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IGdldENvbXBvbmVudHM7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfUGF0dGVyblV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxuXHQvKipcblx0ICogRXh0cmFjdHMgYW4gb2JqZWN0IG9mIHBhcmFtcyB0aGUgZ2l2ZW4gcm91dGUgY2FyZXMgYWJvdXQgZnJvbVxuXHQgKiB0aGUgZ2l2ZW4gcGFyYW1zIG9iamVjdC5cblx0ICovXG5cdGZ1bmN0aW9uIGdldFJvdXRlUGFyYW1zKHJvdXRlLCBwYXJhbXMpIHtcblx0ICB2YXIgcm91dGVQYXJhbXMgPSB7fTtcblxuXHQgIGlmICghcm91dGUucGF0aCkgcmV0dXJuIHJvdXRlUGFyYW1zO1xuXG5cdCAgKDAsIF9QYXR0ZXJuVXRpbHMuZ2V0UGFyYW1OYW1lcykocm91dGUucGF0aCkuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuXHQgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbXMsIHApKSB7XG5cdCAgICAgIHJvdXRlUGFyYW1zW3BdID0gcGFyYW1zW3BdO1xuXHQgICAgfVxuXHQgIH0pO1xuXG5cdCAgcmV0dXJuIHJvdXRlUGFyYW1zO1xuXHR9XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gZ2V0Um91dGVQYXJhbXM7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfY3JlYXRlSGFzaEhpc3RvcnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcblxuXHR2YXIgX2NyZWF0ZUhhc2hIaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUhhc2hIaXN0b3J5KTtcblxuXHR2YXIgX2NyZWF0ZVJvdXRlckhpc3RvcnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblxuXHR2YXIgX2NyZWF0ZVJvdXRlckhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUm91dGVySGlzdG9yeSk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVJvdXRlckhpc3RvcnkyLmRlZmF1bHQpKF9jcmVhdGVIYXNoSGlzdG9yeTIuZGVmYXVsdCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IGlzQWN0aXZlO1xuXG5cdHZhciBfUGF0dGVyblV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxuXHRmdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuXHQgIGlmIChhID09IGIpIHJldHVybiB0cnVlO1xuXG5cdCAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuXHQgIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG5cdCAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcblx0ICAgICAgcmV0dXJuIGRlZXBFcXVhbChpdGVtLCBiW2luZGV4XSk7XG5cdCAgICB9KTtcblx0ICB9XG5cblx0ICBpZiAoKHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKSkgPT09ICdvYmplY3QnKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIGEpIHtcblx0ICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgcCkpIHtcblx0ICAgICAgICBjb250aW51ZTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChhW3BdID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICBpZiAoYltwXSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgIH0gZWxzZSBpZiAoIWRlZXBFcXVhbChhW3BdLCBiW3BdKSkge1xuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cblx0ICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IHBhdGhuYW1lIG1hdGNoZXMgdGhlIHN1cHBsaWVkIG9uZSwgbmV0IG9mXG5cdCAqIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoIG5vcm1hbGl6YXRpb24uIFRoaXMgaXMgc3VmZmljaWVudCBmb3IgYW5cblx0ICogaW5kZXhPbmx5IHJvdXRlIG1hdGNoLlxuXHQgKi9cblx0ZnVuY3Rpb24gcGF0aElzQWN0aXZlKHBhdGhuYW1lLCBjdXJyZW50UGF0aG5hbWUpIHtcblx0ICAvLyBOb3JtYWxpemUgbGVhZGluZyBzbGFzaCBmb3IgY29uc2lzdGVuY3kuIExlYWRpbmcgc2xhc2ggb24gcGF0aG5hbWUgaGFzXG5cdCAgLy8gYWxyZWFkeSBiZWVuIG5vcm1hbGl6ZWQgaW4gaXNBY3RpdmUuIFNlZSBjYXZlYXQgdGhlcmUuXG5cdCAgaWYgKGN1cnJlbnRQYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuXHQgICAgY3VycmVudFBhdGhuYW1lID0gJy8nICsgY3VycmVudFBhdGhuYW1lO1xuXHQgIH1cblxuXHQgIC8vIE5vcm1hbGl6ZSB0aGUgZW5kIG9mIGJvdGggcGF0aCBuYW1lcyB0b28uIE1heWJlIGAvZm9vL2Agc2hvdWxkbid0IHNob3dcblx0ICAvLyBgL2Zvb2AgYXMgYWN0aXZlLCBidXQgaW4gdGhpcyBjYXNlLCB3ZSB3b3VsZCBhbHJlYWR5IGhhdmUgZmFpbGVkIHRoZVxuXHQgIC8vIG1hdGNoLlxuXHQgIGlmIChwYXRobmFtZS5jaGFyQXQocGF0aG5hbWUubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuXHQgICAgcGF0aG5hbWUgKz0gJy8nO1xuXHQgIH1cblx0ICBpZiAoY3VycmVudFBhdGhuYW1lLmNoYXJBdChjdXJyZW50UGF0aG5hbWUubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuXHQgICAgY3VycmVudFBhdGhuYW1lICs9ICcvJztcblx0ICB9XG5cblx0ICByZXR1cm4gY3VycmVudFBhdGhuYW1lID09PSBwYXRobmFtZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHBhdGhuYW1lIG1hdGNoZXMgdGhlIGFjdGl2ZSByb3V0ZXMgYW5kIHBhcmFtcy5cblx0ICovXG5cdGZ1bmN0aW9uIHJvdXRlSXNBY3RpdmUocGF0aG5hbWUsIHJvdXRlcywgcGFyYW1zKSB7XG5cdCAgdmFyIHJlbWFpbmluZ1BhdGhuYW1lID0gcGF0aG5hbWUsXG5cdCAgICAgIHBhcmFtTmFtZXMgPSBbXSxcblx0ICAgICAgcGFyYW1WYWx1ZXMgPSBbXTtcblxuXHQgIC8vIGZvci4uLm9mIHdvdWxkIHdvcmsgaGVyZSBidXQgaXQncyBwcm9iYWJseSBzbG93ZXIgcG9zdC10cmFuc3BpbGF0aW9uLlxuXHQgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByb3V0ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0ICAgIHZhciByb3V0ZSA9IHJvdXRlc1tpXTtcblx0ICAgIHZhciBwYXR0ZXJuID0gcm91dGUucGF0aCB8fCAnJztcblxuXHQgICAgaWYgKHBhdHRlcm4uY2hhckF0KDApID09PSAnLycpIHtcblx0ICAgICAgcmVtYWluaW5nUGF0aG5hbWUgPSBwYXRobmFtZTtcblx0ICAgICAgcGFyYW1OYW1lcyA9IFtdO1xuXHQgICAgICBwYXJhbVZhbHVlcyA9IFtdO1xuXHQgICAgfVxuXG5cdCAgICBpZiAocmVtYWluaW5nUGF0aG5hbWUgIT09IG51bGwgJiYgcGF0dGVybikge1xuXHQgICAgICB2YXIgbWF0Y2hlZCA9ICgwLCBfUGF0dGVyblV0aWxzLm1hdGNoUGF0dGVybikocGF0dGVybiwgcmVtYWluaW5nUGF0aG5hbWUpO1xuXHQgICAgICBpZiAobWF0Y2hlZCkge1xuXHQgICAgICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZC5yZW1haW5pbmdQYXRobmFtZTtcblx0ICAgICAgICBwYXJhbU5hbWVzID0gW10uY29uY2F0KHBhcmFtTmFtZXMsIG1hdGNoZWQucGFyYW1OYW1lcyk7XG5cdCAgICAgICAgcGFyYW1WYWx1ZXMgPSBbXS5jb25jYXQocGFyYW1WYWx1ZXMsIG1hdGNoZWQucGFyYW1WYWx1ZXMpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gbnVsbDtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChyZW1haW5pbmdQYXRobmFtZSA9PT0gJycpIHtcblx0ICAgICAgICAvLyBXZSBoYXZlIGFuIGV4YWN0IG1hdGNoIG9uIHRoZSByb3V0ZS4gSnVzdCBjaGVjayB0aGF0IGFsbCB0aGUgcGFyYW1zXG5cdCAgICAgICAgLy8gbWF0Y2guXG5cdCAgICAgICAgLy8gRklYTUU6IFRoaXMgZG9lc24ndCB3b3JrIG9uIHJlcGVhdGVkIHBhcmFtcy5cblx0ICAgICAgICByZXR1cm4gcGFyYW1OYW1lcy5ldmVyeShmdW5jdGlvbiAocGFyYW1OYW1lLCBpbmRleCkge1xuXHQgICAgICAgICAgcmV0dXJuIFN0cmluZyhwYXJhbVZhbHVlc1tpbmRleF0pID09PSBTdHJpbmcocGFyYW1zW3BhcmFtTmFtZV0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiBhbGwga2V5L3ZhbHVlIHBhaXJzIGluIHRoZSBnaXZlbiBxdWVyeSBhcmVcblx0ICogY3VycmVudGx5IGFjdGl2ZS5cblx0ICovXG5cdGZ1bmN0aW9uIHF1ZXJ5SXNBY3RpdmUocXVlcnksIGFjdGl2ZVF1ZXJ5KSB7XG5cdCAgaWYgKGFjdGl2ZVF1ZXJ5ID09IG51bGwpIHJldHVybiBxdWVyeSA9PSBudWxsO1xuXG5cdCAgaWYgKHF1ZXJ5ID09IG51bGwpIHJldHVybiB0cnVlO1xuXG5cdCAgcmV0dXJuIGRlZXBFcXVhbChxdWVyeSwgYWN0aXZlUXVlcnkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiBhIDxMaW5rPiB0byB0aGUgZ2l2ZW4gcGF0aG5hbWUvcXVlcnkgY29tYmluYXRpb24gaXNcblx0ICogY3VycmVudGx5IGFjdGl2ZS5cblx0ICovXG5cdGZ1bmN0aW9uIGlzQWN0aXZlKF9yZWYsIGluZGV4T25seSwgY3VycmVudExvY2F0aW9uLCByb3V0ZXMsIHBhcmFtcykge1xuXHQgIHZhciBwYXRobmFtZSA9IF9yZWYucGF0aG5hbWU7XG5cdCAgdmFyIHF1ZXJ5ID0gX3JlZi5xdWVyeTtcblxuXHQgIGlmIChjdXJyZW50TG9jYXRpb24gPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG5cdCAgLy8gVE9ETzogVGhpcyBpcyBhIGJpdCB1Z2x5LiBJdCBrZWVwcyBhcm91bmQgc3VwcG9ydCBmb3IgdHJlYXRpbmcgcGF0aG5hbWVzXG5cdCAgLy8gd2l0aG91dCBwcmVjZWRpbmcgc2xhc2hlcyBhcyBhYnNvbHV0ZSBwYXRocywgYnV0IHBvc3NpYmx5IGFsc28gd29ya3Ncblx0ICAvLyBhcm91bmQgdGhlIHNhbWUgcXVpcmtzIHdpdGggYmFzZW5hbWVzIGFzIGluIG1hdGNoUm91dGVzLlxuXHQgIGlmIChwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuXHQgICAgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcblx0ICB9XG5cblx0ICBpZiAoIXBhdGhJc0FjdGl2ZShwYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKSkge1xuXHQgICAgLy8gVGhlIHBhdGggY2hlY2sgaXMgbmVjZXNzYXJ5IGFuZCBzdWZmaWNpZW50IGZvciBpbmRleE9ubHksIGJ1dCBvdGhlcndpc2Vcblx0ICAgIC8vIHdlIHN0aWxsIG5lZWQgdG8gY2hlY2sgdGhlIHJvdXRlcy5cblx0ICAgIGlmIChpbmRleE9ubHkgfHwgIXJvdXRlSXNBY3RpdmUocGF0aG5hbWUsIHJvdXRlcywgcGFyYW1zKSkge1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHF1ZXJ5SXNBY3RpdmUocXVlcnksIGN1cnJlbnRMb2NhdGlvbi5xdWVyeSk7XG5cdH1cblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA0OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuXHR2YXIgX2ludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cblx0dmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxuXHR2YXIgX2NyZWF0ZU1lbW9yeUhpc3RvcnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcblxuXHR2YXIgX2NyZWF0ZU1lbW9yeUhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlTWVtb3J5SGlzdG9yeSk7XG5cblx0dmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG5cdHZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG5cdHZhciBfUm91dGVVdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cblx0dmFyIF9Sb3V0ZXJVdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5cdC8qKlxuXHQgKiBBIGhpZ2gtbGV2ZWwgQVBJIHRvIGJlIHVzZWQgZm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cblx0ICpcblx0ICogVGhpcyBmdW5jdGlvbiBtYXRjaGVzIGEgbG9jYXRpb24gdG8gYSBzZXQgb2Ygcm91dGVzIGFuZCBjYWxsc1xuXHQgKiBjYWxsYmFjayhlcnJvciwgcmVkaXJlY3RMb2NhdGlvbiwgcmVuZGVyUHJvcHMpIHdoZW4gZmluaXNoZWQuXG5cdCAqXG5cdCAqIE5vdGU6IFlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIHVzZSB0aGlzIGluIGEgYnJvd3NlciB1bmxlc3MgeW91J3JlIHVzaW5nXG5cdCAqIHNlcnZlci1zaWRlIHJlbmRlcmluZyB3aXRoIGFzeW5jIHJvdXRlcy5cblx0ICovXG5cdGZ1bmN0aW9uIG1hdGNoKF9yZWYsIGNhbGxiYWNrKSB7XG5cdCAgdmFyIGhpc3RvcnkgPSBfcmVmLmhpc3Rvcnk7XG5cdCAgdmFyIHJvdXRlcyA9IF9yZWYucm91dGVzO1xuXHQgIHZhciBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb247XG5cblx0ICB2YXIgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ2hpc3RvcnknLCAncm91dGVzJywgJ2xvY2F0aW9uJ10pO1xuXG5cdCAgIShoaXN0b3J5IHx8IGxvY2F0aW9uKSA/ICB0cnVlID8gKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlLCAnbWF0Y2ggbmVlZHMgYSBoaXN0b3J5IG9yIGEgbG9jYXRpb24nKSA6ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSkgOiB2b2lkIDA7XG5cblx0ICBoaXN0b3J5ID0gaGlzdG9yeSA/IGhpc3RvcnkgOiAoMCwgX2NyZWF0ZU1lbW9yeUhpc3RvcnkyLmRlZmF1bHQpKG9wdGlvbnMpO1xuXHQgIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKGhpc3RvcnksICgwLCBfUm91dGVVdGlscy5jcmVhdGVSb3V0ZXMpKHJvdXRlcykpO1xuXG5cdCAgdmFyIHVubGlzdGVuID0gdm9pZCAwO1xuXG5cdCAgaWYgKGxvY2F0aW9uKSB7XG5cdCAgICAvLyBBbGxvdyBtYXRjaCh7IGxvY2F0aW9uOiAnL3RoZS9wYXRoJywgLi4uIH0pXG5cdCAgICBsb2NhdGlvbiA9IGhpc3RvcnkuY3JlYXRlTG9jYXRpb24obG9jYXRpb24pO1xuXHQgIH0gZWxzZSB7XG5cdCAgICAvLyBQaWNrIHVwIHRoZSBsb2NhdGlvbiBmcm9tIHRoZSBoaXN0b3J5IHZpYSBzeW5jaHJvbm91cyBoaXN0b3J5Lmxpc3RlblxuXHQgICAgLy8gY2FsbCBpZiBuZWVkZWQuXG5cdCAgICB1bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChoaXN0b3J5TG9jYXRpb24pIHtcblx0ICAgICAgbG9jYXRpb24gPSBoaXN0b3J5TG9jYXRpb247XG5cdCAgICB9KTtcblx0ICB9XG5cblx0ICB2YXIgcm91dGVyID0gKDAsIF9Sb3V0ZXJVdGlscy5jcmVhdGVSb3V0ZXJPYmplY3QpKGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKTtcblx0ICBoaXN0b3J5ID0gKDAsIF9Sb3V0ZXJVdGlscy5jcmVhdGVSb3V0aW5nSGlzdG9yeSkoaGlzdG9yeSwgdHJhbnNpdGlvbk1hbmFnZXIpO1xuXG5cdCAgdHJhbnNpdGlvbk1hbmFnZXIubWF0Y2gobG9jYXRpb24sIGZ1bmN0aW9uIChlcnJvciwgcmVkaXJlY3RMb2NhdGlvbiwgbmV4dFN0YXRlKSB7XG5cdCAgICBjYWxsYmFjayhlcnJvciwgcmVkaXJlY3RMb2NhdGlvbiwgbmV4dFN0YXRlICYmIF9leHRlbmRzKHt9LCBuZXh0U3RhdGUsIHtcblx0ICAgICAgaGlzdG9yeTogaGlzdG9yeSxcblx0ICAgICAgcm91dGVyOiByb3V0ZXIsXG5cdCAgICAgIG1hdGNoQ29udGV4dDogeyBoaXN0b3J5OiBoaXN0b3J5LCB0cmFuc2l0aW9uTWFuYWdlcjogdHJhbnNpdGlvbk1hbmFnZXIsIHJvdXRlcjogcm91dGVyIH1cblx0ICAgIH0pKTtcblxuXHQgICAgLy8gRGVmZXIgcmVtb3ZpbmcgdGhlIGxpc3RlbmVyIHRvIGhlcmUgdG8gcHJldmVudCBET00gaGlzdG9yaWVzIGZyb20gaGF2aW5nXG5cdCAgICAvLyB0byB1bndpbmQgRE9NIGV2ZW50IGxpc3RlbmVycyB1bm5lY2Vzc2FyaWx5LCBpbiBjYXNlIGNhbGxiYWNrIHJlbmRlcnMgYVxuXHQgICAgLy8gPFJvdXRlcj4gYW5kIGF0dGFjaGVzIGFub3RoZXIgaGlzdG9yeSBsaXN0ZW5lci5cblx0ICAgIGlmICh1bmxpc3Rlbikge1xuXHQgICAgICB1bmxpc3RlbigpO1xuXHQgICAgfVxuXHQgIH0pO1xuXHR9XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gbWF0Y2g7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cdHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gbWF0Y2hSb3V0ZXM7XG5cblx0dmFyIF9Bc3luY1V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cblx0dmFyIF9tYWtlU3RhdGVXaXRoTG9jYXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcblxuXHR2YXIgX21ha2VTdGF0ZVdpdGhMb2NhdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYWtlU3RhdGVXaXRoTG9jYXRpb24pO1xuXG5cdHZhciBfUGF0dGVyblV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxuXHR2YXIgX3JvdXRlcldhcm5pbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5cdHZhciBfcm91dGVyV2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yb3V0ZXJXYXJuaW5nKTtcblxuXHR2YXIgX1JvdXRlVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZnVuY3Rpb24gZ2V0Q2hpbGRSb3V0ZXMocm91dGUsIGxvY2F0aW9uLCBwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcywgY2FsbGJhY2spIHtcblx0ICBpZiAocm91dGUuY2hpbGRSb3V0ZXMpIHtcblx0ICAgIHJldHVybiBbbnVsbCwgcm91dGUuY2hpbGRSb3V0ZXNdO1xuXHQgIH1cblx0ICBpZiAoIXJvdXRlLmdldENoaWxkUm91dGVzKSB7XG5cdCAgICByZXR1cm4gW107XG5cdCAgfVxuXG5cdCAgdmFyIHN5bmMgPSB0cnVlLFxuXHQgICAgICByZXN1bHQgPSB2b2lkIDA7XG5cblx0ICB2YXIgcGFydGlhbE5leHRTdGF0ZSA9IHtcblx0ICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcblx0ICAgIHBhcmFtczogY3JlYXRlUGFyYW1zKHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzKVxuXHQgIH07XG5cblx0ICB2YXIgcGFydGlhbE5leHRTdGF0ZVdpdGhMb2NhdGlvbiA9ICgwLCBfbWFrZVN0YXRlV2l0aExvY2F0aW9uMi5kZWZhdWx0KShwYXJ0aWFsTmV4dFN0YXRlLCBsb2NhdGlvbik7XG5cblx0ICByb3V0ZS5nZXRDaGlsZFJvdXRlcyhwYXJ0aWFsTmV4dFN0YXRlV2l0aExvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIGNoaWxkUm91dGVzKSB7XG5cdCAgICBjaGlsZFJvdXRlcyA9ICFlcnJvciAmJiAoMCwgX1JvdXRlVXRpbHMuY3JlYXRlUm91dGVzKShjaGlsZFJvdXRlcyk7XG5cdCAgICBpZiAoc3luYykge1xuXHQgICAgICByZXN1bHQgPSBbZXJyb3IsIGNoaWxkUm91dGVzXTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICBjYWxsYmFjayhlcnJvciwgY2hpbGRSb3V0ZXMpO1xuXHQgIH0pO1xuXG5cdCAgc3luYyA9IGZhbHNlO1xuXHQgIHJldHVybiByZXN1bHQ7IC8vIE1pZ2h0IGJlIHVuZGVmaW5lZC5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldEluZGV4Um91dGUocm91dGUsIGxvY2F0aW9uLCBwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcywgY2FsbGJhY2spIHtcblx0ICBpZiAocm91dGUuaW5kZXhSb3V0ZSkge1xuXHQgICAgY2FsbGJhY2sobnVsbCwgcm91dGUuaW5kZXhSb3V0ZSk7XG5cdCAgfSBlbHNlIGlmIChyb3V0ZS5nZXRJbmRleFJvdXRlKSB7XG5cdCAgICB2YXIgcGFydGlhbE5leHRTdGF0ZSA9IHtcblx0ICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuXHQgICAgICBwYXJhbXM6IGNyZWF0ZVBhcmFtcyhwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcylcblx0ICAgIH07XG5cblx0ICAgIHZhciBwYXJ0aWFsTmV4dFN0YXRlV2l0aExvY2F0aW9uID0gKDAsIF9tYWtlU3RhdGVXaXRoTG9jYXRpb24yLmRlZmF1bHQpKHBhcnRpYWxOZXh0U3RhdGUsIGxvY2F0aW9uKTtcblxuXHQgICAgcm91dGUuZ2V0SW5kZXhSb3V0ZShwYXJ0aWFsTmV4dFN0YXRlV2l0aExvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIGluZGV4Um91dGUpIHtcblx0ICAgICAgY2FsbGJhY2soZXJyb3IsICFlcnJvciAmJiAoMCwgX1JvdXRlVXRpbHMuY3JlYXRlUm91dGVzKShpbmRleFJvdXRlKVswXSk7XG5cdCAgICB9KTtcblx0ICB9IGVsc2UgaWYgKHJvdXRlLmNoaWxkUm91dGVzKSB7XG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgcGF0aGxlc3MgPSByb3V0ZS5jaGlsZFJvdXRlcy5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkUm91dGUpIHtcblx0ICAgICAgICByZXR1cm4gIWNoaWxkUm91dGUucGF0aDtcblx0ICAgICAgfSk7XG5cblx0ICAgICAgKDAsIF9Bc3luY1V0aWxzLmxvb3BBc3luYykocGF0aGxlc3MubGVuZ3RoLCBmdW5jdGlvbiAoaW5kZXgsIG5leHQsIGRvbmUpIHtcblx0ICAgICAgICBnZXRJbmRleFJvdXRlKHBhdGhsZXNzW2luZGV4XSwgbG9jYXRpb24sIHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzLCBmdW5jdGlvbiAoZXJyb3IsIGluZGV4Um91dGUpIHtcblx0ICAgICAgICAgIGlmIChlcnJvciB8fCBpbmRleFJvdXRlKSB7XG5cdCAgICAgICAgICAgIHZhciByb3V0ZXMgPSBbcGF0aGxlc3NbaW5kZXhdXS5jb25jYXQoQXJyYXkuaXNBcnJheShpbmRleFJvdXRlKSA/IGluZGV4Um91dGUgOiBbaW5kZXhSb3V0ZV0pO1xuXHQgICAgICAgICAgICBkb25lKGVycm9yLCByb3V0ZXMpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgbmV4dCgpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9LCBmdW5jdGlvbiAoZXJyLCByb3V0ZXMpIHtcblx0ICAgICAgICBjYWxsYmFjayhudWxsLCByb3V0ZXMpO1xuXHQgICAgICB9KTtcblx0ICAgIH0pKCk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGNhbGxiYWNrKCk7XG5cdCAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gYXNzaWduUGFyYW1zKHBhcmFtcywgcGFyYW1OYW1lcywgcGFyYW1WYWx1ZXMpIHtcblx0ICByZXR1cm4gcGFyYW1OYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKHBhcmFtcywgcGFyYW1OYW1lLCBpbmRleCkge1xuXHQgICAgdmFyIHBhcmFtVmFsdWUgPSBwYXJhbVZhbHVlcyAmJiBwYXJhbVZhbHVlc1tpbmRleF07XG5cblx0ICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtc1twYXJhbU5hbWVdKSkge1xuXHQgICAgICBwYXJhbXNbcGFyYW1OYW1lXS5wdXNoKHBhcmFtVmFsdWUpO1xuXHQgICAgfSBlbHNlIGlmIChwYXJhbU5hbWUgaW4gcGFyYW1zKSB7XG5cdCAgICAgIHBhcmFtc1twYXJhbU5hbWVdID0gW3BhcmFtc1twYXJhbU5hbWVdLCBwYXJhbVZhbHVlXTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHBhcmFtc1twYXJhbU5hbWVdID0gcGFyYW1WYWx1ZTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHBhcmFtcztcblx0ICB9LCBwYXJhbXMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlUGFyYW1zKHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzKSB7XG5cdCAgcmV0dXJuIGFzc2lnblBhcmFtcyh7fSwgcGFyYW1OYW1lcywgcGFyYW1WYWx1ZXMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gbWF0Y2hSb3V0ZURlZXAocm91dGUsIGxvY2F0aW9uLCByZW1haW5pbmdQYXRobmFtZSwgcGFyYW1OYW1lcywgcGFyYW1WYWx1ZXMsIGNhbGxiYWNrKSB7XG5cdCAgdmFyIHBhdHRlcm4gPSByb3V0ZS5wYXRoIHx8ICcnO1xuXG5cdCAgaWYgKHBhdHRlcm4uY2hhckF0KDApID09PSAnLycpIHtcblx0ICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG5cdCAgICBwYXJhbU5hbWVzID0gW107XG5cdCAgICBwYXJhbVZhbHVlcyA9IFtdO1xuXHQgIH1cblxuXHQgIC8vIE9ubHkgdHJ5IHRvIG1hdGNoIHRoZSBwYXRoIGlmIHRoZSByb3V0ZSBhY3R1YWxseSBoYXMgYSBwYXR0ZXJuLCBhbmQgaWZcblx0ICAvLyB3ZSdyZSBub3QganVzdCBzZWFyY2hpbmcgZm9yIHBvdGVudGlhbCBuZXN0ZWQgYWJzb2x1dGUgcGF0aHMuXG5cdCAgaWYgKHJlbWFpbmluZ1BhdGhuYW1lICE9PSBudWxsICYmIHBhdHRlcm4pIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIHZhciBtYXRjaGVkID0gKDAsIF9QYXR0ZXJuVXRpbHMubWF0Y2hQYXR0ZXJuKShwYXR0ZXJuLCByZW1haW5pbmdQYXRobmFtZSk7XG5cdCAgICAgIGlmIChtYXRjaGVkKSB7XG5cdCAgICAgICAgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkLnJlbWFpbmluZ1BhdGhuYW1lO1xuXHQgICAgICAgIHBhcmFtTmFtZXMgPSBbXS5jb25jYXQocGFyYW1OYW1lcywgbWF0Y2hlZC5wYXJhbU5hbWVzKTtcblx0ICAgICAgICBwYXJhbVZhbHVlcyA9IFtdLmNvbmNhdChwYXJhbVZhbHVlcywgbWF0Y2hlZC5wYXJhbVZhbHVlcyk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmVtYWluaW5nUGF0aG5hbWUgPSBudWxsO1xuXHQgICAgICB9XG5cdCAgICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgICBjYWxsYmFjayhlcnJvcik7XG5cdCAgICB9XG5cblx0ICAgIC8vIEJ5IGFzc3VtcHRpb24sIHBhdHRlcm4gaXMgbm9uLWVtcHR5IGhlcmUsIHdoaWNoIGlzIHRoZSBwcmVyZXF1aXNpdGUgZm9yXG5cdCAgICAvLyBhY3R1YWxseSB0ZXJtaW5hdGluZyBhIG1hdGNoLlxuXHQgICAgaWYgKHJlbWFpbmluZ1BhdGhuYW1lID09PSAnJykge1xuXHQgICAgICB2YXIgX3JldDIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG1hdGNoID0ge1xuXHQgICAgICAgICAgcm91dGVzOiBbcm91dGVdLFxuXHQgICAgICAgICAgcGFyYW1zOiBjcmVhdGVQYXJhbXMocGFyYW1OYW1lcywgcGFyYW1WYWx1ZXMpXG5cdCAgICAgICAgfTtcblxuXHQgICAgICAgIGdldEluZGV4Um91dGUocm91dGUsIGxvY2F0aW9uLCBwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcywgZnVuY3Rpb24gKGVycm9yLCBpbmRleFJvdXRlKSB7XG5cdCAgICAgICAgICBpZiAoZXJyb3IpIHtcblx0ICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5kZXhSb3V0ZSkpIHtcblx0ICAgICAgICAgICAgICB2YXIgX21hdGNoJHJvdXRlcztcblxuXHQgICAgICAgICAgICAgICB0cnVlID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShpbmRleFJvdXRlLmV2ZXJ5KGZ1bmN0aW9uIChyb3V0ZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuICFyb3V0ZS5wYXRoO1xuXHQgICAgICAgICAgICAgIH0pLCAnSW5kZXggcm91dGVzIHNob3VsZCBub3QgaGF2ZSBwYXRocycpIDogdm9pZCAwO1xuXHQgICAgICAgICAgICAgIChfbWF0Y2gkcm91dGVzID0gbWF0Y2gucm91dGVzKS5wdXNoLmFwcGx5KF9tYXRjaCRyb3V0ZXMsIGluZGV4Um91dGUpO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4Um91dGUpIHtcblx0ICAgICAgICAgICAgICAgdHJ1ZSA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoIWluZGV4Um91dGUucGF0aCwgJ0luZGV4IHJvdXRlcyBzaG91bGQgbm90IGhhdmUgcGF0aHMnKSA6IHZvaWQgMDtcblx0ICAgICAgICAgICAgICBtYXRjaC5yb3V0ZXMucHVzaChpbmRleFJvdXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG1hdGNoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICB2OiB2b2lkIDBcblx0ICAgICAgICB9O1xuXHQgICAgICB9KCk7XG5cblx0ICAgICAgaWYgKCh0eXBlb2YgX3JldDIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKF9yZXQyKSkgPT09IFwib2JqZWN0XCIpIHJldHVybiBfcmV0Mi52O1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIGlmIChyZW1haW5pbmdQYXRobmFtZSAhPSBudWxsIHx8IHJvdXRlLmNoaWxkUm91dGVzKSB7XG5cdCAgICAvLyBFaXRoZXIgYSkgdGhpcyByb3V0ZSBtYXRjaGVkIGF0IGxlYXN0IHNvbWUgb2YgdGhlIHBhdGggb3IgYilcblx0ICAgIC8vIHdlIGRvbid0IGhhdmUgdG8gbG9hZCB0aGlzIHJvdXRlJ3MgY2hpbGRyZW4gYXN5bmNocm9ub3VzbHkuIEluXG5cdCAgICAvLyBlaXRoZXIgY2FzZSBjb250aW51ZSBjaGVja2luZyBmb3IgbWF0Y2hlcyBpbiB0aGUgc3VidHJlZS5cblx0ICAgIHZhciBvbkNoaWxkUm91dGVzID0gZnVuY3Rpb24gb25DaGlsZFJvdXRlcyhlcnJvciwgY2hpbGRSb3V0ZXMpIHtcblx0ICAgICAgaWYgKGVycm9yKSB7XG5cdCAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuXHQgICAgICB9IGVsc2UgaWYgKGNoaWxkUm91dGVzKSB7XG5cdCAgICAgICAgLy8gQ2hlY2sgdGhlIGNoaWxkIHJvdXRlcyB0byBzZWUgaWYgYW55IG9mIHRoZW0gbWF0Y2guXG5cdCAgICAgICAgbWF0Y2hSb3V0ZXMoY2hpbGRSb3V0ZXMsIGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIG1hdGNoKSB7XG5cdCAgICAgICAgICBpZiAoZXJyb3IpIHtcblx0ICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuXHQgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCkge1xuXHQgICAgICAgICAgICAvLyBBIGNoaWxkIHJvdXRlIG1hdGNoZWQhIEF1Z21lbnQgdGhlIG1hdGNoIGFuZCBwYXNzIGl0IHVwIHRoZSBzdGFjay5cblx0ICAgICAgICAgICAgbWF0Y2gucm91dGVzLnVuc2hpZnQocm91dGUpO1xuXHQgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBtYXRjaCk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBjYWxsYmFjaygpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lLCBwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcyk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgY2FsbGJhY2soKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgdmFyIHJlc3VsdCA9IGdldENoaWxkUm91dGVzKHJvdXRlLCBsb2NhdGlvbiwgcGFyYW1OYW1lcywgcGFyYW1WYWx1ZXMsIG9uQ2hpbGRSb3V0ZXMpO1xuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgICBvbkNoaWxkUm91dGVzLmFwcGx5KHVuZGVmaW5lZCwgcmVzdWx0KTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgY2FsbGJhY2soKTtcblx0ICB9XG5cdH1cblxuXHQvKipcblx0ICogQXN5bmNocm9ub3VzbHkgbWF0Y2hlcyB0aGUgZ2l2ZW4gbG9jYXRpb24gdG8gYSBzZXQgb2Ygcm91dGVzIGFuZCBjYWxsc1xuXHQgKiBjYWxsYmFjayhlcnJvciwgc3RhdGUpIHdoZW4gZmluaXNoZWQuIFRoZSBzdGF0ZSBvYmplY3Qgd2lsbCBoYXZlIHRoZVxuXHQgKiBmb2xsb3dpbmcgcHJvcGVydGllczpcblx0ICpcblx0ICogLSByb3V0ZXMgICAgICAgQW4gYXJyYXkgb2Ygcm91dGVzIHRoYXQgbWF0Y2hlZCwgaW4gaGllcmFyY2hpY2FsIG9yZGVyXG5cdCAqIC0gcGFyYW1zICAgICAgIEFuIG9iamVjdCBvZiBVUkwgcGFyYW1ldGVyc1xuXHQgKlxuXHQgKiBOb3RlOiBUaGlzIG9wZXJhdGlvbiBtYXkgZmluaXNoIHN5bmNocm9ub3VzbHkgaWYgbm8gcm91dGVzIGhhdmUgYW5cblx0ICogYXN5bmNocm9ub3VzIGdldENoaWxkUm91dGVzIG1ldGhvZC5cblx0ICovXG5cdGZ1bmN0aW9uIG1hdGNoUm91dGVzKHJvdXRlcywgbG9jYXRpb24sIGNhbGxiYWNrLCByZW1haW5pbmdQYXRobmFtZSkge1xuXHQgIHZhciBwYXJhbU5hbWVzID0gYXJndW1lbnRzLmxlbmd0aCA8PSA0IHx8IGFyZ3VtZW50c1s0XSA9PT0gdW5kZWZpbmVkID8gW10gOiBhcmd1bWVudHNbNF07XG5cdCAgdmFyIHBhcmFtVmFsdWVzID0gYXJndW1lbnRzLmxlbmd0aCA8PSA1IHx8IGFyZ3VtZW50c1s1XSA9PT0gdW5kZWZpbmVkID8gW10gOiBhcmd1bWVudHNbNV07XG5cblx0ICBpZiAocmVtYWluaW5nUGF0aG5hbWUgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgLy8gVE9ETzogVGhpcyBpcyBhIGxpdHRsZSBiaXQgdWdseSwgYnV0IGl0IHdvcmtzIGFyb3VuZCBhIHF1aXJrIGluIGhpc3Rvcnlcblx0ICAgIC8vIHRoYXQgc3RyaXBzIHRoZSBsZWFkaW5nIHNsYXNoIGZyb20gcGF0aG5hbWVzIHdoZW4gdXNpbmcgYmFzZW5hbWVzIHdpdGhcblx0ICAgIC8vIHRyYWlsaW5nIHNsYXNoZXMuXG5cdCAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcblx0ICAgICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcblx0ICAgICAgICBwYXRobmFtZTogJy8nICsgbG9jYXRpb24ucGF0aG5hbWVcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICByZW1haW5pbmdQYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuXHQgIH1cblxuXHQgICgwLCBfQXN5bmNVdGlscy5sb29wQXN5bmMpKHJvdXRlcy5sZW5ndGgsIGZ1bmN0aW9uIChpbmRleCwgbmV4dCwgZG9uZSkge1xuXHQgICAgbWF0Y2hSb3V0ZURlZXAocm91dGVzW2luZGV4XSwgbG9jYXRpb24sIHJlbWFpbmluZ1BhdGhuYW1lLCBwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcywgZnVuY3Rpb24gKGVycm9yLCBtYXRjaCkge1xuXHQgICAgICBpZiAoZXJyb3IgfHwgbWF0Y2gpIHtcblx0ICAgICAgICBkb25lKGVycm9yLCBtYXRjaCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgbmV4dCgpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9LCBjYWxsYmFjayk7XG5cdH1cblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA1MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuXHR2YXIgX3VzZVF1ZXJpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblxuXHR2YXIgX3VzZVF1ZXJpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlUXVlcmllcyk7XG5cblx0dmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG5cdHZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG5cdHZhciBfcm91dGVyV2FybmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0dmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IGNyZWF0ZUhpc3RvcnkgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBjcmVhdGVcblx0ICogaGlzdG9yeSBvYmplY3RzIHRoYXQga25vdyBhYm91dCByb3V0aW5nLlxuXHQgKlxuXHQgKiBFbmhhbmNlcyBoaXN0b3J5IG9iamVjdHMgd2l0aCB0aGUgZm9sbG93aW5nIG1ldGhvZHM6XG5cdCAqXG5cdCAqIC0gbGlzdGVuKChlcnJvciwgbmV4dFN0YXRlKSA9PiB7fSlcblx0ICogLSBsaXN0ZW5CZWZvcmVMZWF2aW5nUm91dGUocm91dGUsIChuZXh0TG9jYXRpb24pID0+IHt9KVxuXHQgKiAtIG1hdGNoKGxvY2F0aW9uLCAoZXJyb3IsIHJlZGlyZWN0TG9jYXRpb24sIG5leHRTdGF0ZSkgPT4ge30pXG5cdCAqIC0gaXNBY3RpdmUocGF0aG5hbWUsIHF1ZXJ5LCBpbmRleE9ubHk9ZmFsc2UpXG5cdCAqL1xuXHRmdW5jdGlvbiB1c2VSb3V0ZXMoY3JlYXRlSGlzdG9yeSkge1xuXHQgICB0cnVlID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ2B1c2VSb3V0ZXNgIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuXG5cdCAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG5cblx0ICAgIHZhciByb3V0ZXMgPSBfcmVmLnJvdXRlcztcblxuXHQgICAgdmFyIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydyb3V0ZXMnXSk7XG5cblx0ICAgIHZhciBoaXN0b3J5ID0gKDAsIF91c2VRdWVyaWVzMi5kZWZhdWx0KShjcmVhdGVIaXN0b3J5KShvcHRpb25zKTtcblx0ICAgIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKGhpc3RvcnksIHJvdXRlcyk7XG5cdCAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKTtcblx0ICB9O1xuXHR9XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gdXNlUm91dGVzO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDUyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IHdpdGhSb3V0ZXI7XG5cblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cblx0dmFyIF9ob2lzdE5vblJlYWN0U3RhdGljcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjApO1xuXG5cdHZhciBfaG9pc3ROb25SZWFjdFN0YXRpY3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaG9pc3ROb25SZWFjdFN0YXRpY3MpO1xuXG5cdHZhciBfUHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShXcmFwcGVkQ29tcG9uZW50KSB7XG5cdCAgcmV0dXJuIFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXHR9XG5cblx0ZnVuY3Rpb24gd2l0aFJvdXRlcihXcmFwcGVkQ29tcG9uZW50KSB7XG5cdCAgdmFyIFdpdGhSb3V0ZXIgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuXHQgICAgZGlzcGxheU5hbWU6ICdXaXRoUm91dGVyJyxcblxuXHQgICAgY29udGV4dFR5cGVzOiB7IHJvdXRlcjogX1Byb3BUeXBlcy5yb3V0ZXJTaGFwZSB9LFxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgeyByb3V0ZXI6IHRoaXMuY29udGV4dC5yb3V0ZXIgfSkpO1xuXHQgICAgfVxuXHQgIH0pO1xuXG5cdCAgV2l0aFJvdXRlci5kaXNwbGF5TmFtZSA9ICd3aXRoUm91dGVyKCcgKyBnZXREaXNwbGF5TmFtZShXcmFwcGVkQ29tcG9uZW50KSArICcpJztcblx0ICBXaXRoUm91dGVyLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuXG5cdCAgcmV0dXJuICgwLCBfaG9pc3ROb25SZWFjdFN0YXRpY3MyLmRlZmF1bHQpKFdpdGhSb3V0ZXIsIFdyYXBwZWRDb21wb25lbnQpO1xuXHR9XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBwU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cdHZhciBvYmplY3RLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSk7XG5cdHZhciBpc0FyZ3VtZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNTQpO1xuXG5cdHZhciBkZWVwRXF1YWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKSB7XG5cdCAgaWYgKCFvcHRzKSBvcHRzID0ge307XG5cdCAgLy8gNy4xLiBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG5cdCAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcblx0ICAgIHJldHVybiB0cnVlO1xuXG5cdCAgfSBlbHNlIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBEYXRlICYmIGV4cGVjdGVkIGluc3RhbmNlb2YgRGF0ZSkge1xuXHQgICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuXHQgIC8vIDcuMy4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jyxcblx0ICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LlxuXHQgIH0gZWxzZSBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQgfHwgdHlwZW9mIGFjdHVhbCAhPSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT0gJ29iamVjdCcpIHtcblx0ICAgIHJldHVybiBvcHRzLnN0cmljdCA/IGFjdHVhbCA9PT0gZXhwZWN0ZWQgOiBhY3R1YWwgPT0gZXhwZWN0ZWQ7XG5cblx0ICAvLyA3LjQuIEZvciBhbGwgb3RoZXIgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXkgb2JqZWN0cywgZXF1aXZhbGVuY2UgaXNcblx0ICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcblx0ICAvLyB3aXRoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCksIHRoZSBzYW1lIHNldCBvZiBrZXlzXG5cdCAgLy8gKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeVxuXHQgIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG5cdCAgLy8gYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG5cdCAgfSBlbHNlIHtcblx0ICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKTtcblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuXHQgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXHR9XG5cblx0ZnVuY3Rpb24gaXNCdWZmZXIgKHgpIHtcblx0ICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnIHx8IHR5cGVvZiB4Lmxlbmd0aCAhPT0gJ251bWJlcicpIHJldHVybiBmYWxzZTtcblx0ICBpZiAodHlwZW9mIHguY29weSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeC5zbGljZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0ICBpZiAoeC5sZW5ndGggPiAwICYmIHR5cGVvZiB4WzBdICE9PSAnbnVtYmVyJykgcmV0dXJuIGZhbHNlO1xuXHQgIHJldHVybiB0cnVlO1xuXHR9XG5cblx0ZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgb3B0cykge1xuXHQgIHZhciBpLCBrZXk7XG5cdCAgaWYgKGlzVW5kZWZpbmVkT3JOdWxsKGEpIHx8IGlzVW5kZWZpbmVkT3JOdWxsKGIpKVxuXHQgICAgcmV0dXJuIGZhbHNlO1xuXHQgIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cblx0ICBpZiAoYS5wcm90b3R5cGUgIT09IGIucHJvdG90eXBlKSByZXR1cm4gZmFsc2U7XG5cdCAgLy9+fn5JJ3ZlIG1hbmFnZWQgdG8gYnJlYWsgT2JqZWN0LmtleXMgdGhyb3VnaCBzY3Jld3kgYXJndW1lbnRzIHBhc3NpbmcuXG5cdCAgLy8gICBDb252ZXJ0aW5nIHRvIGFycmF5IHNvbHZlcyB0aGUgcHJvYmxlbS5cblx0ICBpZiAoaXNBcmd1bWVudHMoYSkpIHtcblx0ICAgIGlmICghaXNBcmd1bWVudHMoYikpIHtcblx0ICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgfVxuXHQgICAgYSA9IHBTbGljZS5jYWxsKGEpO1xuXHQgICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuXHQgICAgcmV0dXJuIGRlZXBFcXVhbChhLCBiLCBvcHRzKTtcblx0ICB9XG5cdCAgaWYgKGlzQnVmZmVyKGEpKSB7XG5cdCAgICBpZiAoIWlzQnVmZmVyKGIpKSB7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblx0ICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdCAgdHJ5IHtcblx0ICAgIHZhciBrYSA9IG9iamVjdEtleXMoYSksXG5cdCAgICAgICAga2IgPSBvYmplY3RLZXlzKGIpO1xuXHQgIH0gY2F0Y2ggKGUpIHsvL2hhcHBlbnMgd2hlbiBvbmUgaXMgYSBzdHJpbmcgbGl0ZXJhbCBhbmQgdGhlIG90aGVyIGlzbid0XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdCAgfVxuXHQgIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXNcblx0ICAvLyBoYXNPd25Qcm9wZXJ0eSlcblx0ICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aClcblx0ICAgIHJldHVybiBmYWxzZTtcblx0ICAvL3RoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLFxuXHQgIGthLnNvcnQoKTtcblx0ICBrYi5zb3J0KCk7XG5cdCAgLy9+fn5jaGVhcCBrZXkgdGVzdFxuXHQgIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICBpZiAoa2FbaV0gIT0ga2JbaV0pXG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICB9XG5cdCAgLy9lcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXksIGFuZFxuXHQgIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdFxuXHQgIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICBrZXkgPSBrYVtpXTtcblx0ICAgIGlmICghZGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBvcHRzKSkgcmV0dXJuIGZhbHNlO1xuXHQgIH1cblx0ICByZXR1cm4gdHlwZW9mIGEgPT09IHR5cGVvZiBiO1xuXHR9XG5cblxuLyoqKi8gfSxcbi8qIDU0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHR2YXIgc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA9IChmdW5jdGlvbigpe1xuXHQgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKVxuXHR9KSgpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG5cdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzQXJndW1lbnRzQ2xhc3MgPyBzdXBwb3J0ZWQgOiB1bnN1cHBvcnRlZDtcblxuXHRleHBvcnRzLnN1cHBvcnRlZCA9IHN1cHBvcnRlZDtcblx0ZnVuY3Rpb24gc3VwcG9ydGVkKG9iamVjdCkge1xuXHQgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcblx0fTtcblxuXHRleHBvcnRzLnVuc3VwcG9ydGVkID0gdW5zdXBwb3J0ZWQ7XG5cdGZ1bmN0aW9uIHVuc3VwcG9ydGVkKG9iamVjdCl7XG5cdCAgcmV0dXJuIG9iamVjdCAmJlxuXHQgICAgdHlwZW9mIG9iamVjdCA9PSAnb2JqZWN0JyAmJlxuXHQgICAgdHlwZW9mIG9iamVjdC5sZW5ndGggPT0gJ251bWJlcicgJiZcblx0ICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdjYWxsZWUnKSAmJlxuXHQgICAgIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsICdjYWxsZWUnKSB8fFxuXHQgICAgZmFsc2U7XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDU1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbidcblx0ICA/IE9iamVjdC5rZXlzIDogc2hpbTtcblxuXHRleHBvcnRzLnNoaW0gPSBzaGltO1xuXHRmdW5jdGlvbiBzaGltIChvYmopIHtcblx0ICB2YXIga2V5cyA9IFtdO1xuXHQgIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuXHQgIHJldHVybiBrZXlzO1xuXHR9XG5cblxuLyoqKi8gfSxcbi8qIDU2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXHR2YXIgX3NsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXHRleHBvcnRzLmxvb3BBc3luYyA9IGxvb3BBc3luYztcblxuXHRmdW5jdGlvbiBsb29wQXN5bmModHVybnMsIHdvcmssIGNhbGxiYWNrKSB7XG5cdCAgdmFyIGN1cnJlbnRUdXJuID0gMCxcblx0ICAgICAgaXNEb25lID0gZmFsc2U7XG5cdCAgdmFyIHN5bmMgPSBmYWxzZSxcblx0ICAgICAgaGFzTmV4dCA9IGZhbHNlLFxuXHQgICAgICBkb25lQXJncyA9IHVuZGVmaW5lZDtcblxuXHQgIGZ1bmN0aW9uIGRvbmUoKSB7XG5cdCAgICBpc0RvbmUgPSB0cnVlO1xuXHQgICAgaWYgKHN5bmMpIHtcblx0ICAgICAgLy8gSXRlcmF0ZSBpbnN0ZWFkIG9mIHJlY3Vyc2luZyBpZiBwb3NzaWJsZS5cblx0ICAgICAgZG9uZUFyZ3MgPSBbXS5jb25jYXQoX3NsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBuZXh0KCkge1xuXHQgICAgaWYgKGlzRG9uZSkge1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cblx0ICAgIGhhc05leHQgPSB0cnVlO1xuXHQgICAgaWYgKHN5bmMpIHtcblx0ICAgICAgLy8gSXRlcmF0ZSBpbnN0ZWFkIG9mIHJlY3Vyc2luZyBpZiBwb3NzaWJsZS5cblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICBzeW5jID0gdHJ1ZTtcblxuXHQgICAgd2hpbGUgKCFpc0RvbmUgJiYgY3VycmVudFR1cm4gPCB0dXJucyAmJiBoYXNOZXh0KSB7XG5cdCAgICAgIGhhc05leHQgPSBmYWxzZTtcblx0ICAgICAgd29yay5jYWxsKHRoaXMsIGN1cnJlbnRUdXJuKyssIG5leHQsIGRvbmUpO1xuXHQgICAgfVxuXG5cdCAgICBzeW5jID0gZmFsc2U7XG5cblx0ICAgIGlmIChpc0RvbmUpIHtcblx0ICAgICAgLy8gVGhpcyBtZWFucyB0aGUgbG9vcCBmaW5pc2hlZCBzeW5jaHJvbm91c2x5LlxuXHQgICAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBkb25lQXJncyk7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgaWYgKGN1cnJlbnRUdXJuID49IHR1cm5zICYmIGhhc05leHQpIHtcblx0ICAgICAgaXNEb25lID0gdHJ1ZTtcblx0ICAgICAgY2FsbGJhY2soKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICBuZXh0KCk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDU3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuXHR2YXIgX2ludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cblx0dmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxuXHR2YXIgX0FjdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG5cdHZhciBfUGF0aFV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuXHR2YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cblx0dmFyIF9ET01VdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG5cdHZhciBfRE9NU3RhdGVTdG9yYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cblx0dmFyIF9jcmVhdGVET01IaXN0b3J5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cblx0dmFyIF9jcmVhdGVET01IaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZURPTUhpc3RvcnkpO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIEhUTUw1J3MgaGlzdG9yeSBBUElcblx0ICogKHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50KSB0byBtYW5hZ2UgaGlzdG9yeS5cblx0ICogVGhpcyBpcyB0aGUgcmVjb21tZW5kZWQgbWV0aG9kIG9mIG1hbmFnaW5nIGhpc3RvcnkgaW4gYnJvd3NlcnMgYmVjYXVzZVxuXHQgKiBpdCBwcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cblx0ICpcblx0ICogTm90ZTogSW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgZnVsbFxuXHQgKiBwYWdlIHJlbG9hZHMgd2lsbCBiZSB1c2VkIHRvIHByZXNlcnZlIFVSTHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcblx0ICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG5cdCAgIV9FeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyAgdHJ1ZSA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuXG5cdCAgdmFyIGZvcmNlUmVmcmVzaCA9IG9wdGlvbnMuZm9yY2VSZWZyZXNoO1xuXG5cdCAgdmFyIGlzU3VwcG9ydGVkID0gX0RPTVV0aWxzLnN1cHBvcnRzSGlzdG9yeSgpO1xuXHQgIHZhciB1c2VSZWZyZXNoID0gIWlzU3VwcG9ydGVkIHx8IGZvcmNlUmVmcmVzaDtcblxuXHQgIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIGhpc3RvcnlTdGF0ZSA9IGhpc3RvcnlTdGF0ZSB8fCB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcblx0ICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgaGlzdG9yeVN0YXRlID0ge307XG5cdCAgICB9XG5cblx0ICAgIHZhciBwYXRoID0gX0RPTVV0aWxzLmdldFdpbmRvd1BhdGgoKTtcblx0ICAgIHZhciBfaGlzdG9yeVN0YXRlID0gaGlzdG9yeVN0YXRlO1xuXHQgICAgdmFyIGtleSA9IF9oaXN0b3J5U3RhdGUua2V5O1xuXG5cdCAgICB2YXIgc3RhdGUgPSB1bmRlZmluZWQ7XG5cdCAgICBpZiAoa2V5KSB7XG5cdCAgICAgIHN0YXRlID0gX0RPTVN0YXRlU3RvcmFnZS5yZWFkU3RhdGUoa2V5KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHN0YXRlID0gbnVsbDtcblx0ICAgICAga2V5ID0gaGlzdG9yeS5jcmVhdGVLZXkoKTtcblxuXHQgICAgICBpZiAoaXNTdXBwb3J0ZWQpIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgaGlzdG9yeVN0YXRlLCB7IGtleToga2V5IH0pLCBudWxsKTtcblx0ICAgIH1cblxuXHQgICAgdmFyIGxvY2F0aW9uID0gX1BhdGhVdGlscy5wYXJzZVBhdGgocGF0aCk7XG5cblx0ICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKF9leHRlbmRzKHt9LCBsb2NhdGlvbiwgeyBzdGF0ZTogc3RhdGUgfSksIHVuZGVmaW5lZCwga2V5KTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBzdGFydFBvcFN0YXRlTGlzdGVuZXIoX3JlZikge1xuXHQgICAgdmFyIHRyYW5zaXRpb25UbyA9IF9yZWYudHJhbnNpdGlvblRvO1xuXG5cdCAgICBmdW5jdGlvbiBwb3BTdGF0ZUxpc3RlbmVyKGV2ZW50KSB7XG5cdCAgICAgIGlmIChldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47IC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG5cblx0ICAgICAgdHJhbnNpdGlvblRvKGdldEN1cnJlbnRMb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuXHQgICAgfVxuXG5cdCAgICBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdwb3BzdGF0ZScsIHBvcFN0YXRlTGlzdGVuZXIpO1xuXG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgICBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csICdwb3BzdGF0ZScsIHBvcFN0YXRlTGlzdGVuZXIpO1xuXHQgICAgfTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBmaW5pc2hUcmFuc2l0aW9uKGxvY2F0aW9uKSB7XG5cdCAgICB2YXIgYmFzZW5hbWUgPSBsb2NhdGlvbi5iYXNlbmFtZTtcblx0ICAgIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuXHQgICAgdmFyIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcblx0ICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDtcblx0ICAgIHZhciBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXHQgICAgdmFyIGFjdGlvbiA9IGxvY2F0aW9uLmFjdGlvbjtcblx0ICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXk7XG5cblx0ICAgIGlmIChhY3Rpb24gPT09IF9BY3Rpb25zLlBPUCkgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvLlxuXG5cdCAgICBfRE9NU3RhdGVTdG9yYWdlLnNhdmVTdGF0ZShrZXksIHN0YXRlKTtcblxuXHQgICAgdmFyIHBhdGggPSAoYmFzZW5hbWUgfHwgJycpICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXHQgICAgdmFyIGhpc3RvcnlTdGF0ZSA9IHtcblx0ICAgICAga2V5OiBrZXlcblx0ICAgIH07XG5cblx0ICAgIGlmIChhY3Rpb24gPT09IF9BY3Rpb25zLlBVU0gpIHtcblx0ICAgICAgaWYgKHVzZVJlZnJlc2gpIHtcblx0ICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHBhdGg7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBQcmV2ZW50IGxvY2F0aW9uIHVwZGF0ZS5cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsIG51bGwsIHBhdGgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIFJFUExBQ0Vcblx0ICAgICAgaWYgKHVzZVJlZnJlc2gpIHtcblx0ICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShwYXRoKTtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFByZXZlbnQgbG9jYXRpb24gdXBkYXRlLlxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgbnVsbCwgcGF0aCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblxuXHQgIHZhciBoaXN0b3J5ID0gX2NyZWF0ZURPTUhpc3RvcnkyWydkZWZhdWx0J10oX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcblx0ICAgIGdldEN1cnJlbnRMb2NhdGlvbjogZ2V0Q3VycmVudExvY2F0aW9uLFxuXHQgICAgZmluaXNoVHJhbnNpdGlvbjogZmluaXNoVHJhbnNpdGlvbixcblx0ICAgIHNhdmVTdGF0ZTogX0RPTVN0YXRlU3RvcmFnZS5zYXZlU3RhdGVcblx0ICB9KSk7XG5cblx0ICB2YXIgbGlzdGVuZXJDb3VudCA9IDAsXG5cdCAgICAgIHN0b3BQb3BTdGF0ZUxpc3RlbmVyID0gdW5kZWZpbmVkO1xuXG5cdCAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGxpc3RlbmVyKSB7XG5cdCAgICBpZiAoKytsaXN0ZW5lckNvdW50ID09PSAxKSBzdG9wUG9wU3RhdGVMaXN0ZW5lciA9IHN0YXJ0UG9wU3RhdGVMaXN0ZW5lcihoaXN0b3J5KTtcblxuXHQgICAgdmFyIHVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW5CZWZvcmUobGlzdGVuZXIpO1xuXG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgICB1bmxpc3RlbigpO1xuXG5cdCAgICAgIGlmICgtLWxpc3RlbmVyQ291bnQgPT09IDApIHN0b3BQb3BTdGF0ZUxpc3RlbmVyKCk7XG5cdCAgICB9O1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuXHQgICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcFBvcFN0YXRlTGlzdGVuZXIgPSBzdGFydFBvcFN0YXRlTGlzdGVuZXIoaGlzdG9yeSk7XG5cblx0ICAgIHZhciB1bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGxpc3RlbmVyKTtcblxuXHQgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdW5saXN0ZW4oKTtcblxuXHQgICAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wUG9wU3RhdGVMaXN0ZW5lcigpO1xuXHQgICAgfTtcblx0ICB9XG5cblx0ICAvLyBkZXByZWNhdGVkXG5cdCAgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG5cdCAgICBpZiAoKytsaXN0ZW5lckNvdW50ID09PSAxKSBzdG9wUG9wU3RhdGVMaXN0ZW5lciA9IHN0YXJ0UG9wU3RhdGVMaXN0ZW5lcihoaXN0b3J5KTtcblxuXHQgICAgaGlzdG9yeS5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spO1xuXHQgIH1cblxuXHQgIC8vIGRlcHJlY2F0ZWRcblx0ICBmdW5jdGlvbiB1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vaykge1xuXHQgICAgaGlzdG9yeS51bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vayk7XG5cblx0ICAgIGlmICgtLWxpc3RlbmVyQ291bnQgPT09IDApIHN0b3BQb3BTdGF0ZUxpc3RlbmVyKCk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIF9leHRlbmRzKHt9LCBoaXN0b3J5LCB7XG5cdCAgICBsaXN0ZW5CZWZvcmU6IGxpc3RlbkJlZm9yZSxcblx0ICAgIGxpc3RlbjogbGlzdGVuLFxuXHQgICAgcmVnaXN0ZXJUcmFuc2l0aW9uSG9vazogcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayxcblx0ICAgIHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vazogdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rXG5cdCAgfSk7XG5cdH1cblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVCcm93c2VySGlzdG9yeTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA1OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cblx0dmFyIF93YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuXHR2YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cblx0dmFyIF9BY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxuXHR2YXIgX1BhdGhVdGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cblx0ZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oKSB7XG5cdCAgdmFyIGxvY2F0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gJy8nIDogYXJndW1lbnRzWzBdO1xuXHQgIHZhciBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBfQWN0aW9ucy5QT1AgOiBhcmd1bWVudHNbMV07XG5cdCAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBhcmd1bWVudHNbMl07XG5cblx0ICB2YXIgX2ZvdXJ0aEFyZyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMyB8fCBhcmd1bWVudHNbM10gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBhcmd1bWVudHNbM107XG5cblx0ICBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJykgbG9jYXRpb24gPSBfUGF0aFV0aWxzLnBhcnNlUGF0aChsb2NhdGlvbik7XG5cblx0ICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ29iamVjdCcpIHtcblx0ICAgICB0cnVlID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdUaGUgc3RhdGUgKDJuZCkgYXJndW1lbnQgdG8gY3JlYXRlTG9jYXRpb24gaXMgZGVwcmVjYXRlZDsgdXNlIGEgJyArICdsb2NhdGlvbiBkZXNjcmlwdG9yIGluc3RlYWQnKSA6IHVuZGVmaW5lZDtcblxuXHQgICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHsgc3RhdGU6IGFjdGlvbiB9KTtcblxuXHQgICAgYWN0aW9uID0ga2V5IHx8IF9BY3Rpb25zLlBPUDtcblx0ICAgIGtleSA9IF9mb3VydGhBcmc7XG5cdCAgfVxuXG5cdCAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgJy8nO1xuXHQgIHZhciBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2ggfHwgJyc7XG5cdCAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoIHx8ICcnO1xuXHQgIHZhciBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlIHx8IG51bGw7XG5cblx0ICByZXR1cm4ge1xuXHQgICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuXHQgICAgc2VhcmNoOiBzZWFyY2gsXG5cdCAgICBoYXNoOiBoYXNoLFxuXHQgICAgc3RhdGU6IHN0YXRlLFxuXHQgICAgYWN0aW9uOiBhY3Rpb24sXG5cdCAgICBrZXk6IGtleVxuXHQgIH07XG5cdH1cblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVMb2NhdGlvbjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA1OSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cblx0dmFyIF93YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuXHR2YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cblx0dmFyIF9pbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5cdHZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cblx0dmFyIF9QYXRoVXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG5cdHZhciBfQWN0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cblx0dmFyIF9jcmVhdGVIaXN0b3J5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XG5cblx0dmFyIF9jcmVhdGVIaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUhpc3RvcnkpO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZVN0YXRlU3RvcmFnZShlbnRyaWVzKSB7XG5cdCAgcmV0dXJuIGVudHJpZXMuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuXHQgICAgcmV0dXJuIGVudHJ5LnN0YXRlO1xuXHQgIH0pLnJlZHVjZShmdW5jdGlvbiAobWVtbywgZW50cnkpIHtcblx0ICAgIG1lbW9bZW50cnkua2V5XSA9IGVudHJ5LnN0YXRlO1xuXHQgICAgcmV0dXJuIG1lbW87XG5cdCAgfSwge30pO1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcblx0ICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG5cdCAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcblx0ICAgIG9wdGlvbnMgPSB7IGVudHJpZXM6IG9wdGlvbnMgfTtcblx0ICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuXHQgICAgb3B0aW9ucyA9IHsgZW50cmllczogW29wdGlvbnNdIH07XG5cdCAgfVxuXG5cdCAgdmFyIGhpc3RvcnkgPSBfY3JlYXRlSGlzdG9yeTJbJ2RlZmF1bHQnXShfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuXHQgICAgZ2V0Q3VycmVudExvY2F0aW9uOiBnZXRDdXJyZW50TG9jYXRpb24sXG5cdCAgICBmaW5pc2hUcmFuc2l0aW9uOiBmaW5pc2hUcmFuc2l0aW9uLFxuXHQgICAgc2F2ZVN0YXRlOiBzYXZlU3RhdGUsXG5cdCAgICBnbzogZ29cblx0ICB9KSk7XG5cblx0ICB2YXIgX29wdGlvbnMgPSBvcHRpb25zO1xuXHQgIHZhciBlbnRyaWVzID0gX29wdGlvbnMuZW50cmllcztcblx0ICB2YXIgY3VycmVudCA9IF9vcHRpb25zLmN1cnJlbnQ7XG5cblx0ICBpZiAodHlwZW9mIGVudHJpZXMgPT09ICdzdHJpbmcnKSB7XG5cdCAgICBlbnRyaWVzID0gW2VudHJpZXNdO1xuXHQgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoZW50cmllcykpIHtcblx0ICAgIGVudHJpZXMgPSBbJy8nXTtcblx0ICB9XG5cblx0ICBlbnRyaWVzID0gZW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG5cdCAgICB2YXIga2V5ID0gaGlzdG9yeS5jcmVhdGVLZXkoKTtcblxuXHQgICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycpIHJldHVybiB7IHBhdGhuYW1lOiBlbnRyeSwga2V5OiBrZXkgfTtcblxuXHQgICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gJ29iamVjdCcgJiYgZW50cnkpIHJldHVybiBfZXh0ZW5kcyh7fSwgZW50cnksIHsga2V5OiBrZXkgfSk7XG5cblx0ICAgICB0cnVlID8gIHRydWUgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnVW5hYmxlIHRvIGNyZWF0ZSBoaXN0b3J5IGVudHJ5IGZyb20gJXMnLCBlbnRyeSkgOiBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlKSA6IHVuZGVmaW5lZDtcblx0ICB9KTtcblxuXHQgIGlmIChjdXJyZW50ID09IG51bGwpIHtcblx0ICAgIGN1cnJlbnQgPSBlbnRyaWVzLmxlbmd0aCAtIDE7XG5cdCAgfSBlbHNlIHtcblx0ICAgICEoY3VycmVudCA+PSAwICYmIGN1cnJlbnQgPCBlbnRyaWVzLmxlbmd0aCkgPyAgdHJ1ZSA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICdDdXJyZW50IGluZGV4IG11c3QgYmUgPj0gMCBhbmQgPCAlcywgd2FzICVzJywgZW50cmllcy5sZW5ndGgsIGN1cnJlbnQpIDogX2ludmFyaWFudDJbJ2RlZmF1bHQnXShmYWxzZSkgOiB1bmRlZmluZWQ7XG5cdCAgfVxuXG5cdCAgdmFyIHN0b3JhZ2UgPSBjcmVhdGVTdGF0ZVN0b3JhZ2UoZW50cmllcyk7XG5cblx0ICBmdW5jdGlvbiBzYXZlU3RhdGUoa2V5LCBzdGF0ZSkge1xuXHQgICAgc3RvcmFnZVtrZXldID0gc3RhdGU7XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gcmVhZFN0YXRlKGtleSkge1xuXHQgICAgcmV0dXJuIHN0b3JhZ2Vba2V5XTtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7XG5cdCAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2N1cnJlbnRdO1xuXHQgICAgdmFyIGJhc2VuYW1lID0gZW50cnkuYmFzZW5hbWU7XG5cdCAgICB2YXIgcGF0aG5hbWUgPSBlbnRyeS5wYXRobmFtZTtcblx0ICAgIHZhciBzZWFyY2ggPSBlbnRyeS5zZWFyY2g7XG5cblx0ICAgIHZhciBwYXRoID0gKGJhc2VuYW1lIHx8ICcnKSArIHBhdGhuYW1lICsgKHNlYXJjaCB8fCAnJyk7XG5cblx0ICAgIHZhciBrZXkgPSB1bmRlZmluZWQsXG5cdCAgICAgICAgc3RhdGUgPSB1bmRlZmluZWQ7XG5cdCAgICBpZiAoZW50cnkua2V5KSB7XG5cdCAgICAgIGtleSA9IGVudHJ5LmtleTtcblx0ICAgICAgc3RhdGUgPSByZWFkU3RhdGUoa2V5KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGtleSA9IGhpc3RvcnkuY3JlYXRlS2V5KCk7XG5cdCAgICAgIHN0YXRlID0gbnVsbDtcblx0ICAgICAgZW50cnkua2V5ID0ga2V5O1xuXHQgICAgfVxuXG5cdCAgICB2YXIgbG9jYXRpb24gPSBfUGF0aFV0aWxzLnBhcnNlUGF0aChwYXRoKTtcblxuXHQgICAgcmV0dXJuIGhpc3RvcnkuY3JlYXRlTG9jYXRpb24oX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7IHN0YXRlOiBzdGF0ZSB9KSwgdW5kZWZpbmVkLCBrZXkpO1xuXHQgIH1cblxuXHQgIGZ1bmN0aW9uIGNhbkdvKG4pIHtcblx0ICAgIHZhciBpbmRleCA9IGN1cnJlbnQgKyBuO1xuXHQgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDtcblx0ICB9XG5cblx0ICBmdW5jdGlvbiBnbyhuKSB7XG5cdCAgICBpZiAobikge1xuXHQgICAgICBpZiAoIWNhbkdvKG4pKSB7XG5cdCAgICAgICAgIHRydWUgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ0Nhbm5vdCBnbyglcykgdGhlcmUgaXMgbm90IGVub3VnaCBoaXN0b3J5JywgbikgOiB1bmRlZmluZWQ7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cblx0ICAgICAgY3VycmVudCArPSBuO1xuXG5cdCAgICAgIHZhciBjdXJyZW50TG9jYXRpb24gPSBnZXRDdXJyZW50TG9jYXRpb24oKTtcblxuXHQgICAgICAvLyBjaGFuZ2UgYWN0aW9uIHRvIFBPUFxuXHQgICAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhfZXh0ZW5kcyh7fSwgY3VycmVudExvY2F0aW9uLCB7IGFjdGlvbjogX0FjdGlvbnMuUE9QIH0pKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICBmdW5jdGlvbiBmaW5pc2hUcmFuc2l0aW9uKGxvY2F0aW9uKSB7XG5cdCAgICBzd2l0Y2ggKGxvY2F0aW9uLmFjdGlvbikge1xuXHQgICAgICBjYXNlIF9BY3Rpb25zLlBVU0g6XG5cdCAgICAgICAgY3VycmVudCArPSAxO1xuXG5cdCAgICAgICAgLy8gaWYgd2UgYXJlIG5vdCBvbiB0aGUgdG9wIG9mIHN0YWNrXG5cdCAgICAgICAgLy8gcmVtb3ZlIHJlc3QgYW5kIHB1c2ggbmV3XG5cdCAgICAgICAgaWYgKGN1cnJlbnQgPCBlbnRyaWVzLmxlbmd0aCkgZW50cmllcy5zcGxpY2UoY3VycmVudCk7XG5cblx0ICAgICAgICBlbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuXHQgICAgICAgIHNhdmVTdGF0ZShsb2NhdGlvbi5rZXksIGxvY2F0aW9uLnN0YXRlKTtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgY2FzZSBfQWN0aW9ucy5SRVBMQUNFOlxuXHQgICAgICAgIGVudHJpZXNbY3VycmVudF0gPSBsb2NhdGlvbjtcblx0ICAgICAgICBzYXZlU3RhdGUobG9jYXRpb24ua2V5LCBsb2NhdGlvbi5zdGF0ZSk7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGhpc3Rvcnk7XG5cdH1cblxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVNZW1vcnlIaXN0b3J5O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDYwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG5cdCAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cblx0ICovXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgUkVBQ1RfU1RBVElDUyA9IHtcblx0ICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuXHQgICAgY29udGV4dFR5cGVzOiB0cnVlLFxuXHQgICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuXHQgICAgZGlzcGxheU5hbWU6IHRydWUsXG5cdCAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG5cdCAgICBtaXhpbnM6IHRydWUsXG5cdCAgICBwcm9wVHlwZXM6IHRydWUsXG5cdCAgICB0eXBlOiB0cnVlXG5cdH07XG5cblx0dmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG5cdCAgICBuYW1lOiB0cnVlLFxuXHQgICAgbGVuZ3RoOiB0cnVlLFxuXHQgICAgcHJvdG90eXBlOiB0cnVlLFxuXHQgICAgY2FsbGVyOiB0cnVlLFxuXHQgICAgYXJndW1lbnRzOiB0cnVlLFxuXHQgICAgYXJpdHk6IHRydWVcblx0fTtcblxuXHR2YXIgaXNHZXRPd25Qcm9wZXJ0eVN5bWJvbHNBdmFpbGFibGUgPSB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJztcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBjdXN0b21TdGF0aWNzKSB7XG5cdCAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHsgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblx0ICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cblx0ICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXHQgICAgICAgIGlmIChpc0dldE93blByb3BlcnR5U3ltYm9sc0F2YWlsYWJsZSkge1xuXHQgICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleXNbaV1dICYmICFLTk9XTl9TVEFUSUNTW2tleXNbaV1dICYmICghY3VzdG9tU3RhdGljcyB8fCAhY3VzdG9tU3RhdGljc1trZXlzW2ldXSkpIHtcblx0ICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q29tcG9uZW50W2tleXNbaV1dID0gc291cmNlQ29tcG9uZW50W2tleXNbaV1dO1xuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcblxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiA2MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgc3RyaWN0VXJpRW5jb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mik7XG5cblx0ZXhwb3J0cy5leHRyYWN0ID0gZnVuY3Rpb24gKHN0cikge1xuXHRcdHJldHVybiBzdHIuc3BsaXQoJz8nKVsxXSB8fCAnJztcblx0fTtcblxuXHRleHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gKHN0cikge1xuXHRcdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuIHt9O1xuXHRcdH1cblxuXHRcdHN0ciA9IHN0ci50cmltKCkucmVwbGFjZSgvXihcXD98I3wmKS8sICcnKTtcblxuXHRcdGlmICghc3RyKSB7XG5cdFx0XHRyZXR1cm4ge307XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbiAocmV0LCBwYXJhbSkge1xuXHRcdFx0dmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcblx0XHRcdC8vIEZpcmVmb3ggKHByZSA0MCkgZGVjb2RlcyBgJTNEYCB0byBgPWBcblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nL3B1bGwvMzdcblx0XHRcdHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpO1xuXHRcdFx0dmFyIHZhbCA9IHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0cy5qb2luKCc9JykgOiB1bmRlZmluZWQ7XG5cblx0XHRcdGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuXG5cdFx0XHQvLyBtaXNzaW5nIGA9YCBzaG91bGQgYmUgYG51bGxgOlxuXHRcdFx0Ly8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuXHRcdFx0dmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cblx0XHRcdGlmICghcmV0Lmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0cmV0W2tleV0gPSB2YWw7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0W2tleV0pKSB7XG5cdFx0XHRcdHJldFtrZXldLnB1c2godmFsKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldFtrZXldID0gW3JldFtrZXldLCB2YWxdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0sIHt9KTtcblx0fTtcblxuXHRleHBvcnRzLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChvYmopIHtcblx0XHRyZXR1cm4gb2JqID8gT2JqZWN0LmtleXMob2JqKS5zb3J0KCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHZhciB2YWwgPSBvYmpba2V5XTtcblxuXHRcdFx0aWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhbCA9PT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4ga2V5O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG5cdFx0XHRcdHJldHVybiB2YWwuc2xpY2UoKS5zb3J0KCkubWFwKGZ1bmN0aW9uICh2YWwyKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0cmljdFVyaUVuY29kZShrZXkpICsgJz0nICsgc3RyaWN0VXJpRW5jb2RlKHZhbDIpO1xuXHRcdFx0XHR9KS5qb2luKCcmJyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzdHJpY3RVcmlFbmNvZGUoa2V5KSArICc9JyArIHN0cmljdFVyaUVuY29kZSh2YWwpO1xuXHRcdH0pLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuXHRcdFx0cmV0dXJuIHgubGVuZ3RoID4gMDtcblx0XHR9KS5qb2luKCcmJykgOiAnJztcblx0fTtcblxuXG4vKioqLyB9LFxuLyogNjIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdFx0cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgZnVuY3Rpb24gKGMpIHtcblx0XHRcdHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdFx0fSk7XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDYzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKipcblx0ICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cblx0ICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICpcblx0ICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG5cdCAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuXHQgKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cblx0ICovXG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdC8qKlxuXHQgKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG5cdCAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcblx0ICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcblx0ICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG5cdCAqL1xuXG5cdHZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuXHRpZiAodHJ1ZSkge1xuXHQgIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuXHQgICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdCAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG5cdCAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG5cdCAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcblx0ICAgIH1cblx0ICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoXG5cdCAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuXHQgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuXHQgICAgICApO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG5cdCAgICAgIHRocm93IG5ldyBFcnJvcihcblx0ICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG5cdCAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuXHQgICAgICApO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoIWNvbmRpdGlvbikge1xuXHQgICAgICB2YXIgYXJnSW5kZXggPSAwO1xuXHQgICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcblx0ICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG5cdCAgICAgIH1cblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcblx0ICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG5cdCAgICAgIH0gY2F0Y2goeCkge31cblx0ICAgIH1cblx0ICB9O1xuXHR9XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuXG5cbi8qKiovIH1cbi8qKioqKiovIF0pXG59KTtcbjsiXX0=